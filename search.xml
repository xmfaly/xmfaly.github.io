<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>搭建travis-ci的本地构建环境</title>
      <link href="/2018/08/20/%E6%90%AD%E5%BB%BAtravis-ci%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/08/20/%E6%90%AD%E5%BB%BAtravis-ci%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>前端项目我一直是用travis-ci实现ci/cd的，平时出现的一些错误在日志上都可以直接看到，然后调整解决就行，但今天这个错误在web页的日志上无法看出来，而且我在本地环境构建没有任何问题，于是我想在本地搭建一个travis-ci的构建环境来看一下到底是哪里的错误。<br>从官方那里可以找到docker镜像，但是感觉还不是很完善，需要手动的地方还有很多，而且坑也不少。<br>这里我直接给出到今天为止可以使用的步骤，因为我觉得一方面他们的docker镜像应该还会进一步完善，还可以再方便一点，另一方面各依赖软件的支持成都很大程度上也会影响构件过程。<br>我构建的是node的环境，在这里我只讨论主要步骤，类似于换源，网络,linux或者其他docker问题不在本文的讨论范围之内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 运行容器</span><br><span class="line">docker run -it --name=travis travisci/ci-garnet:packer-1512502276-986baf0 bash</span><br><span class="line"></span><br><span class="line">su - travis</span><br><span class="line"></span><br><span class="line"># 安装ruby</span><br><span class="line">rvm install 2.3.0 </span><br><span class="line">rvm use 2.3.0</span><br><span class="line"></span><br><span class="line"># 构建travis构建工具</span><br><span class="line">cd builds</span><br><span class="line">git clone https://github.com/travis-ci/travis-build.git</span><br><span class="line">cd travis-build</span><br><span class="line">gem install travis</span><br><span class="line"># 创建.travis</span><br><span class="line">travis</span><br><span class="line">ln -s `pwd` ~/.travis/travis-build</span><br><span class="line">bundle install</span><br><span class="line">bundler add travis       </span><br><span class="line">sudo mkdir bin           </span><br><span class="line">sudo chmod a+w bin/       </span><br><span class="line">bundler binstubs travis  </span><br><span class="line"></span><br><span class="line"># 克隆自己的项目生成构建脚本</span><br><span class="line">cd ~/builds</span><br><span class="line">git clone -b dev https://github.com/yidreamc/todo</span><br><span class="line">cd todo</span><br><span class="line">~/.travis/travis-build/bin/travis compile &gt; ci.sh</span><br><span class="line"></span><br><span class="line"># 运行构建脚本</span><br><span class="line">bash ci.sh</span><br></pre></td></tr></table></figure></p><p>这样就可以在本地搭建一个travis-ci的构建环境，方便调试和测试。</p><p>最后我找到了错误，几个语法不规范导致了构建失败，我本地可以构建成功，远程失败，我估计在构建的过程中travis-ci会调用类似与eslint之类的东西进行代码审查吧，不通过直接pass掉。</p><p>文章参考<a href="https://stackoverflow.com/questions/29753560/how-to-reproduce-a-travis-ci-build-environment-for-debugging" target="_blank" rel="noopener">How to reproduce a travis-ci build environment for debugging</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>js加载的顺序和时间问题</title>
      <link href="/2018/08/15/js%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%92%8C%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/15/js%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%92%8C%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>想写一个Chrome插件，但是在js加载时间上掌握不好，或者说以前从来没有考虑过这方面的问题，特意查了一下记录一下。</p><h3 id="多个js文件加载顺序"><a href="#多个js文件加载顺序" class="headerlink" title="多个js文件加载顺序"></a>多个js文件加载顺序</h3><p>三个js文件，依次引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;A&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(&quot;B&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(&quot;C&quot;);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>三个文件的大小是第二个远远大于一三，最后的输出结果是ABC<br>这说明使用script标签默认是阻塞顺序执行的。<br>可以使用async去打破这种阻塞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;A&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script async=&quot;true&quot;&gt;alert(&quot;B&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(&quot;C&quot;);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这样的话就回输出ACB<br>使用了async之后，就不会组织后续文档的下载和执行，而本身使用async属性的js会在这个文件下载之后再执行。<br>使用以下的方式创建script标签等同于使用async属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var script = document.createElement(&quot;script&quot;);</span><br><span class="line">script.src = &quot;file.js&quot;;</span><br><span class="line">document.body.appendChild(script);</span><br></pre></td></tr></table></figure></p><p>于async类似的还有一个defer属性，但是他们的实现原理完全不同。defer会确保脚本在文档解析之后执行，也就是DOMContentLoaded事件触发之前执行，如果有多个defer，那么这些defer会在文档解析之后顺序执行。其实平时所做的把script放到body之前写就是和defer实现一样的效果。</p><h3 id="文档加载时间"><a href="#文档加载时间" class="headerlink" title="文档加载时间"></a>文档加载时间</h3><ul><li>DOM ready是发生在dom的结构加载完成之后发生的，不包括图片等媒体信息的加载。</li><li>DOMContentLoaded触发时机：文档加载并解析完毕，所有deferred脚本执行完毕。但此时图片和async脚本可能依旧在加载。</li><li>DOM load实在dom加载之后发生的,也就是说整个文档图片媒体都加载完了再执行</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>js正则表达式</title>
      <link href="/2018/08/15/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/08/15/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>今天改了好多bug，用到了很多次正则表达式，我从来就没有系统看过正则表达式的知识，趁现在暂时没有其他的bug，正好看看正则表达式。</p><h3 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h3><p>在js中可以通过两种方式创建正则表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let reg1 = new RegExp(&apos;a$&apos;)</span><br><span class="line">let reg2 = /a$/</span><br></pre></td></tr></table></figure></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><table><thead><tr><th>符号</th><th>匹配</th></tr></thead><tbody><tr><td>[字符]</td><td>方括号内的任意字符</td></tr><tr><td>[^字符]</td><td>不在方括号内部的字符</td></tr><tr><td>.</td><td>任意字符</td></tr><tr><td>\w</td><td>任何ASCⅡ码组成的单词</td></tr><tr><td>\W</td><td>任何不适ASCⅡ码组成的单词</td></tr><tr><td>\s</td><td>任何Unicode空白符(空格、回车、制表等)</td></tr><tr><td>\S</td><td>任何非Unicode空白符</td></tr><tr><td>\d</td><td>任意数字</td></tr><tr><td>\D</td><td>任意非数字</td></tr></tbody></table><h4 id="重复字符类"><a href="#重复字符类" class="headerlink" title="重复字符类"></a>重复字符类</h4><table><thead><tr><th>符号</th><th>匹配</th></tr></thead><tbody><tr><td>{n,m}</td><td>匹配前一项至少n次不超过m次</td></tr><tr><td>{n,}</td><td>匹配前一项n次或多次</td></tr><tr><td>{n}</td><td>匹配前一项n次</td></tr><tr><td>?</td><td>匹配前一项0次或1次</td></tr><tr><td>+</td><td>匹配前一项1次或多次</td></tr><tr><td>*</td><td>匹配前一项0次或多次</td></tr></tbody></table><h4 id="分组符"><a href="#分组符" class="headerlink" title="分组符"></a>分组符</h4><table><thead><tr><th>符号</th><th>匹配</th></tr></thead><tbody><tr><td>\</td><td></td><td>或</td></tr><tr><td>()</td><td>组合</td></tr></tbody></table><h4 id="锚字符"><a href="#锚字符" class="headerlink" title="锚字符"></a>锚字符</h4><table><thead><tr><th>符号</th><th>匹配</th></tr></thead><tbody><tr><td>^</td><td>多行匹配的过程中匹配一行的开头</td></tr><tr><td>$</td><td>多行匹配的过程中匹配一行的结尾</td></tr><tr><td>\b</td><td>匹配单词的边界</td></tr><tr><td>\B</td><td>匹配非单词的边界</td></tr><tr><td>(?=p)</td><td>接下来的字符都和p匹配</td></tr><tr><td>(?!p)</td><td>接下来的字符不与p匹配</td></tr></tbody></table><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><table><thead><tr><th>符号</th><th>匹配</th></tr></thead><tbody><tr><td>i</td><td>执行不区分大小写匹配</td></tr><tr><td>g</td><td>执行全局匹配(贪婪匹配)</td></tr><tr><td>m</td><td>多行匹配模式</td></tr></tbody></table><p>感觉看懂了规则之后感觉还蛮简单的，不过要是自己独立写一个出来应该还是会漏洞百出。</p>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>乱设置环境变量的坑</title>
      <link href="/2018/07/31/%E4%B9%B1%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E5%9D%91/"/>
      <url>/2018/07/31/%E4%B9%B1%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>记录一次采坑记录</p><p>运行vue项目的时候报了一个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getaddrinfo ENOTFOUND C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure></p><p>网上找了一下很快找到解决方案，在host文件里面添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure></p><p>但是没有用，依然报错。<br>没办法，网上全是这一种解决思路，我只好自己查日志。在日志中发现一行输出了环境变量的值，于是我就想是不是环境变量的影响，因为开发的时候会经常修改host文件，我就把host文件的目录放到环境变量里了，每次想要修改，就Win + R 输入环境变量就打开目录，然后直接修改。<br>我试着把这条环境变量删掉，果然就好了。因为我把环境变量的key直接设置的host，可能和框架里面的取环境变量的代码有冲突吧。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>maven多配置文件</title>
      <link href="/2018/07/06/maven%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/06/maven%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>我也不知道该怎么总结这篇文章的题目，事情是这样的，在开发的过程中我需要一个插件，但是在生产环境中我不需要这个插件，我想了一下maven的那些作用域，竟然没有可以解决这个问题的。</p><p>这个问题可以通过配置两份<code>pom.xml</code>来实现，我不知道行业内在生产中是不是这样做的，总是感觉不优雅。</p><p><code>mvn -f pom-prod.xml package</code></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>合成10</title>
      <link href="/2018/06/10/%E5%90%88%E6%88%9010/"/>
      <url>/2018/06/10/%E5%90%88%E6%88%9010/</url>
      <content type="html"><![CDATA[<p>合成10是一个DOM小游戏，创意并不是我的，这个是我很久以前在网上看到的，他的游戏机制类似于1024。</p><p><img src="/img/Screenshot_2018-06-10-21-17-09-70.png" alt="游戏截图"></p><p>每次点击合成会把相邻的数字合成一个更大数字。<br>前几天闲来无事的时候，我把它移植到了微信小程序上了。因为微信对小游戏的管控比较严格，我在分类的时候没写游戏，没想到还能过了审核。<br>游戏的算法其实很简单，简单的循环就可以解决，但是在微信上的性能远不如在浏览器上的性能。这个大概因为这是我第一次动手开发微信小程序，可能对一些东西的最佳实践理解的不够，没把正确的东西给应用上。但是把玩还是可以的。</p><p>小游戏的微信码<img src="/img/gh_a6a063e0b8e4_430.jpg" alt="微信码"></p><p>或者小程序搜索<code>合并方块</code><br>代码地址 <a href="https://github.com/xmfaly/Merge-Block" target="_blank" rel="noopener">xmfaly/Merge-Block</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>java自定义排序</title>
      <link href="/2018/05/06/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/06/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>遇到过很多次了，种于狠下心总结一下，免得以后每次都要再找。<br>java自定义排序有两个Object对象，o1和o2（this相当于o1），如果返回负值则把o1插到o2前面，如果返回正值，把o1放到o2后面，如果返回0保持原来顺序不变。</p><p>排序有两种实现方式，第一种是要排序的类实现Comparable接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class T implements Comparable &#123;</span><br><span class="line"></span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    public T(int x,int y)&#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Object o) &#123;</span><br><span class="line">        if(this.x &lt; ((T)o).x)</span><br><span class="line">            return -1;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;x: &quot; + x + &quot; y: &quot; + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new T(1,2));</span><br><span class="line">        list.add(new T(3,5));</span><br><span class="line">        list.add(new T(2,1));</span><br><span class="line">        Collections.sort(list);</span><br><span class="line"></span><br><span class="line">        for(int i = 0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种类似与c++定义比较函数的方式，不过是java的风格，覆盖Comparator中的compare方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class T &#123;</span><br><span class="line"></span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    public T(int x,int y)&#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;X: &quot; + x + &quot; y: &quot; + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new T(1,2));</span><br><span class="line">        list.add(new T(3,5));</span><br><span class="line">        list.add(new T(2,1));</span><br><span class="line">        Collections.sort(list, new Comparator&lt;T&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(T o1, T o2) &#123;</span><br><span class="line">                if(o1.x &lt; o2.x)</span><br><span class="line">                    return -1;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        for(int i = 0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring boot使用多线程</title>
      <link href="/2018/04/24/spring-boot%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/04/24/spring-boot%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>最近遇到一个难题，我需要在boot项目中开一个监视器，监视器中需要用到dao接口，spring boot的dao是依赖注入进去的，并不能手动new出来，如果是常规的方法先建线程的话，dao注入不进去，查了很多网站，想了很多办法最后找到了解决办法。在这里记录一下。<a href="https://blog.csdn.net/u010454030/article/details/52317438" target="_blank" rel="noopener">https://blog.csdn.net/u010454030/article/details/52317438</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ApplicationContextProvider implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private static ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    private ApplicationContextProvider()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public  static &lt;T&gt; T getBean(String name,Class&lt;T&gt; aClass)&#123;</span><br><span class="line">        return context.getBean(name,aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;mTask&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class MoniotrTask extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    final static Logger logger= LoggerFactory.getLogger(MoniotrTask.class);</span><br><span class="line">    //参数封装</span><br><span class="line">    private Monitor monitor;</span><br><span class="line"></span><br><span class="line">    public void setMonitor(Monitor monitor) &#123;</span><br><span class="line">        this.monitor = monitor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Resource(name = &quot;greaterDaoImpl&quot;)</span><br><span class="line">    private RuleDao greaterDaoImpl;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        logger.info(&quot;线程:&quot;+Thread.currentThread().getName()+&quot;运行中.....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class StartTask   &#123;</span><br><span class="line"></span><br><span class="line">    final static Logger logger= LoggerFactory.getLogger(StartTask.class);</span><br><span class="line"></span><br><span class="line">    //定义在构造方法完毕后，执行这个初始化方法</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public  void init()&#123;</span><br><span class="line"></span><br><span class="line">        final List&lt;Monitor&gt; list = ParseRuleUtils.parseRules();</span><br><span class="line">        logger.info(&quot;监控任务的总Task数：&#123;&#125;&quot;,list.size());</span><br><span class="line">        for(int i=0;i&lt;list.size();i++) &#123;</span><br><span class="line">            MoniotrTask moniotrTask=   ApplicationContextProvider.getBean(&quot;mTask&quot;, MoniotrTask.class);</span><br><span class="line">            moniotrTask.setMonitor(list.get(i));</span><br><span class="line">            moniotrTask.start();</span><br><span class="line">            logger.info(&quot;第&#123;&#125;个监控task: &#123;&#125;启动 !&quot;,(i+1),list.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring-boot注入静态变量</title>
      <link href="/2018/04/06/spring-boot%E6%B3%A8%E5%85%A5%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/"/>
      <url>/2018/04/06/spring-boot%E6%B3%A8%E5%85%A5%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>之前遇到过一次，当时刚开始玩spring-boot不知道该怎么搜索关键字没解决，今天又遇到了。<br>一个项目需要配置一个系统代理，需要在spring的启动文件里配置，因为代码是开源的，但代理的地址我不太想让别人看到，写到配置文件里注入的时候遇到了困难。<br>知道关键字之后解决起来其实蛮简单的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static String proxyHost;</span><br><span class="line"></span><br><span class="line">public static String proxyPort;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.host&#125;&quot;)</span><br><span class="line">private String host;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.port&#125;&quot;)</span><br><span class="line">private String port;</span><br><span class="line"></span><br><span class="line">@PostConstruct</span><br><span class="line">public void initData()&#123;</span><br><span class="line">    proxyHost = host;</span><br><span class="line">    proxyPort= port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法实验证明是可以的。但由于框架启动反射顺序的原因，这些变量必须放到别的java文件里，不能直接放到spring的启动文件里面。<br>网上还有一种思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static String proxyHost;</span><br><span class="line"></span><br><span class="line">public static String proxyPort;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.host&#125;&quot;)</span><br><span class="line">public static void setProxyHost(String proxyHost) &#123;</span><br><span class="line">    TestConfig.proxyHost = proxyHost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.port&#125;&quot;)</span><br><span class="line">public static void setProxyPort(String proxyPort) &#123;</span><br><span class="line">    TestConfig.proxyPort = proxyPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过实验证明不可行。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于docker部署spring-boot的尝试</title>
      <link href="/2018/04/01/%E5%85%B3%E4%BA%8Edocker%E9%83%A8%E7%BD%B2spring-boot%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
      <url>/2018/04/01/%E5%85%B3%E4%BA%8Edocker%E9%83%A8%E7%BD%B2spring-boot%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>最近搬家一个服务器，发现要安装好多好多的环境，相当麻烦。<br>以前我也经常重装电脑，后来觉得麻烦就把我的开发环境都弄到了虚拟机里面，一方面linux环境，另一方面也不用反复重装。想到这里我想到了被我遗忘很久的docker了。<br>可以在服务器上只安装docker，然后以后环境什么的不用我考虑了。</p><p>先用我最常用的spring-boot尝试一下，以后再部署其他的。在这里记录一下过程。</p><h3 id="添加maven构建插件"><a href="#添加maven构建插件" class="headerlink" title="添加maven构建插件"></a>添加maven构建插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;docker.image.prefix&gt;xmfaly&lt;/docker.image.prefix&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.4.11&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h3 id="建立Dockerfile"><a href="#建立Dockerfile" class="headerlink" title="建立Dockerfile"></a>建立Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">VOLUME /log</span><br><span class="line">ADD *.jar app.jar</span><br><span class="line">RUN sh -c &apos;touch /app.jar&apos;</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENV JAVA_OPTS=&quot;&quot;</span><br><span class="line">ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar &gt;&gt;/log/out&quot; ]</span><br></pre></td></tr></table></figure><h3 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h3><p>因为我是本地虚拟机linux环境。所以我需要先从git拉最新的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#docker 用户名</span><br><span class="line">USER_NAME=</span><br><span class="line"># 项目名称</span><br><span class="line">PROJ_NAME=</span><br><span class="line"># 服务器用户名</span><br><span class="line">SERVER_NAME=</span><br><span class="line"># 服务器地址</span><br><span class="line">SERVER_HOST=</span><br><span class="line"># 部署端口</span><br><span class="line">DEPLOY_PORT=</span><br><span class="line"></span><br><span class="line"># 停止原来的容器</span><br><span class="line"># docker stop $PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 删除原来的容器和镜像</span><br><span class="line">docker rm $PROJ_NAME</span><br><span class="line">docker rmi $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line">#拉取更新</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># 本地构件镜像</span><br><span class="line">./mvnw package -Dmaven.test.skip=true docker:build</span><br><span class="line"></span><br><span class="line"># 上传镜像到远程仓库</span><br><span class="line">docker push $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 连接服务器</span><br><span class="line">ssh $SERVER_NAME@$SERVER_HOST -tt &lt;&lt; cmd</span><br><span class="line"></span><br><span class="line"># 停止原来的容器</span><br><span class="line">docker stop $PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 删除原来的容器</span><br><span class="line">docker rm $PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 拉取最新的镜像</span><br><span class="line">docker pull $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 运行容器</span><br><span class="line">docker run --name=$PROJ_NAME -p $DEPLOY_PORT:8080 -v /root/log/:/log/ -t $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line">cmd</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于掌上联创的探索</title>
      <link href="/2018/03/25/%E5%85%B3%E4%BA%8E%E6%8E%8C%E4%B8%8A%E8%81%94%E5%88%9B%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
      <url>/2018/03/25/%E5%85%B3%E4%BA%8E%E6%8E%8C%E4%B8%8A%E8%81%94%E5%88%9B%E7%9A%84%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p>我们学校使用了联创打印系统，应该好多学校都在用，他们提供了一个客户端，我们下载之后在本地打印，之后到打印机刷卡取走打印的东西。<br>这个系统对于以前去学校外面排队打印而言相当方便。<br>我使用这个系统的主要场景就是打印课件，很多时候老师前天把课件发给我们，第二天讲课会用到，但是忘记在电脑上打印了就贼尴尬，因为联创只提供pc版的客户端，这个时候在教室的我就显得很无助了。为此有一阵还特地开着电脑，方便随时可以用teamviewer进行控制打印。<br>刚开始的时候我还想他们为什么不提供一个手机客户端，后来我了解到打印机只负责打印，他们的客户端负责传输，而文件的格式解析什么的都在本地进行，也就是假如我想打印一个word文件，我电脑上必须有可以识别word的软件，否则我就不能打印。也就是说，如果做一个手机客户端，在现有的环境下，几乎是不可能的，因为主流的手机可以解析word，pdf的这些软件都不提供打印的接口。让联创自己做，当我没说吧。<br>我就想我能不能在服务器上做一个中转，我的手机把文件传到服务器上，然后服务器上装了联创的客户端和各种能够解析pdf，word这些的软件，在服务器上把我想打印的文件送到联创的服务器上。<br>想想还觉得蛮简单的，但是实际操作的时候遇到了一系列的问题。</p><h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><p>因为联创只提供windows客户端为了简便起见我也选择了windows的服务器。</p><h3 id="内网问题"><a href="#内网问题" class="headerlink" title="内网问题"></a>内网问题</h3><p>我是用的时腾讯云的服务器，但是学校联创客户端只有校园网才可以连接，我们学校也提供vpn，有两种方式一种是客户端，一种是直接设置，直接设置那种在平常的pc机上很简单，但是如果是服务器上就相当麻烦，正好是windows服务器，我就直接下载了客户端安装上。登陆之后发现再也连不上服务器了，因为vpn改变了地址。问了大佬们如何解决这个问题，有人说可以设置解决这个，也有人说可以搞两台服务器，一台做反向代理转发，一台开vpn。我觉得这两个办法都行，但我没有采用，我用的是sock5 + Proxifier解决这个问题的。</p><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p>因为打印的文件可能有多种格式。我的服务器内存有限所以我肯定不能把各种软件都装一遍。最后折中一下我选择装 Sumatra PDF + Liboffice 。pdf软件负责解析文件和office软件负责把所有其他格式的文件转换成pdf。</p><h3 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h3><p>因为平时用的都是java，一开始想找一个java的可以控制窗口程序的库，但最后还是放弃了，果断转为python，我才用一个非常流行的窗口程序测试框架pywinauto来控制打印机程序和pdf解析软件。之所以不用命令行直接控制打印机，我感觉是因为联创当时写的时候的有个bug把。把任务放到队列中一直不打印，所以只能模拟人工操作了。也可能是我对windows的打印任务不了解导致的。</p><h3 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a>web框架</h3><p>这里先说一下为啥不用微信小程序，微信小程序是提供了文件上传功能的，但是不提供文件选择的api，换句话说，我可以上传，但是鬼知道你要上传的文件在哪个文件夹里，叫什么名字。所以没办法只能选择html5了，后台方面因为主要逻辑都是python，所以直接整了个python的web框架flask，话说python的东西就是简单方便，这个框架我看了还不到10分钟吧就能上手写东西了。</p><h3 id="统一身份认证"><a href="#统一身份认证" class="headerlink" title="统一身份认证"></a>统一身份认证</h3><p>联创使用了我们学校的统一身份认证，但是感觉他的逻辑有点问题，先解析文件，然后认证，然后上传打印，如果我也模拟他这样的操作的话，本身我的服务器带宽低资源少，费了半天时间传到服务器上，然后又是半天解析文件，然后反回来一个用户名密码错误。<br>所以我放弃了联创自带的认证，在传文件之前用requests向统一身份认证接口post数据，认证成功继续，失败直接返回结果。</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>当然还有一些解决不了的或者不能解决的问题。上面也提到了一方面是网速，一方面是服务器资源。当然还有我的调度算法，falsk的单线程。这些都是问题。不过没太有时间去优化了。暂时可以用就行了吧。</p><p>最后福利时间，放出地址吧。这个项目我不是很想开源，而且由于服务器资源有限，肯定是不能对所有人开放的。希望看到地址的人且行且珍惜，不要乱宣传。<a href="http://115.159.153.43:5000/login" target="_blank" rel="noopener">http://115.159.153.43:5000/login</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>求1+2+3+4+...+n</title>
      <link href="/2018/03/13/%E6%B1%821-2-3-4-n/"/>
      <url>/2018/03/13/%E6%B1%821-2-3-4-n/</url>
      <content type="html"><![CDATA[<p>今晚遇到一个好巧妙地题，题本身不是很难，但是感觉思想很棒。</p><blockquote><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p></blockquote><p>不能使用乘除循环的话，很容易可以想到用递归来解决，f(n) = f(n-1) + n,但是如果要求不使用判断语句递归结束的条件又难写。<br>想了好久，还是没做出来，最后网上找到了解决办法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int Sum_Solution(int n) &#123;</span><br><span class="line">    int res = n;</span><br><span class="line">    boolean temp = (n &gt; 0) &amp;&amp; (( res +=Sum_Solution(n-1))&gt;0);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感觉这题最巧妙的地方就是利用了短路运算符 &amp;&amp; 。<br>如果 &amp;&amp; 前的表达式成立的话就会去验证后面的表达式值，反之结束判断，返回false，利用这个特性来巧妙地结束递归。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>两个栈实现队列</title>
      <link href="/2018/02/27/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2018/02/27/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>2018年3月23更新<br>经学弟提醒入队的时候并不需要保证栈2为空，可以存在两个栈同时不空的情况。对于栈2的处理不变，栈1直接入栈即可。如果按照原答案的话，出队需要都移到栈2，入队需要都移到栈1，如果反复出队一个，入队一个就会浪费大量时间在移动数据上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void push(int node) &#123;</span><br><span class="line">    stack1.push(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下为原博文<br>假设使用栈1作为入栈缓冲区，栈2作为出栈缓冲区，那么入栈和出栈的时候所有的可能性有以下三种情况</p><table><thead><tr><th></th><th style="text-align:center"></th><th style="text-align:right"></th><th style="text-align:right"></th></tr></thead><tbody><tr><td>栈1</td><td style="text-align:center">空</td><td style="text-align:right">非空</td><td style="text-align:right">空</td></tr><tr><td>栈2</td><td style="text-align:center">空</td><td style="text-align:right">空</td><td style="text-align:right">非空</td></tr></tbody></table><p>因为每次都是要弹出某个栈顶或栈底的元素因此并不存在两个栈同时非空的情况。<br>栈1栈2同时为空的时候入队时直接压入栈1即可，栈1非空栈2空时同样直接压入栈1即可，栈1空栈2非空需要把栈2中的元素全部退回到栈1中然后压如栈1.<br>出队时同样的道理。<br>如果栈1栈2都为空，没有元素无法出栈，如果栈2非空，栈1空，直接弹出栈2顶端元素即可，如果栈1非空，栈2空需要把栈1的元素全部压入栈2，然后弹出栈2顶端元素即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;();</span><br><span class="line">Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">public void push(int node) &#123;</span><br><span class="line">    if(stack2.isEmpty())&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        while(!stack2.isEmpty())&#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int pop() &#123;</span><br><span class="line">    if(!stack2.isEmpty())&#123;</span><br><span class="line">        return stack2.pop();</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        while(!stack1.isEmpty())&#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        return stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>maven笔记</title>
      <link href="/2018/01/11/maven%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/11/maven%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>以前也没有系统的看过maven的资料，一般就是用它来添加依赖，但最近惨遭maven的折磨，经常性的编译通过，但运行的时候出现<code>ClassNotFoundException</code>或者<code>NoClassDefFoundError</code>之类的错误，终于痛下决心，想系统的了解一下Maven的用法。</p><h3 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h3><p>maven的安装很简单，去官网下载压缩包之后解压，然后配置环境变量<code>M2_HOME</code> 和把<code>%M2_HOME%/bin</code>添加到<code>path</code>即可。 <code>MAVEN_OPTS</code>是用来调整jvm内存和持久代的不是必须要配置的。</p><h3 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h3><p>配置好maven的环境变量之后就可以使用命令行来创建maven项目，但个人感觉这样的方式还是比较麻烦的，还是使用<code>ide</code>直接生成比较简单。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>建好的项目目录结构如下<br><img src="/img/8297579-eb60ad2523fb18c7.png" alt="image.png"></p><ul><li><code>main</code>目录存放项目的主要代码</li><li><code>java</code>目录存放java代码</li><li><code>resources</code>目录存放配置文件</li><li><code>webapp</code>目录存放Web应用相关的代码</li><li><code>pom.xml</code>是项目的配置文件<h3 id="POM结构"><a href="#POM结构" class="headerlink" title="POM结构"></a>POM结构</h3>刚建好的maven项目的的<code>pom.xml</code>文件是类似于这样的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;tk.xmfaly&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;xmfdemo&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;xmfdemo Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;xmfdemo&lt;/finalName&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li></ul><p>从上到下</p><ul><li><code>modelVersion</code>是<code>pom</code>的版本号，这个必须有，不需要修改</li><li><code>groupId</code>、<code>artifactId</code>、<code>version</code> 是maven项目的三坐标，可以在仓库中对应唯一的一个maven项目</li><li><code>packaging</code>是打包方式，默认不写是<code>jar</code>包方式</li><li><code>name</code>、<code>url</code>表示该项目的名称和url地址，可以省略</li><li><code>dependencies</code>是该项目的依赖关系，每一个<code>dependency</code>都代表着一个maven依赖</li><li><code>build</code>是与构建相关的配置，这里的<code>finalName</code>是用来配置构建之后的文件名字<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><img src="/img/8297579-5b443d5904207367.png" alt="image.png"><br>一个maven项目有9个生命周期，如果你使用ide应该可以很方便的看到这九个周期，并且可以快速的执行某个周期。<br>其实本质上每个周期都是一个或多个的<code>maven</code>插件在起作用，比如<code>compile</code>是由<code>maven-compile-plugin</code>这个插件在起作用。<br>每个周期的功能如下</li><li><code>clean</code> 清理自动生成的<code>target</code>目录</li><li><code>validate</code> 验证<code>pom.xml</code>文件是否有效</li><li><code>compile</code> 编译java代码</li><li><code>test</code> 运行测试代码</li><li><code>package</code> 项目打包</li><li><code>verify</code> 验证<code>package</code>打的包是否有效</li><li><code>site</code>生成项目的静态站点</li><li><code>deploy</code> 将打包的文件部署到远程仓库<h3 id="依赖的作用域"><a href="#依赖的作用域" class="headerlink" title="依赖的作用域"></a>依赖的作用域</h3>一直以来我一直被这个作用域所困惑，很多时候就是作用于搞混了，导致一系列的问题。其实maven依赖的作用域也不是那么复杂，只是一直没有仔细的去看，去思考罢了。</li></ul><table><thead><tr><th style="text-align:center">作用域</th><th style="text-align:center">编译时有效</th><th style="text-align:center">测试时有效</th><th style="text-align:center">运行时有效</th></tr></thead><tbody><tr><td style="text-align:center">compile</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center"></td><td style="text-align:center">&radic;</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">runtime</td><td style="text-align:center"></td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td></tr><tr><td style="text-align:center">provided</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">system</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td></tr></tbody></table><p>作用域最好应用于他应该出现的地方，不应该出现的地方最好不要放上，否则会导致项目过大。</p><h3 id="保存到本地仓库"><a href="#保存到本地仓库" class="headerlink" title="保存到本地仓库"></a>保存到本地仓库</h3><p>可以将jar包保存到本地仓库，方便其他项目调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;localRepository&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;file:C:\Users\xmfaly\.m2\repository&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure></p><p>运行<code>mvn deploy</code>即可部署</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java枚举笔记</title>
      <link href="/2018/01/07/java%E6%9E%9A%E4%B8%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/07/java%E6%9E%9A%E4%B8%BE%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><p>枚举使用关键字<code>enum</code>定义，枚举值一般使用大写字母，值之间用逗号隔开。例如定义一个颜色的枚举。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum  Color &#123;</span><br><span class="line">    YELLOW,RED,GREEN,BLACK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="枚举使用"><a href="#枚举使用" class="headerlink" title="枚举使用"></a>枚举使用</h3><p>枚举可以像常量一样直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Color color = Color.RED;</span><br></pre></td></tr></table></figure></p><h3 id="Enum的常用方法"><a href="#Enum的常用方法" class="headerlink" title="Enum的常用方法"></a>Enum的常用方法</h3><p>枚举是继承自抽象类Enum的，类Enum中有如下几个常用方法     </p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">返回类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ordinal()</td><td style="text-align:center">int</td><td style="text-align:center">返回枚举常量的序数,第一个为0，第二个为1，以此类推</td></tr><tr><td style="text-align:center">compareTo(E o)</td><td style="text-align:center">int</td><td style="text-align:center">返回该枚举的序数 - o的序数</td></tr><tr><td style="text-align:center">getDeclaringClass()</td><td style="text-align:center">Class&lt;?&gt;</td><td style="text-align:center">返回该枚举的Class类型</td></tr><tr><td style="text-align:center">name()</td><td style="text-align:center">String</td><td style="text-align:center">返回该枚举的名字</td></tr><tr><td style="text-align:center">static valueOf(Class<t> enumType, String name)</t></td><td style="text-align:center">static&lt;T extends Enum<t>&gt; T</t></td><td style="text-align:center">返回带指定名称的指定枚举类型的枚举常量</td></tr></tbody></table><h3 id="定制枚举"><a href="#定制枚举" class="headerlink" title="定制枚举"></a>定制枚举</h3><p>可以给枚举定制一些功能，比如可以给上述的颜色枚举增加一个颜色属性（当然也可以增加两个或多个）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public enum  Color &#123;</span><br><span class="line">    YELLOW(&quot;黄色&quot;),RED(&quot;红色&quot;),GREEN(&quot;绿色&quot;),BLACK(&quot;黑色&quot;);</span><br><span class="line">    private String desc;</span><br><span class="line">    Color(String desc)&#123;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种属性是类似于类的构造函数，其中构造函数Color()必须是private。</p><h3 id="和普通类的区别"><a href="#和普通类的区别" class="headerlink" title="和普通类的区别"></a>和普通类的区别</h3><p>大部分类的功能枚举都可以实现，比如定义属性和方法，实现接口，重写方法等。但枚举不能继承，因为编译器自动将我们定义的枚举类继承自Enum抽象类，而java是单继承，所以我们不能在使用自定义的枚举去继承。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Spring Cloud搭建服务注册中心（二）</title>
      <link href="/2017/12/23/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2017/12/23/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>接上篇</p><h3 id="服务提供"><a href="#服务提供" class="headerlink" title="服务提供"></a>服务提供</h3><p>现在我们搭建一个简单的服务，访问 /hello 并传入参数 返回 “hello  xxx” 字符串。<br>先建一个boot工程添加如下依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-producer</span><br><span class="line">server.port=8085</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br></pre></td></tr></table></figure></p><p><code>spring.application.name</code> 服务名<br><code>server.port</code> 该应用端口号<br><code>eureka.client.serviceUrl.defaultZone</code> 服务中心地址<br>在启动类前加上<code>@EnableDiscoveryClient</code>注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProducerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们实现服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello&quot;)</span><br><span class="line">    public Object hello(@RequestParam String name)&#123;</span><br><span class="line">        return &quot;hello &quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>先建一个Boot项目，依赖和服务提供者相同。<br>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-consumer</span><br><span class="line">server.port=8085</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka/</span><br></pre></td></tr></table></figure></p><p>在启动类前加上 <code>@EnableDiscoveryClient和@EnableFeignClients</code>注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用hello的接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name = &quot;spring-cloud-producer&quot;)</span><br><span class="line">public interface HelloRemote &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello&quot;)</span><br><span class="line">    String hello(@RequestParam(name = &quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    HelloRemote helloRemote;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello/&#123;name&#125;&quot;)</span><br><span class="line">    public Object hello(@PathVariable(name = &quot;name&quot;) String name)&#123;</span><br><span class="line">        return helloRemote.hello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决axios post传递参数为空</title>
      <link href="/2017/12/23/%E8%A7%A3%E5%86%B3axios-post%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E4%B8%BA%E7%A9%BA/"/>
      <url>/2017/12/23/%E8%A7%A3%E5%86%B3axios-post%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E4%B8%BA%E7%A9%BA/</url>
      <content type="html"><![CDATA[<p>以前都是用 vue resource，因为官方推荐使用axios，就尝试了一下。但发现使用post方法传递的数据后端接受不到，仔细阅读文档发现自己并没有用错。<br>最后网上找到了答案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import qs from &apos;qs&apos;;</span><br><span class="line">...</span><br><span class="line">axios.post(&apos;post.php&apos;, qs.stringify(&#123;</span><br><span class="line">    a: &apos;1&apos;</span><br><span class="line">&#125;))</span><br><span class="line">.then( ... )</span><br><span class="line">.catch( ... );</span><br></pre></td></tr></table></figure></p><p>原因是axios默认发送数据时，数据格式是Request Payload，而并非我们常用的Form Data格式，后端未必能正常获取到，所以在发送之前，需要使用qs模块对其进行处理。</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决nginx no input file specified</title>
      <link href="/2017/12/22/%E8%A7%A3%E5%86%B3nginx-no-input-file-specified/"/>
      <url>/2017/12/22/%E8%A7%A3%E5%86%B3nginx-no-input-file-specified/</url>
      <content type="html"><![CDATA[<p>一次在搬家<a href="https://www.metinfo.cn/" target="_blank" rel="noopener">metinfo</a>站点的时候遇到的问题，网上提出这个问题的人很多，但是解决办法都是没用的。最后终于在<a href="http://www.cnblogs.com/cosiray/p/5075655.html" target="_blank" rel="noopener">这篇文章</a>下找到解决办法。<br>把<code>fastcgi.conf</code>的<code>fastcgi_param DOCUMENT_ROOT $document_root;</code>注释掉。</p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java设置socket代理</title>
      <link href="/2017/12/22/java%E8%AE%BE%E7%BD%AEsocket%E4%BB%A3%E7%90%86/"/>
      <url>/2017/12/22/java%E8%AE%BE%E7%BD%AEsocket%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>因为一个服务的请求地址被限制死了在服务器上，本地开发非常不方便，本来打算用转发解决的，但是想到服务器上有之前搭建的ss服务，于是查了一下可以直接设置socket代理解决这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String proxyHost = &quot;127.0.0.1&quot;;</span><br><span class="line">String proxyPort = &quot;1080&quot;;</span><br><span class="line"></span><br><span class="line">System.setProperty(&quot;http.proxyHost&quot;, proxyHost);</span><br><span class="line">System.setProperty(&quot;http.proxyPort&quot;, proxyPort);</span><br><span class="line"></span><br><span class="line">System.setProperty(&quot;https.proxyHost&quot;, proxyHost);</span><br><span class="line">System.setProperty(&quot;https.proxyPort&quot;, proxyPort);</span><br></pre></td></tr></table></figure></p><p>其他代理设置方法 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot 读取配置文件中的List数据</title>
      <link href="/2017/12/22/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84List%E6%95%B0%E6%8D%AE/"/>
      <url>/2017/12/22/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84List%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>在一个项目中需要配置一个允许请求的服务器列表，不想把这个列表直接写在代码里，希望写到配置文件里，于是查了一下Spring Boot 如何读取配置文件中的List数据。记录在这里，以后可能还会用到。<br>配置如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">front:</span><br><span class="line">  servers:</span><br><span class="line">    - name: server1</span><br><span class="line">      url: http://server1.com</span><br><span class="line">    - name: server2</span><br><span class="line">      url: http://server2.com</span><br></pre></td></tr></table></figure></p><p>建立Dto<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Server &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String url;</span><br><span class="line">    // setter and getter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置相关读取类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;front&quot;)</span><br><span class="line">public class ServersConfig &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Server&gt; servers = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public List&lt;Server&gt; getServers() &#123;</span><br><span class="line">        return servers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setServers(List&lt;Server&gt; servers) &#123;</span><br><span class="line">        this.servers = servers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的servers 对应配置文件里的servers</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Spring Cloud搭建服务注册中心（一）</title>
      <link href="/2017/12/22/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2017/12/22/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring Cloud"></a>什么是Spring Cloud</h3><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h3 id="Spring-Cloud优势"><a href="#Spring-Cloud优势" class="headerlink" title="Spring Cloud优势"></a>Spring Cloud优势</h3><p>Spring Cloud对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用Spring Cloud一站式解决方案能在从容应对业务发展的同时大大减少开发成本。同时，随着近几年微服务架构和Docker容器概念的火爆，也会让Spring Cloud在未来越来越“云”化的软件开发风格中立有一席之地，尤其是在目前五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能会堪比当前Servlet规范的诞生，有效推进服务端软件系统技术水平的进步。<br>以上摘自百度，下面开始正题。</p><h3 id="服务中心"><a href="#服务中心" class="headerlink" title="服务中心"></a>服务中心</h3><p>什么是服务中心？<br>假如一个项目A去调用项目B，没有注册中心的情况下，可以直接调用，如下图<br><img src="/img/8297579-c31876329da35727.png" alt="image.png"><br>如果存在一个服务中心的话，就要A调用服务中心，服务中心调用B，如下图<br><img src="/img/8297579-2233fb488e43a611.png" alt="image.png"><br>这样看起来好像变得麻烦了，但是并不是。假如不是拥有两个项目，是有两百个项目，他们之间相互调用，那么就需要去管理每个项目的服务器所在的ip地址，和端口号。一个项目的宕机或重启，影响的可能是好多的项目。<br>假如使用服务种中心，让每一个项目都到服务中心来注册，那么我们如果想调用其中一个项目的服务，我们只要到服务中心来调用就行。我们并不需要关心这个服务到底是谁提供的。如果想重启某个服务，只需把他从服务中心移除，并不会对其他项目造成影响。<br>好处不仅仅是这些，因为我们把所有的服务都放到了服务中心，我们就可以直接对服务中心订制一些高级功能，比如做监控或负载均衡等。</p><h3 id="搭建服务中心Eureka-Server"><a href="#搭建服务中心Eureka-Server" class="headerlink" title="搭建服务中心Eureka Server"></a>搭建服务中心Eureka Server</h3><p>在Spring Boot项目的基础上，添加如下依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure></p><p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-eureka</span><br><span class="line">server.port=8080</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br></pre></td></tr></table></figure></p><p><code>eureka.client.serviceUrl.defaultZone</code>设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。</p><p>使用的话只需要在Boot的启动程序类加<code>@EnableEurekaServer</code>注解即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>装饰模式</title>
      <link href="/2017/12/15/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/12/15/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>装饰器模式适用于为一个对象额外动态的添加功能，每一个具体的装饰类都是一个功能。<br>类图如下<br><img src="/img/8297579-ce3bbbdebf96766e.png" alt="image.png"></p><p>1.ConcretConponent是需要被装饰的类，ConcretDecorator是装饰类，他们有一个共同的父类Component。<br>2.ConcretDecorator中有ConcretConponent类的引用。<br>3.ConcretDecorator中的operation()中执行ConcretConponent的operation()并添加新的功能。<br>举个例子，一个游戏人物可以学习技能，这个游戏任务就是ConcretConponent，技能就是ConcretDecorator。</p><p>首先定义这个游戏的角色 Role<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Role &#123;</span><br><span class="line">    void learnSkill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义需要具体被装饰的角色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Warlock implements Role &#123;</span><br><span class="line">    public void learnSkill() &#123;</span><br><span class="line">        System.out.println(&quot;术士学习了以下几个技能&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义ConcretDecorator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Skill implements Role &#123;</span><br><span class="line"></span><br><span class="line">    private Role role;</span><br><span class="line"></span><br><span class="line">    public void learnSkill() &#123;</span><br><span class="line">        if (role != null) &#123;</span><br><span class="line">            role.learnSkill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Skill(Role role) &#123;</span><br><span class="line">        this.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义三个具体的技能A B C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Skill_A extends Skill &#123;</span><br><span class="line"></span><br><span class="line">    public Skill_A(Role role) &#123;</span><br><span class="line">        super(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void learnSkill()&#123;</span><br><span class="line">        super.learnSkill();</span><br><span class="line">        System.out.println(&quot;学习了技能 A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Skill_B extends Skill&#123;</span><br><span class="line"></span><br><span class="line">    public Skill_B(Role role) &#123;</span><br><span class="line">        super(role);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void learnSkill()&#123;</span><br><span class="line">        super.learnSkill();</span><br><span class="line">        System.out.println(&quot;学习了技能 B&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Skill_C extends Skill&#123;</span><br><span class="line">    public Skill_C(Role role) &#123;</span><br><span class="line">        super(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void learnSkill() &#123;</span><br><span class="line">        super.learnSkill();</span><br><span class="line">        System.out.println(&quot;学习了技能 C&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Role r = new Warlock();</span><br><span class="line">Skill a = new Skill_A(r);</span><br><span class="line">Skill b = new Skill_B(a);</span><br><span class="line">b.learnSkill();</span><br></pre></td></tr></table></figure></p><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">术士学习了以下几个技能</span><br><span class="line">学习了技能 A</span><br><span class="line">学习了技能 B</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>警察小偷问题</title>
      <link href="/2017/12/06/%E8%AD%A6%E5%AF%9F%E5%B0%8F%E5%81%B7%E9%97%AE%E9%A2%98/"/>
      <url>/2017/12/06/%E8%AD%A6%E5%AF%9F%E5%B0%8F%E5%81%B7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>警察和小偷需要跑完200米距离，但两个人之间用一个3米的手铐铐住，请实现一个模型，用来描述警察和小偷跑步的情况。<br>（1）使用线程表现无序性。<br>（2）使用ncurse表现裕兴界面。<br>这是一个基本的生产者消费者模型。等待的条件是两人之间的距离不要超过3米。换句话说小偷在跑之前要判断是否小偷比警察的距离多3，如果是那小偷就不能再跑，就要等待警察进程跑。警察进程同样的道理。</p><p>完整代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;curses.h&gt;</span><br><span class="line">#include &quot;pthread.h&quot;</span><br><span class="line"></span><br><span class="line">//警察和小偷之间的距离</span><br><span class="line">#define DISTANCE 3</span><br><span class="line">//警察纵坐标</span><br><span class="line">#define PY 10</span><br><span class="line"></span><br><span class="line">//小偷纵坐标</span><br><span class="line">#define TY 12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct prodcons</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_t lock;</span><br><span class="line">int polPos,thiefPos;</span><br><span class="line">pthread_cond_t notempty;</span><br><span class="line">pthread_cond_t notfull;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct prodcons buffer;</span><br><span class="line"></span><br><span class="line">void init(struct prodcons *b)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_init(&amp;b-&gt;lock,NULL);</span><br><span class="line">pthread_cond_init(&amp;b-&gt;notempty,NULL);</span><br><span class="line">pthread_cond_init(&amp;b-&gt;notfull,NULL);</span><br><span class="line">b-&gt;polPos=0;</span><br><span class="line">b-&gt;thiefPos=0;</span><br><span class="line"></span><br><span class="line">//init ncurses</span><br><span class="line">initscr();</span><br><span class="line">crmode();</span><br><span class="line">noecho();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void prun(struct prodcons *b)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;b-&gt;lock);</span><br><span class="line">while(b-&gt;polPos - b-&gt;thiefPos &gt;= DISTANCE)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;wait for t run\n&quot;);</span><br><span class="line">pthread_cond_wait(&amp;b-&gt;notfull,&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line">b-&gt;polPos++;</span><br><span class="line"></span><br><span class="line">clear();</span><br><span class="line">mvaddch(PY,b-&gt;polPos,&apos;P&apos;);</span><br><span class="line">mvaddch(TY,b-&gt;thiefPos,&apos;T&apos;);</span><br><span class="line">sleep(1);</span><br><span class="line">refresh();</span><br><span class="line"></span><br><span class="line">if(b-&gt;polPos == 200)&#123;</span><br><span class="line">printf(&quot;p run over\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">pthread_cond_signal(&amp;b-&gt;notempty);</span><br><span class="line">pthread_mutex_unlock(&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void trun(struct prodcons *b)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;b-&gt;lock);</span><br><span class="line">while( b-&gt;thiefPos -  b-&gt;polPos &gt;= DISTANCE)</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;wait for p run\n&quot;);</span><br><span class="line">  pthread_cond_wait(&amp;b-&gt;notempty,&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line">b-&gt;thiefPos++;</span><br><span class="line"></span><br><span class="line">clear();</span><br><span class="line">mvaddch(TY,b-&gt;thiefPos,&apos;T&apos;);</span><br><span class="line">mvaddch(PY,b-&gt;polPos,&apos;P&apos;);</span><br><span class="line"></span><br><span class="line">clrtoeol();</span><br><span class="line">sleep(1);</span><br><span class="line">refresh();</span><br><span class="line"></span><br><span class="line">//printf(&quot;t poistion is %d\n&quot;, b-&gt;thiefPos);</span><br><span class="line">if(b-&gt;thiefPos == 200)&#123;</span><br><span class="line">printf(&quot;p run over\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">pthread_cond_signal(&amp;b-&gt;notfull);</span><br><span class="line">pthread_mutex_unlock(&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void * p()</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">prun(&amp;buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void * t()</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">trun(&amp;buffer);</span><br><span class="line">&#125;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">pthread_t th_a,th_b;</span><br><span class="line">void *retval;</span><br><span class="line">init(&amp;buffer);</span><br><span class="line">pthread_create(&amp;th_a,NULL,p,NULL);</span><br><span class="line">pthread_create(&amp;th_b,NULL,t,NULL);</span><br><span class="line">pthread_join(th_a,&amp;retval);</span><br><span class="line">pthread_join(th_b,&amp;retval);</span><br><span class="line">endwin();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>自己实现一个简单的ioc容器</title>
      <link href="/2017/11/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ioc%E5%AE%B9%E5%99%A8/"/>
      <url>/2017/11/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ioc%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>某节实验课的任务是练习使用spring的ioc，因为之前用过，感觉也没啥意思，就想了以下他的实现原理，然后自己使用java反射机制实现了一个简单的ioc容器。以下对原理进行简单的说明，完整的代码及用法详见<a href="https://github.com/xmfaly/simpleioc" target="_blank" rel="noopener">xmfaly/simpleioc</a></p><p>首先定义@Autowired注解用于自动注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Autowired &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; value() default Class.class;</span><br><span class="line"></span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>建立一个<code>Container</code>容器类<br>建立两个<code>map</code>分别保存类名和bean、对象名和类名的关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 保存所有bean 格式为 类名 : bean</span><br><span class="line">private Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">// 存储对象和类名的关系 对象名 ：bean</span><br><span class="line">private Map&lt;String, Object&gt; beanKeys;</span><br></pre></td></tr></table></figure></p><p>这里为了安全起见，使用<code>ConcurrentHashMap()</code>实例化这两个<code>map</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Container()&#123;</span><br><span class="line">    beans = new ConcurrentHashMap&lt;String, Object&gt;();</span><br><span class="line">    beanKeys = new ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>向容器内注册bean，这里我重载了三种形式，当然也可以更多，关键看使用的场景了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 以class的形式注册</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(Class&lt;?&gt; cls) &#123;</span><br><span class="line">      String className = cls.getName();</span><br><span class="line">      Object bean = null;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">          bean = cls.newInstance();</span><br><span class="line">      &#125; catch (InstantiationException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      beans.put(className, bean);</span><br><span class="line"></span><br><span class="line">      //不指定对象名的情况下类名和对象名相同</span><br><span class="line">      beanKeys.put(className, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 以bean的形式注册</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(Object bean) &#123;</span><br><span class="line">      String className = bean.getClass().getName();</span><br><span class="line">      beans.put(className, bean);</span><br><span class="line">      beanKeys.put(className, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 以带对象名的class形式注册</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(String name, Class&lt;?&gt; cls) &#123;</span><br><span class="line">      String className = cls.getName();</span><br><span class="line">      Object bean = null;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">          bean = cls.newInstance();</span><br><span class="line">      &#125; catch (InstantiationException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      beans.put(className, bean);</span><br><span class="line">      beanKeys.put(name, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 注册一个带名称的Bean到容器中</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(String name, Object bean) &#123;</span><br><span class="line">      String className = bean.getClass().getName();</span><br><span class="line">      beans.put(className, bean);</span><br><span class="line">      beanKeys.put(name, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>从容器中取出bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 通过 Class 对象获取bean</span><br><span class="line">  */</span><br><span class="line"> public &lt;T&gt; T getBean(Class&lt;?&gt; cls) &#123;</span><br><span class="line">     String className = cls.getName();</span><br><span class="line">     Object object = beans.get(className);</span><br><span class="line">     if (null != object) &#123;</span><br><span class="line">         return (T) object;</span><br><span class="line">     &#125;</span><br><span class="line">     return null;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * 通过对象名获取 bean</span><br><span class="line">  */</span><br><span class="line"> public &lt;T&gt; T getBeanByName(String name) &#123;</span><br><span class="line">     Object object = beanKeys.get(name);;</span><br><span class="line">     if (null != object) &#123;</span><br><span class="line">         return (T) object;</span><br><span class="line">     &#125;</span><br><span class="line">     return null;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>在容器启动的时候遍历容器内的所有bean对bean进行注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 初始化</span><br><span class="line">   */</span><br><span class="line">  public void init() &#123;</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = beans.entrySet().iterator();</span><br><span class="line">      while (it.hasNext()) &#123;</span><br><span class="line">          Map.Entry&lt;String, Object&gt; entry = it.next();</span><br><span class="line">          Object object = entry.getValue();</span><br><span class="line">          injection(object);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>其中使用到的方法的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * 注入</span><br><span class="line"> */</span><br><span class="line">public void injection(Object object) &#123;</span><br><span class="line">    Field[] fields = object.getClass().getDeclaredFields();</span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line">        //遍历所有属性寻找@Autowired注解</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            Autowired autowired = field.getAnnotation(Autowired.class);</span><br><span class="line">            if (null != autowired) &#123;</span><br><span class="line"></span><br><span class="line">                // 要注入的字段</span><br><span class="line">                Object autoWritedField = null;</span><br><span class="line">                String name = autowired.name();</span><br><span class="line"></span><br><span class="line">                if (!name.equals(&quot;&quot;)) &#123;</span><br><span class="line">                    Object bean = beanKeys.get(name);</span><br><span class="line">                    if (null != bean ) &#123;</span><br><span class="line">                        autoWritedField = bean;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    if (null == autoWritedField) &#123;</span><br><span class="line">                        throw new RuntimeException(&quot;Unable to autoWrited &quot; + name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (autowired.value() == Class.class) &#123;</span><br><span class="line">                        //该属性的Type</span><br><span class="line">                        autoWritedField = recursiveAssembly(field.getType());</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 指定装配的类</span><br><span class="line">                        autoWritedField = this.getBean(autowired.value());</span><br><span class="line">                        if (null == autoWritedField) &#123;</span><br><span class="line">                            autoWritedField = recursiveAssembly(autowired.value());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (null == autoWritedField) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Unable to autoWrited &quot; + field.getType().getCanonicalName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                boolean accessible = field.isAccessible();</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                field.set(object, autoWritedField);</span><br><span class="line">                field.setAccessible(accessible);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (SecurityException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 修复没有指定注解及默认注入的情况</span><br><span class="line"> */</span><br><span class="line">private Object recursiveAssembly(Class&lt;?&gt; cls) &#123;</span><br><span class="line">    if (null != cls) &#123;</span><br><span class="line">        return this.registerBean(cls);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写个测试测试3中注入类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class TestIoc &#123;</span><br><span class="line"></span><br><span class="line">    class A&#123;</span><br><span class="line"></span><br><span class="line">        @Autowired(name = &quot;myvalue&quot;)</span><br><span class="line">        private Integer value;</span><br><span class="line"></span><br><span class="line">        @Autowired(name = &quot;str&quot;)</span><br><span class="line">        private String myStr;</span><br><span class="line"></span><br><span class="line">        @Autowired(value = String.class)</span><br><span class="line">        private String myStr2;</span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line">        public String myStr3;</span><br><span class="line"></span><br><span class="line">        public void show()&#123;</span><br><span class="line">            System.out.println(&quot;value: &quot; + value);</span><br><span class="line">            System.out.println(&quot;str: &quot; + myStr);</span><br><span class="line">            System.out.println(myStr2 == null);</span><br><span class="line">            System.out.println(myStr3 == null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        Container c = new Container();</span><br><span class="line">        c.registerBean(&quot;a&quot;,new A());</span><br><span class="line">        c.registerBean(&quot;str&quot;,&quot;注入成功&quot;);</span><br><span class="line">        c.registerBean(&quot;myvalue&quot;,2333);</span><br><span class="line">        c.initWired();</span><br><span class="line">        A a = c.getBeanByName(&quot;a&quot;);</span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value: 2333</span><br><span class="line">str: 注入成功</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java反射机制</title>
      <link href="/2017/11/26/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/11/26/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。<br>通过Java的反射机制可以获取以下内容：</p><h4 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h4><p>可以直接通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如获取String的class对象</span><br></pre></td></tr></table></figure></p><p>Class cls = String.class;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也可以通过类名进行获取</span><br></pre></td></tr></table></figure></p><p>Class cls = Class.forName(“java.lang.String”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 类名</span><br><span class="line">可以通过class对象的```getName()```方法获取类名，```getSimpleName()```获取不带包名的类名</span><br></pre></td></tr></table></figure></p><p>//带包类名<br>String name = cls.getName();</p><p>//不带包名的类名<br>String simpleName = cls.getSimpleName();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 方法</span><br></pre></td></tr></table></figure></p><p>Method[] methods = cls.getMethods();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```getMethods()```可以获取到该类中所有的public方法</span><br><span class="line">也可以获取到单个方法</span><br></pre></td></tr></table></figure></p><p>Method method = cls.getMethod(“method”,new Class[]{String.class});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个参数是方法的名字，第二个参数是方法的参数，这里是以只有一个string类型的参数为例。如果没有参数传入```null```即可</span><br><span class="line">如果已经知道方法，也可以获取到方法的参数</span><br></pre></td></tr></table></figure></p><p>Class[] parameterTypes = method.getParameterTypes();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当然也可以返回方法的返回类型</span><br></pre></td></tr></table></figure></p><p>Class returnType = method.getReturnType();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以通过```invoke()```方法来调用方法需要传2个参数，第一个参数是调用方法的对象，如果是静态方法可以传入```null```第二个参数是方法需要的参数列表</span><br></pre></td></tr></table></figure></p><p>Object returnValue = method.invoke(null, “parameter”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 构造方法</span><br><span class="line">构造方法和普通方法类似</span><br></pre></td></tr></table></figure></p><p>Constructor[] constructors = cls.getConstructors();<br>Constructor constructor = cls.getConstructor(new Class[]{String.class});<br>Class[] parameterTypes = constructor.getParameterTypes();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用```constructor```的```newInstance()```方法实例一个对象</span><br></pre></td></tr></table></figure></p><p>String str = (String) constructor.newInstance(“test”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 属性</span><br></pre></td></tr></table></figure></p><p>Field[] fields = cls.getFields();<br>Field field = cls.getField(“name”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以通过```getFields()```方法获取所有的```public```属性，```getField()```获取指定的方法，当然也只能获取```public```的属性。</span><br><span class="line">在反射中也可以获取```private```的属性和方法以下分别进行演示</span><br><span class="line">#### 包</span><br></pre></td></tr></table></figure></p><p>Package pack = cls.getPackage();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 父类</span><br><span class="line">java是单继承最多一个父类</span><br></pre></td></tr></table></figure></p><p>Class supercls = cls.getSuperclass();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 实现的接口</span><br><span class="line">一个类可以实现多个接口</span><br></pre></td></tr></table></figure></p><p>Class[] interfaces = cls.getInterfaces();<br><code>`</code><br>这里只会返回该类实现的接口，而不会返回父类实现的接口</p><p>文章参考<br><a href="https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990?fr=aladdin</a><br><a href="http://www.jianshu.com/p/2315dda64ad2" target="_blank" rel="noopener">http://www.jianshu.com/p/2315dda64ad2</a></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx反向代理尝试</title>
      <link href="/2017/11/10/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B0%9D%E8%AF%95/"/>
      <url>/2017/11/10/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B0%9D%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>和我一起做一个项目的前端小伙伴需要一个https的接口，后端是java做的，因为某些原因不能直接在java项目上配置https，最后想到用反向代理来解决这个问题。<br>用户访问代理的服务器，然后由代理服务器转发给后台，并转发结构给用户。我在代理服务器上配置https就解决了接口https的需求。<br>Nginx配置反向代理很简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /api&#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080/api ;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只需要这样就可以把访问服务器的 <code>/api</code>请求全部转发到 <code>http://127.0.0.1:8080/api</code></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring boot 配置 https|ssl</title>
      <link href="/2017/11/08/spring-boot-%E9%85%8D%E7%BD%AE-https-ssl/"/>
      <url>/2017/11/08/spring-boot-%E9%85%8D%E7%BD%AE-https-ssl/</url>
      <content type="html"><![CDATA[<p>ssl证书我选择了免费的<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a></p><h3 id="1-下载脚本并生成证书"><a href="#1-下载脚本并生成证书" class="headerlink" title="1.下载脚本并生成证书"></a>1.下载脚本并生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># git clone https://github.com/letsencrypt/letsencrypt</span><br><span class="line"># cd letsencrypt</span><br><span class="line"># ./letsencrypt-auto certonly --standalone --email 邮箱 -d 域名</span><br></pre></td></tr></table></figure><p>因为网络问题pip可能需要换源，请自行网上查找换源方法。</p><h3 id="2-设置自动延期"><a href="#2-设置自动延期" class="headerlink" title="2.设置自动延期"></a>2.设置自动延期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./letsencrypt-auto --renew certonly --email 邮箱 -d 域名</span><br></pre></td></tr></table></figure><h3 id="3-查看证书"><a href="#3-查看证书" class="headerlink" title="3.查看证书"></a>3.查看证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/letsencrypt/live/</span><br><span class="line"># cd 域名</span><br><span class="line">fullchain.pem 为证书  privatkey.pem 为密钥</span><br></pre></td></tr></table></figure><h3 id="4-生成-jks证书"><a href="#4-生成-jks证书" class="headerlink" title="4.生成.jks证书"></a>4.生成.jks证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name tomcat</span><br><span class="line"># keytool -importkeystore -deststorepass &apos;yourJKSpass&apos; -destkeypass &apos;yourKeyPass&apos; -destkeystore MyDSKeyStore.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass &apos;yourPKCS12pass&apos; -alias tomcat</span><br></pre></td></tr></table></figure><p>第一步会让你输入密码，对应第二步中的yourPKCS12pass 。第二步中的前两个密码自己设置一下并记好，下面的会用到。</p><h3 id="5-配置spring-boot"><a href="#5-配置spring-boot" class="headerlink" title="5.配置spring-boot"></a>5.配置spring-boot</h3><p>将.jsk文件放到<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">server.port = 8443</span><br><span class="line">server.ssl.key-store = classpath:MyDSKeyStore.jks</span><br><span class="line">server.ssl.key-store-password = yourJKSpass</span><br><span class="line">server.ssl.key-password = yourKeyPass</span><br></pre></td></tr></table></figure></p><p>此时服务器支持https，但只支持https<br>可以配置同时支持htttp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Integer port() &#123;</span><br><span class="line">    return 8080;</span><br><span class="line">    //return SocketUtils.findAvailableTcpPort();</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public EmbeddedServletContainerFactory servletContainer() &#123;</span><br><span class="line">    TomcatEmbeddedServletContainerFactory tomcat = new   TomcatEmbeddedServletContainerFactory();</span><br><span class="line">    tomcat.addAdditionalTomcatConnectors(createStandardConnector());</span><br><span class="line">    return tomcat;</span><br><span class="line">&#125;</span><br><span class="line">private Connector createStandardConnector() &#123;</span><br><span class="line">    Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class="line">    connector.setPort(port());</span><br><span class="line">    return connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样 8080端口是http 8443端口是https<br>也可以设置http自动重定向到https<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">   private int port;</span><br><span class="line">@Bean</span><br><span class="line">   public EmbeddedServletContainerFactory servletContainer() &#123;</span><br><span class="line">       TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           protected void postProcessContext(Context context) &#123;</span><br><span class="line">               SecurityConstraint securityConstraint = new SecurityConstraint();</span><br><span class="line">               securityConstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</span><br><span class="line">               SecurityCollection collection = new SecurityCollection();</span><br><span class="line">               collection.addPattern(&quot;/*&quot;);</span><br><span class="line">               securityConstraint.addCollection(collection);</span><br><span class="line">               context.addConstraint(securityConstraint);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       tomcat.addAdditionalTomcatConnectors(initiateHttpConnector());</span><br><span class="line">       return tomcat;</span><br><span class="line">   &#125;</span><br><span class="line">   private Connector initiateHttpConnector() &#123;</span><br><span class="line">       Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class="line">       connector.setScheme(&quot;http&quot;);</span><br><span class="line">       connector.setPort(8080);</span><br><span class="line">       connector.setSecure(false);</span><br><span class="line">       connector.setRedirectPort(port);</span><br><span class="line">       return connector;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java工具类整理</title>
      <link href="/2017/10/20/Java%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%95%B4%E7%90%86/"/>
      <url>/2017/10/20/Java%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>以下整理常用的java工具类。</p><h3 id="二维码生成和解析-网上很多接口也很方便"><a href="#二维码生成和解析-网上很多接口也很方便" class="headerlink" title="二维码生成和解析(网上很多接口也很方便)"></a>二维码生成和解析(网上很多接口也很方便)</h3><p>使用google的zxing<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">import com.google.zxing.*;</span><br><span class="line">import com.google.zxing.Reader;</span><br><span class="line">import com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line">import com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line">import com.google.zxing.common.HybridBinarizer;</span><br><span class="line">import com.google.zxing.multi.GenericMultipleBarcodeReader;</span><br><span class="line">import com.google.zxing.multi.MultipleBarcodeReader;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.nio.file.FileSystems;</span><br><span class="line">import java.nio.file.Path;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 二维码生成工具类</span><br><span class="line"> *</span><br><span class="line"> * @author KisChang</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2015年12月03日</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class ZXingUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static enum ImageType &#123;</span><br><span class="line">        JPEG(&quot;jpeg&quot;),PNG(&quot;png&quot;),GIF(&quot;gif&quot;);</span><br><span class="line">        private String value;</span><br><span class="line"></span><br><span class="line">        ImageType(String value) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**编码*/</span><br><span class="line">    public static class Encode &#123;</span><br><span class="line"></span><br><span class="line">        private static Map&lt;EncodeHintType, Object&gt; HINTS;</span><br><span class="line">        static &#123;</span><br><span class="line">            HINTS = new EnumMap&lt;EncodeHintType,Object&gt;(EncodeHintType.class);</span><br><span class="line">            HINTS.put(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * 生成二维码</span><br><span class="line">         * @param widthAndHeight    高宽</span><br><span class="line">         * @param content           二维码内容</span><br><span class="line">         * @param os                输出流</span><br><span class="line">         */</span><br><span class="line">        public static void buildQRCode(int widthAndHeight, String content, OutputStream os, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight, HINTS);// 生成矩阵</span><br><span class="line">            MatrixToImageWriter.writeToStream(bitMatrix, imageType.getValue(), os);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void buildQRCode(String content, OutputStream os, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            buildQRCode(200, content, os, imageType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 生成二维码</span><br><span class="line">         * @param widthAndHeight    高宽</span><br><span class="line">         * @param content           二维码内容</span><br><span class="line">         * @param filePath          输出目录</span><br><span class="line">         * @param fileName          输出文件名</span><br><span class="line">         * @param imageType         输出文件类型</span><br><span class="line">         */</span><br><span class="line">        public static void buildQRCode(int widthAndHeight, String content, String filePath, String fileName, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(content,</span><br><span class="line">                    BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight, HINTS);</span><br><span class="line">            Path path = FileSystems.getDefault().getPath(filePath, fileName);</span><br><span class="line">            MatrixToImageWriter.writeToPath(bitMatrix, imageType.getValue(), path);// 输出图像</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void buildQRCode(String content, String filePath, String fileName, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            buildQRCode(200, content,filePath,fileName,imageType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**解码*/</span><br><span class="line">    public static class Decode &#123;</span><br><span class="line"></span><br><span class="line">        private static final Map&lt;DecodeHintType,Object&gt; HINTS;</span><br><span class="line">        private static final Map&lt;DecodeHintType,Object&gt; HINTS_PURE;</span><br><span class="line">        static &#123;</span><br><span class="line">            HINTS = new EnumMap&lt;DecodeHintType,Object&gt;(DecodeHintType.class);</span><br><span class="line">            HINTS.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);</span><br><span class="line">            HINTS.put(DecodeHintType.POSSIBLE_FORMATS, EnumSet.allOf(BarcodeFormat.class));</span><br><span class="line">            HINTS_PURE = new EnumMap&lt;DecodeHintType,Object&gt;(HINTS);</span><br><span class="line">            HINTS_PURE.put(DecodeHintType.PURE_BARCODE, Boolean.TRUE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 解析二维码</span><br><span class="line">         */</span><br><span class="line">        public static Collection&lt;Result&gt; readQRCode(File qrCode) throws ReaderException, IOException &#123;</span><br><span class="line">            FileInputStream inputStream = new FileInputStream(qrCode);</span><br><span class="line">            return readQRCode(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static Collection&lt;Result&gt; readQRCode(InputStream inputStream) throws ReaderException, IOException &#123;</span><br><span class="line">            LuminanceSource source = new BufferedImageLuminanceSource(ImageIO.read(inputStream));</span><br><span class="line">            BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(source));</span><br><span class="line"></span><br><span class="line">            Collection&lt;Result&gt; results = new ArrayList&lt;Result&gt;(1);</span><br><span class="line">            ReaderException savedException = null;</span><br><span class="line">            Reader reader = new MultiFormatReader();</span><br><span class="line">            try &#123;</span><br><span class="line">                //寻找多个条码</span><br><span class="line">                MultipleBarcodeReader multiReader = new GenericMultipleBarcodeReader(reader);</span><br><span class="line">                Result[] theResults = multiReader.decodeMultiple(binaryBitmap, HINTS);</span><br><span class="line">                if (theResults != null) &#123;</span><br><span class="line">                    results.addAll(Arrays.asList(theResults));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (ReaderException re) &#123;</span><br><span class="line">                savedException = re;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (results.isEmpty()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //寻找纯条码</span><br><span class="line">                    Result theResult = reader.decode(binaryBitmap, HINTS_PURE);</span><br><span class="line">                    if (theResult != null) &#123;</span><br><span class="line">                        results.add(theResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ReaderException re) &#123;</span><br><span class="line">                    savedException = re;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (results.isEmpty()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //寻找图片中的正常条码</span><br><span class="line">                    Result theResult = reader.decode(binaryBitmap, HINTS);</span><br><span class="line">                    if (theResult != null) &#123;</span><br><span class="line">                        results.add(theResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ReaderException re) &#123;</span><br><span class="line">                    savedException = re;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (results.isEmpty()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //再次尝试其他特殊处理</span><br><span class="line">                    BinaryBitmap hybridBitmap = new BinaryBitmap(new HybridBinarizer(source));</span><br><span class="line">                    Result theResult = reader.decode(hybridBitmap, HINTS);</span><br><span class="line">                    if (theResult != null) &#123;</span><br><span class="line">                        results.add(theResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ReaderException re) &#123;</span><br><span class="line">                    savedException = re;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (results.isEmpty())&#123;</span><br><span class="line">                throw savedException;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return results;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public static Result readQRCodeResult(File qrCode) throws ReaderException, IOException &#123;</span><br><span class="line">            FileInputStream inputStream = new FileInputStream(qrCode);</span><br><span class="line">            return readQRCodeResult(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line">        public static Result readQRCodeResult(InputStream inputStream) throws ReaderException, IOException &#123;</span><br><span class="line">            Collection&lt;Result&gt; results = readQRCode(inputStream);</span><br><span class="line">            if (!results.isEmpty())&#123;</span><br><span class="line">                //寻找结果集中非空的结果</span><br><span class="line">                for (Result result : results)&#123;</span><br><span class="line">                    if (result != null)&#123;</span><br><span class="line">                        return result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            throw NotFoundException.getNotFoundInstance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.security.MessageDigest;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line">public class MD5 &#123;</span><br><span class="line"></span><br><span class="line">    public static String getMD5(String str) throws NoSuchAlgorithmException &#123;</span><br><span class="line"></span><br><span class="line">        // 生成一个MD5加密计算摘要</span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">        // 计算md5函数</span><br><span class="line">        md.update(str.getBytes());</span><br><span class="line">        // digest()最后确定返回md5 hash值，返回值为8为字符串。因为md5 hash值是16位的hex值，实际上就是8位的字符</span><br><span class="line">        // BigInteger函数则将8位的字符串转换成16位hex值，用字符串来表示；得到字符串形式的hash值</span><br><span class="line">        return new BigInteger(1, md.digest()).toString(16);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取excel"><a href="#读取excel" class="headerlink" title="读取excel"></a>读取excel</h3><p>依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.17-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.16-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line">import org.apache.poi.ss.usermodel.*;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.text.DecimalFormat;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class ReadExcelUtils &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line">    private Workbook wb;</span><br><span class="line">    private Sheet sheet;</span><br><span class="line">    private Row row;</span><br><span class="line">    public ReadExcelUtils(String filepath) &#123;</span><br><span class="line">        if(filepath==null)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String ext = filepath.substring(filepath.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        try &#123;</span><br><span class="line">            InputStream is = new FileInputStream(filepath);</span><br><span class="line">            if(&quot;.xls&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new HSSFWorkbook(is);</span><br><span class="line">            &#125;else if(&quot;.xlsx&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new XSSFWorkbook(is);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                wb=null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            logger.error(&quot;FileNotFoundException&quot;, e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;IOException&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel表格表头的内容</span><br><span class="line">     * @return String 表头内容的数组</span><br><span class="line">     */</span><br><span class="line">    public String[] readExcelTitle() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        // 标题总列数</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line">        String[] title = new String[colNum];</span><br><span class="line">        for (int i = 0; i &lt; colNum; i++) &#123;</span><br><span class="line">            // title[i] = getStringCellValue(row.getCell((short) i));</span><br><span class="line">            title[i] = row.getCell(i).getStringCellValue();</span><br><span class="line">        &#125;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel数据内容</span><br><span class="line">     * @return Map 包含单元格数据内容的Map对象</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; readExcelContent() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; content = new HashMap&lt;Integer, Map&lt;Integer,Object&gt;&gt;();</span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        // 得到总行数</span><br><span class="line">        int rowNum = sheet.getLastRowNum();</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line">        // 正文内容应该从第二行开始,第一行为表头的标题</span><br><span class="line">        for (int i = 1; i &lt;= rowNum; i++) &#123;</span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            int j = 0;</span><br><span class="line">            Map&lt;Integer,Object&gt; cellValue = new HashMap&lt;Integer, Object&gt;();</span><br><span class="line">            while (j &lt; colNum) &#123;</span><br><span class="line">                Object obj = getCellFormatValue(row.getCell(j));</span><br><span class="line">                cellValue.put(j, obj);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            content.put(i, cellValue);</span><br><span class="line">        &#125;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 根据Cell类型设置数据</span><br><span class="line">     * @param cell</span><br><span class="line">     * @return Object</span><br><span class="line">     */</span><br><span class="line">    private Object getCellFormatValue(Cell cell) &#123;</span><br><span class="line">        Object cellvalue = &quot;&quot;;</span><br><span class="line">        if (cell != null) &#123;</span><br><span class="line">            // 判断当前Cell的Type</span><br><span class="line">            switch (cell.getCellType()) &#123;</span><br><span class="line">                case Cell.CELL_TYPE_NUMERIC:// 如果当前Cell的Type为NUMERIC</span><br><span class="line">                case Cell.CELL_TYPE_FORMULA: &#123;</span><br><span class="line">                    // 判断当前的cell是否为Date</span><br><span class="line">                    if (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                        Date date = cell.getDateCellValue();</span><br><span class="line">                        SimpleDateFormat dateformat=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">                        cellvalue = dateformat.format(date);</span><br><span class="line"></span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 如果是纯数字</span><br><span class="line">                        // 取得当前Cell的数值</span><br><span class="line">                        DecimalFormat df = new DecimalFormat(&quot;0&quot;);</span><br><span class="line">                        cellvalue = df.format(cell.getNumericCellValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                case Cell.CELL_TYPE_STRING:// 如果当前Cell的Type为STRING</span><br><span class="line">                    // 取得当前的Cell字符串</span><br><span class="line">                    cellvalue = cell.getRichStringCellValue().getString();</span><br><span class="line">                    break;</span><br><span class="line">                default:// 默认的Cell值</span><br><span class="line">                    cellvalue = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cellvalue = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return cellvalue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="加密工具类"><a href="#加密工具类" class="headerlink" title="加密工具类"></a>加密工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">import java.security.Key;</span><br><span class="line">import java.security.spec.AlgorithmParameterSpec;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.SecretKeyFactory;</span><br><span class="line">import javax.crypto.spec.DESKeySpec;</span><br><span class="line">import javax.crypto.spec.IvParameterSpec;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 加密解密工具包</span><br><span class="line"> */</span><br><span class="line">public class CyptoUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static final String ALGORITHM_DES = &quot;DES/CBC/PKCS5Padding&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * DES算法，加密</span><br><span class="line">     *</span><br><span class="line">     * @param data 待加密字符串</span><br><span class="line">     * @param key  加密私钥，长度不能够小于8位</span><br><span class="line">     * @return 加密后的字节数组，一般结合Base64编码使用</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String encode(String key,String data) &#123;</span><br><span class="line">        if(data == null)</span><br><span class="line">            return null;</span><br><span class="line">        try&#123;</span><br><span class="line">            DESKeySpec dks = new DESKeySpec(key.getBytes());</span><br><span class="line">            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DES&quot;);</span><br><span class="line">            //key的长度不能够小于8位字节</span><br><span class="line">            Key secretKey = keyFactory.generateSecret(dks);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM_DES);</span><br><span class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;12345678&quot;.getBytes());</span><br><span class="line">            AlgorithmParameterSpec paramSpec = iv;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKey,paramSpec);</span><br><span class="line">            byte[] bytes = cipher.doFinal(data.getBytes());</span><br><span class="line">            return byte2hex(bytes);</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * DES算法，解密</span><br><span class="line">     *</span><br><span class="line">     * @param data 待解密字符串</span><br><span class="line">     * @param key  解密私钥，长度不能够小于8位</span><br><span class="line">     * @return 解密后的字节数组</span><br><span class="line">     * @throws Exception 异常</span><br><span class="line">     */</span><br><span class="line">    public static String decode(String key,String data) &#123;</span><br><span class="line">        if(data == null)</span><br><span class="line">            return null;</span><br><span class="line">        try &#123;</span><br><span class="line">            DESKeySpec dks = new DESKeySpec(key.getBytes());</span><br><span class="line">            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DES&quot;);</span><br><span class="line">            //key的长度不能够小于8位字节</span><br><span class="line">            Key secretKey = keyFactory.generateSecret(dks);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM_DES);</span><br><span class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;12345678&quot;.getBytes());</span><br><span class="line">            AlgorithmParameterSpec paramSpec = iv;</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKey, paramSpec);</span><br><span class="line">            return new String(cipher.doFinal(hex2byte(data.getBytes())));</span><br><span class="line">        &#125; catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 二行制转字符串</span><br><span class="line">     * @param b</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String byte2hex(byte[] b) &#123;</span><br><span class="line">        StringBuilder hs = new StringBuilder();</span><br><span class="line">        String stmp;</span><br><span class="line">        for (int n = 0; b!=null &amp;&amp; n &lt; b.length; n++) &#123;</span><br><span class="line">            stmp = Integer.toHexString(b[n] &amp; 0XFF);</span><br><span class="line">            if (stmp.length() == 1)</span><br><span class="line">                hs.append(&apos;0&apos;);</span><br><span class="line">            hs.append(stmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return hs.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static byte[] hex2byte(byte[] b) &#123;</span><br><span class="line">        if((b.length%2)!=0)</span><br><span class="line">            throw new IllegalArgumentException();</span><br><span class="line">        byte[] b2 = new byte[b.length/2];</span><br><span class="line">        for (int n = 0; n &lt; b.length; n+=2) &#123;</span><br><span class="line">            String item = new String(b,n,2);</span><br><span class="line">            b2[n/2] = (byte)Integer.parseInt(item,16);</span><br><span class="line">        &#125;</span><br><span class="line">        return b2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.zip.*;</span><br><span class="line"></span><br><span class="line">public class CompressUtil &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static final int BUFFER = 8192;</span><br><span class="line"></span><br><span class="line">    public static void compress(String srcPath , String dstPath) throws IOException &#123;</span><br><span class="line">        File srcFile = new File(srcPath);</span><br><span class="line">        File dstFile = new File(dstPath);</span><br><span class="line">        if (!srcFile.exists()) &#123;</span><br><span class="line">            throw new FileNotFoundException(srcPath + &quot;不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream out = null;</span><br><span class="line">        ZipOutputStream zipOut = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            out = new FileOutputStream(dstFile);</span><br><span class="line">            CheckedOutputStream cos = new CheckedOutputStream(out,new CRC32());</span><br><span class="line">            zipOut = new ZipOutputStream(cos);</span><br><span class="line">            String baseDir = &quot;&quot;;</span><br><span class="line">            compress(srcFile, zipOut, baseDir);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            if(null != zipOut)&#123;</span><br><span class="line">                zipOut.close();</span><br><span class="line">                out = null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(null != out)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void compress(File file, ZipOutputStream zipOut, String baseDir) throws IOException&#123;</span><br><span class="line">        if (file.isDirectory()) &#123;</span><br><span class="line">            compressDirectory(file, zipOut, baseDir);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            compressFile(file, zipOut, baseDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 压缩一个目录 */</span><br><span class="line">    private static void compressDirectory(File dir, ZipOutputStream zipOut, String baseDir) throws IOException&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">            compress(files[i], zipOut, baseDir + dir.getName() + &quot;/&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 压缩一个文件 */</span><br><span class="line">    private static void compressFile(File file, ZipOutputStream zipOut, String baseDir)  throws IOException&#123;</span><br><span class="line">        if (!file.exists())&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BufferedInputStream bis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            bis = new BufferedInputStream(new FileInputStream(file));</span><br><span class="line">            ZipEntry entry = new ZipEntry(baseDir + file.getName());</span><br><span class="line">            zipOut.putNextEntry(entry);</span><br><span class="line">            int count;</span><br><span class="line">            byte data[] = new byte[BUFFER];</span><br><span class="line">            while ((count = bis.read(data, 0, BUFFER)) != -1) &#123;</span><br><span class="line">                zipOut.write(data, 0, count);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if(null != bis)&#123;</span><br><span class="line">                bis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void decompress(String zipFile , String dstPath)throws IOException&#123;</span><br><span class="line">        File pathFile = new File(dstPath);</span><br><span class="line">        if(!pathFile.exists())&#123;</span><br><span class="line">            pathFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        ZipFile zip = new ZipFile(zipFile);</span><br><span class="line">        for(Enumeration entries = zip.entries(); entries.hasMoreElements();)&#123;</span><br><span class="line">            ZipEntry entry = (ZipEntry)entries.nextElement();</span><br><span class="line">            String zipEntryName = entry.getName();</span><br><span class="line">            InputStream in = null;</span><br><span class="line">            OutputStream out = null;</span><br><span class="line">            try&#123;</span><br><span class="line">                in =  zip.getInputStream(entry);</span><br><span class="line">                String outPath = (dstPath+&quot;/&quot;+zipEntryName).replaceAll(&quot;\\*&quot;, &quot;/&quot;);;</span><br><span class="line">                //判断路径是否存在,不存在则创建文件路径</span><br><span class="line">                File file = new File(outPath.substring(0, outPath.lastIndexOf(&apos;/&apos;)));</span><br><span class="line">                if(!file.exists())&#123;</span><br><span class="line">                    file.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                //判断文件全路径是否为文件夹,如果是上面已经上传,不需要解压</span><br><span class="line">                if(new File(outPath).isDirectory())&#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                out = new FileOutputStream(outPath);</span><br><span class="line">                byte[] buf1 = new byte[1024];</span><br><span class="line">                int len;</span><br><span class="line">                while((len=in.read(buf1))&gt;0)&#123;</span><br><span class="line">                    out.write(buf1,0,len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if(null != in)&#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(null != out)&#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">import java.awt.AlphaComposite;</span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.Image;</span><br><span class="line">import java.awt.RenderingHints;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.swing.ImageIcon;</span><br><span class="line"></span><br><span class="line">public class ImageMarkLogoByIcon &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给图片添加水印</span><br><span class="line">     * @param iconPath 水印图片路径</span><br><span class="line">     * @param srcImgPath 源图片路径</span><br><span class="line">     * @param targerPath 目标图片路径</span><br><span class="line">     */</span><br><span class="line">    public static void markImageByIcon(String iconPath, String srcImgPath,</span><br><span class="line">                                       String targerPath) &#123;</span><br><span class="line">        markImageByIcon(iconPath, srcImgPath, targerPath, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给图片添加水印、可设置水印图片旋转角度</span><br><span class="line">     * @param iconPath 水印图片路径</span><br><span class="line">     * @param srcImgPath 源图片路径</span><br><span class="line">     * @param targerPath 目标图片路径</span><br><span class="line">     * @param degree 水印图片旋转角度</span><br><span class="line">     */</span><br><span class="line">    public static void markImageByIcon(String iconPath, String srcImgPath,</span><br><span class="line">                                       String targerPath, Integer degree) &#123;</span><br><span class="line">        OutputStream os = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Image srcImg = ImageIO.read(new File(srcImgPath));</span><br><span class="line"></span><br><span class="line">            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),</span><br><span class="line">                    srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">            // 得到画笔对象</span><br><span class="line">            // Graphics g= buffImg.getGraphics();</span><br><span class="line">            Graphics2D g = buffImg.createGraphics();</span><br><span class="line"></span><br><span class="line">            // 设置对线段的锯齿状边缘处理</span><br><span class="line">            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class="line">                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class="line"></span><br><span class="line">            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg</span><br><span class="line">                    .getHeight(null), Image.SCALE_SMOOTH), 0, 0, null);</span><br><span class="line"></span><br><span class="line">            if (null != degree) &#123;</span><br><span class="line">                // 设置水印旋转</span><br><span class="line">                g.rotate(Math.toRadians(degree),</span><br><span class="line">                        (double) buffImg.getWidth() / 2, (double) buffImg</span><br><span class="line">                                .getHeight() / 2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 水印图象的路径 水印一般为gif或者png的，这样可设置透明度</span><br><span class="line">            ImageIcon imgIcon = new ImageIcon(iconPath);</span><br><span class="line"></span><br><span class="line">            // 得到Image对象。</span><br><span class="line">            Image img = imgIcon.getImage();</span><br><span class="line"></span><br><span class="line">            float alpha = 0.5f; // 透明度</span><br><span class="line">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class="line">                    alpha));</span><br><span class="line"></span><br><span class="line">            // 表示水印图片的位置</span><br><span class="line">            g.drawImage(img, 150, 300, null);</span><br><span class="line"></span><br><span class="line">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));</span><br><span class="line"></span><br><span class="line">            g.dispose();</span><br><span class="line"></span><br><span class="line">            os = new FileOutputStream(targerPath);</span><br><span class="line"></span><br><span class="line">            // 生成图片</span><br><span class="line">            ImageIO.write(buffImg, &quot;JPG&quot;, os);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;图片完成添加Icon印章。。。。。。&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (null != os)</span><br><span class="line">                    os.close();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用poi读写excel</title>
      <link href="/2017/10/08/%E4%BD%BF%E7%94%A8poi%E8%AF%BB%E5%86%99excel/"/>
      <url>/2017/10/08/%E4%BD%BF%E7%94%A8poi%E8%AF%BB%E5%86%99excel/</url>
      <content type="html"><![CDATA[<p>首先了解以下excel文件怎么和poi中的组件对应起来的。　　</p><ul><li>一个Excel文件对应于一个Workbook对象</li><li>一个Workbook可以有多个Sheet对象</li><li>一个Sheet对象由多个Row对象组成</li><li>一个Row对象是由多个Cell对象组成 </li></ul><p>基于以上几条，如果想对excel文件进行读写的话就要</p><ol><li>用Workbook打开或者创建一个Excel文件的对象</li><li>用上一步的Excel对象创建或者获取到一个Sheet对象</li><li>用Sheet对象创建或获取一个Row对象</li><li>用Row对象创建或获取一个Cell对象</li><li>对Cell对象读写。</li></ol><p>基于以上原理就可以轻松对Excel文件进行读写，这里以XSSFWorkbook（对应.xlsx文件即office2007以上版本，如果是.xls文件即office2003以下版本需要使用HSSFWorkbook）为例进行Excel的简单读写。<br>maven依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.17-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.16-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>写操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//创建一个Excel对象</span><br><span class="line">XSSFWorkbook wb = new XSSFWorkbook();</span><br><span class="line"></span><br><span class="line">//创建表单Sheet对象</span><br><span class="line">XSSFSheet sheet = wb.createSheet();</span><br><span class="line"></span><br><span class="line">//创建Row对象</span><br><span class="line">XSSFRow row1 = sheet.createRow(0);</span><br><span class="line">XSSFRow row2 = sheet.createRow(1);</span><br><span class="line">XSSFRow row3 = sheet.createRow(2);</span><br><span class="line"></span><br><span class="line">//创建Cell对象，并进行写操作</span><br><span class="line"></span><br><span class="line">//第一行</span><br><span class="line">XSSFCell cell1 =  row1.createCell(0);</span><br><span class="line">cell1.setCellValue(&quot;姓名&quot;);</span><br><span class="line">XSSFCell cell2 =  row1.createCell(1);</span><br><span class="line">cell2.setCellValue(&quot;年龄&quot;);</span><br><span class="line"></span><br><span class="line">//第二行</span><br><span class="line">cell1 =  row2.createCell(0);</span><br><span class="line">cell1.setCellValue(&quot;张三&quot;);</span><br><span class="line">cell2 =  row2.createCell(1);</span><br><span class="line">cell2.setCellValue(&quot;20&quot;);</span><br><span class="line"></span><br><span class="line">//第三行</span><br><span class="line">cell1 =  row3.createCell(0);</span><br><span class="line">cell1.setCellValue(&quot;李四&quot;);</span><br><span class="line">cell2 =  row3.createCell(1);</span><br><span class="line">cell2.setCellValue(&quot;18&quot;);</span><br><span class="line"></span><br><span class="line">//输出文件</span><br><span class="line">FileOutputStream output = new FileOutputStream(&quot;test.xlsx&quot;);</span><br><span class="line">wb.write(output);</span><br><span class="line">output.flush();</span><br></pre></td></tr></table></figure></p><p><img src="/img/8297579-5e28e732a563bc53.png" alt="image.png"></p><p>读操作和写操作类似，把create的地方换成get即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//获取Excel对象</span><br><span class="line">XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(&quot;test.xlsx&quot;));</span><br><span class="line"></span><br><span class="line">//获取一个Sheet对象</span><br><span class="line">XSSFSheet sheet = wb.getSheetAt(0);</span><br><span class="line"></span><br><span class="line">//获取Row对象</span><br><span class="line">XSSFRow row1 = sheet.getRow(0);</span><br><span class="line">XSSFRow row2 = sheet.getRow(1);</span><br><span class="line">XSSFRow row3 = sheet.getRow(2);</span><br><span class="line"></span><br><span class="line">//获取Cell对象的值并输出</span><br><span class="line">System.out.println(row1.getCell(0) + &quot; &quot; + row1.getCell(1));</span><br><span class="line">System.out.println(row2.getCell(0) + &quot; &quot; + row2.getCell(1));</span><br><span class="line">System.out.println(row3.getCell(0) + &quot; &quot; + row3.getCell(1));</span><br></pre></td></tr></table></figure></p><p><img src="/img/8297579-2024e73c2e8adf72.png" alt="image.png"></p><p>当然也可以根据文件扩展名自动选择使用哪个子类生成Workbook对象，这里直接封一个util工具类，方便以后直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line">import org.apache.poi.ss.usermodel.*;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class ReadExcelUtils &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(ReadExcelUtils.class);</span><br><span class="line"></span><br><span class="line">    private Workbook wb;</span><br><span class="line">    private Sheet sheet;</span><br><span class="line">    private Row row;</span><br><span class="line"></span><br><span class="line">    public ReadExcelUtils(String filepath) &#123;</span><br><span class="line">        if(filepath==null)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String ext = filepath.substring(filepath.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        try &#123;</span><br><span class="line">            InputStream is = new FileInputStream(filepath);</span><br><span class="line">            if(&quot;.xls&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new HSSFWorkbook(is);</span><br><span class="line">            &#125;else if(&quot;.xlsx&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new XSSFWorkbook(is);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                wb=null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            logger.error(&quot;FileNotFoundException&quot;, e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;IOException&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel表格表头的内容</span><br><span class="line">     * @return String 表头内容的数组</span><br><span class="line">     */</span><br><span class="line">    public String[] readExcelTitle() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        // 标题总列数</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">        String[] title = new String[colNum];</span><br><span class="line">        for (int i = 0; i &lt; colNum; i++) &#123;</span><br><span class="line">            // title[i] = getStringCellValue(row.getCell((short) i));</span><br><span class="line">            title[i] = row.getCell(i).getStringCellValue();</span><br><span class="line">        &#125;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel数据内容</span><br><span class="line">     * @return Map 包含单元格数据内容的Map对象</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; readExcelContent() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; content = new HashMap&lt;Integer, Map&lt;Integer,Object&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        // 得到总行数</span><br><span class="line">        int rowNum = sheet.getLastRowNum();</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">        // 正文内容应该从第二行开始,第一行为表头的标题</span><br><span class="line">        for (int i = 1; i &lt;= rowNum; i++) &#123;</span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            int j = 0;</span><br><span class="line">            Map&lt;Integer,Object&gt; cellValue = new HashMap&lt;Integer, Object&gt;();</span><br><span class="line">            while (j &lt; colNum) &#123;</span><br><span class="line">                Object obj = getCellFormatValue(row.getCell(j));</span><br><span class="line">                cellValue.put(j, obj);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            content.put(i, cellValue);</span><br><span class="line">        &#125;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Cell类型设置数据</span><br><span class="line">     * @param cell</span><br><span class="line">     * @return Object</span><br><span class="line">     */</span><br><span class="line">    private Object getCellFormatValue(Cell cell) &#123;</span><br><span class="line">        Object cellvalue = &quot;&quot;;</span><br><span class="line">        if (cell != null) &#123;</span><br><span class="line"></span><br><span class="line">            // 判断当前Cell的Type</span><br><span class="line">            switch (cell.getCellType()) &#123;</span><br><span class="line">                case Cell.CELL_TYPE_NUMERIC:// 如果当前Cell的Type为NUMERIC</span><br><span class="line">                case Cell.CELL_TYPE_FORMULA: &#123;</span><br><span class="line">                    // 判断当前的cell是否为Date</span><br><span class="line">                    if (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                        // 如果是Date类型则，转化为Data格式</span><br><span class="line">                        // data格式是带时分秒的：2013-7-10 0:00:00</span><br><span class="line">                        // cellvalue = cell.getDateCellValue().toLocaleString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        // data格式是不带带时分秒的：2013-7-10</span><br><span class="line">                        Date date = cell.getDateCellValue();</span><br><span class="line">                        cellvalue = date;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 如果是纯数字</span><br><span class="line">                        // 取得当前Cell的数值</span><br><span class="line">                        cellvalue = String.valueOf(cell.getNumericCellValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                case Cell.CELL_TYPE_STRING:// 如果当前Cell的Type为STRING</span><br><span class="line">                    // 取得当前的Cell字符串</span><br><span class="line">                    cellvalue = cell.getRichStringCellValue().getString();</span><br><span class="line">                    break;</span><br><span class="line">                default:// 默认的Cell值</span><br><span class="line">                    cellvalue = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cellvalue = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return cellvalue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Service部署Spring Boot</title>
      <link href="/2017/10/06/%E4%BD%BF%E7%94%A8Service%E9%83%A8%E7%BD%B2Spring%20Boot/"/>
      <url>/2017/10/06/%E4%BD%BF%E7%94%A8Service%E9%83%A8%E7%BD%B2Spring%20Boot/</url>
      <content type="html"><![CDATA[<h4 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h4><p>Spring Boot 的部署很简单，无论使用maven还是gradle构建成jar包之后，上传到服务器上，运行 <code>java -jar *.jar</code> 即可完成简单的部署。如果想使用外部的配置文件直接在后面加参数就行了  <code>--spring.config.location=application-production.yml</code>  如果想关闭终端还在后台启动的话加上 nohup 就可以了<br><code>nohup java -jar *.jar  --spring.config.location=application-production.yml</code></p><h4 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h4><p>普通情况只要关闭终端或ctrl+c即可结束应用，如果使用nohup部署的话先要找到进程号，然后杀掉进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080</span><br><span class="line">COMMAND  PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    2417 root   26u  IPv6 1672621      0t0  TCP *:webcache (LISTEN)</span><br><span class="line">kill -9 2417</span><br></pre></td></tr></table></figure></p><h4 id="使用service"><a href="#使用service" class="headerlink" title="使用service"></a>使用service</h4><p>如果每一次部署和杀死都要手动的话，频率多了其实也挺麻烦的，可以使用脚本来解决这个问题。<br>在 <code>etc/init.d</code> 先建一个脚本，把这个项目作为service来运行<br>例如 新建<code>etc/init.d/test</code><br>内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">SERVICE_NAME=test</span><br><span class="line">HOME=/root/webserver/test</span><br><span class="line">PATH_TO_JAR=$HOME/*.jar</span><br><span class="line">PID_PATH_NAME=/tmp/test.pid</span><br><span class="line"></span><br><span class="line">LOG=$HOME/production.log</span><br><span class="line">ERROR_LOG=$HOME/production.err</span><br><span class="line">CONFIG=$HOME/application-production.yml</span><br><span class="line">case $1 in</span><br><span class="line">    start)</span><br><span class="line">        echo &quot;Starting $SERVICE_NAME ...&quot;</span><br><span class="line">        if [ ! -f $PID_PATH_NAME ]; then</span><br><span class="line">            cd $HOME</span><br><span class="line">            nohup java -jar $PATH_TO_JAR --spring.config.location=application-production.yml &gt; $LOG 2&gt; $ERROR_LOG &amp;</span><br><span class="line">                        echo $! &gt; $PID_PATH_NAME</span><br><span class="line">            echo &quot;$SERVICE_NAME started ...&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is already running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    stop)</span><br><span class="line">        if [ -f $PID_PATH_NAME ]; then</span><br><span class="line">            PID=$(cat $PID_PATH_NAME);</span><br><span class="line">            echo &quot;$SERVICE_NAME stoping ...&quot;</span><br><span class="line">            kill $PID;</span><br><span class="line">            echo &quot;$SERVICE_NAME stopped ...&quot;</span><br><span class="line">            rm $PID_PATH_NAME</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is not running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    restart)</span><br><span class="line">        if [ -f $PID_PATH_NAME ]; then</span><br><span class="line">            PID=$(cat $PID_PATH_NAME);</span><br><span class="line">            echo &quot;$SERVICE_NAME stopping ...&quot;;</span><br><span class="line">            kill $PID;</span><br><span class="line">            echo &quot;$SERVICE_NAME stopped ...&quot;;</span><br><span class="line">            rm $PID_PATH_NAME</span><br><span class="line">            echo &quot;$SERVICE_NAME starting ...&quot;</span><br><span class="line">            cd $HOME/current</span><br><span class="line">            nohup java -jar $PATH_TO_JAR --spring.config.location=application-production.yml &gt; $LOG 2&gt; $ERROR_LOG &amp;</span><br><span class="line">                        echo $! &gt; $PID_PATH_NAME</span><br><span class="line">            echo &quot;$SERVICE_NAME started ...&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is not running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p><p>保存脚本<br>赋予脚本可执行权限 <code>sudo chmod +x  etc/init.d/test</code><br>把需要部署的jar包放到脚本中<code>HOME</code>的目录下，然后就可以使用service的方式部署或杀死项目了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service test start</span><br><span class="line">sudo service test stop</span><br><span class="line">sudo service test restart</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>腾讯云做ss转发</title>
      <link href="/2017/09/21/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%81%9Ass%E8%BD%AC%E5%8F%91/"/>
      <url>/2017/09/21/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%81%9Ass%E8%BD%AC%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>刚开始用的是版瓦工的服务器，后来因为一些原因账号不能用了，如果还想用的话，还要再申请账号，还要再买，虽然版瓦工很便宜，但是最近手头相当紧呀，也不想再太折腾，于是就买了个70块钱一年的ss账号。链接我就不放了，谷歌搜一下ss账号第一个就是。<br>这个账号不限流量，但是限制连接的个数（其实我觉得没限制），为了使用多台设备，我用腾讯云做了一次转发，多个设备连在我的腾讯云上，然后腾讯云连这个ss。<br>实现方法有好多，但好多我也都失败了，最后我是参考<a href="https://doub.io/ss-jc29/" target="_blank" rel="noopener">这个</a>成功的。</p>]]></content>
      
      
    </entry>
    
  
  
    
  
</search>
