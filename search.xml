<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>maven多配置文件</title>
      <link href="/2018/07/06/maven%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/06/maven%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>我也不知道该怎么总结这篇文章的题目，事情是这样的，在开发的过程中我需要一个插件，但是在生产环境中我不需要这个插件，我想了一下maven的那些作用域，竟然没有可以解决这个问题的。</p><p>这个问题可以通过配置两份<code>pom.xml</code>来实现，我不知道行业内在生产中是不是这样做的，总是感觉不优雅。</p><p><code>mvn -f pom-prod.xml package</code></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>history对象</title>
      <link href="/2018/06/10/history%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/06/10/history%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>合成10</title>
      <link href="/2018/06/10/%E5%90%88%E6%88%9010/"/>
      <url>/2018/06/10/%E5%90%88%E6%88%9010/</url>
      <content type="html"><![CDATA[<p>合成10是一个DOM小游戏，创意并不是我的，这个是我很久以前在网上看到的，他的游戏机制类似于1024。</p><p><img src="/img/Screenshot_2018-06-10-21-17-09-70.png" alt="游戏截图"></p><p>每次点击合成会把相邻的数字合成一个更大数字。<br>前几天闲来无事的时候，我把它移植到了微信小程序上了。因为微信对小游戏的管控比较严格，我在分类的时候没写游戏，没想到还能过了审核。<br>游戏的算法其实很简单，简单的循环就可以解决，但是在微信上的性能远不如在浏览器上的性能。这个大概因为这是我第一次动手开发微信小程序，可能对一些东西的最佳实践理解的不够，没把正确的东西给应用上。但是把玩还是可以的。</p><p>小游戏的微信码<img src="/img/gh_a6a063e0b8e4_430.jpg" alt="微信码"></p><p>或者小程序搜索<code>合并方块</code><br>代码地址 <a href="https://github.com/xmfaly/Merge-Block" target="_blank" rel="noopener">xmfaly/Merge-Block</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>java自定义排序</title>
      <link href="/2018/05/06/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/05/06/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>遇到过很多次了，种于狠下心总结一下，免得以后每次都要再找。<br>java自定义排序有两个Object对象，o1和o2（this相当于o1），如果返回负值则把o1插到o2前面，如果返回正值，把o1放到o2后面，如果返回0保持原来顺序不变。</p><p>排序有两种实现方式，第一种是要排序的类实现Comparable接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class T implements Comparable &#123;</span><br><span class="line"></span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    public T(int x,int y)&#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Object o) &#123;</span><br><span class="line">        if(this.x &lt; ((T)o).x)</span><br><span class="line">            return -1;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;x: &quot; + x + &quot; y: &quot; + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new T(1,2));</span><br><span class="line">        list.add(new T(3,5));</span><br><span class="line">        list.add(new T(2,1));</span><br><span class="line">        Collections.sort(list);</span><br><span class="line"></span><br><span class="line">        for(int i = 0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种类似与c++定义比较函数的方式，不过是java的风格，覆盖Comparator中的compare方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class T &#123;</span><br><span class="line"></span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    public T(int x,int y)&#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;X: &quot; + x + &quot; y: &quot; + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new T(1,2));</span><br><span class="line">        list.add(new T(3,5));</span><br><span class="line">        list.add(new T(2,1));</span><br><span class="line">        Collections.sort(list, new Comparator&lt;T&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(T o1, T o2) &#123;</span><br><span class="line">                if(o1.x &lt; o2.x)</span><br><span class="line">                    return -1;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        for(int i = 0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring boot使用多线程</title>
      <link href="/2018/04/24/spring-boot%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/04/24/spring-boot%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>最近遇到一个难题，我需要在boot项目中开一个监视器，监视器中需要用到dao接口，spring boot的dao是依赖注入进去的，并不能手动new出来，如果是常规的方法先建线程的话，dao注入不进去，查了很多网站，想了很多办法最后找到了解决办法。在这里记录一下。<a href="https://blog.csdn.net/u010454030/article/details/52317438" target="_blank" rel="noopener">https://blog.csdn.net/u010454030/article/details/52317438</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ApplicationContextProvider implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private static ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    private ApplicationContextProvider()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public  static &lt;T&gt; T getBean(String name,Class&lt;T&gt; aClass)&#123;</span><br><span class="line">        return context.getBean(name,aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;mTask&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class MoniotrTask extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    final static Logger logger= LoggerFactory.getLogger(MoniotrTask.class);</span><br><span class="line">    //参数封装</span><br><span class="line">    private Monitor monitor;</span><br><span class="line"></span><br><span class="line">    public void setMonitor(Monitor monitor) &#123;</span><br><span class="line">        this.monitor = monitor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Resource(name = &quot;greaterDaoImpl&quot;)</span><br><span class="line">    private RuleDao greaterDaoImpl;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        logger.info(&quot;线程:&quot;+Thread.currentThread().getName()+&quot;运行中.....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class StartTask   &#123;</span><br><span class="line"></span><br><span class="line">    final static Logger logger= LoggerFactory.getLogger(StartTask.class);</span><br><span class="line"></span><br><span class="line">    //定义在构造方法完毕后，执行这个初始化方法</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public  void init()&#123;</span><br><span class="line"></span><br><span class="line">        final List&lt;Monitor&gt; list = ParseRuleUtils.parseRules();</span><br><span class="line">        logger.info(&quot;监控任务的总Task数：&#123;&#125;&quot;,list.size());</span><br><span class="line">        for(int i=0;i&lt;list.size();i++) &#123;</span><br><span class="line">            MoniotrTask moniotrTask=   ApplicationContextProvider.getBean(&quot;mTask&quot;, MoniotrTask.class);</span><br><span class="line">            moniotrTask.setMonitor(list.get(i));</span><br><span class="line">            moniotrTask.start();</span><br><span class="line">            logger.info(&quot;第&#123;&#125;个监控task: &#123;&#125;启动 !&quot;,(i+1),list.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring-boot注入静态变量</title>
      <link href="/2018/04/06/spring-boot%E6%B3%A8%E5%85%A5%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/"/>
      <url>/2018/04/06/spring-boot%E6%B3%A8%E5%85%A5%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>之前遇到过一次，当时刚开始玩spring-boot不知道该怎么搜索关键字没解决，今天又遇到了。<br>一个项目需要配置一个系统代理，需要在spring的启动文件里配置，因为代码是开源的，但代理的地址我不太想让别人看到，写到配置文件里注入的时候遇到了困难。<br>知道关键字之后解决起来其实蛮简单的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static String proxyHost;</span><br><span class="line"></span><br><span class="line">public static String proxyPort;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.host&#125;&quot;)</span><br><span class="line">private String host;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.port&#125;&quot;)</span><br><span class="line">private String port;</span><br><span class="line"></span><br><span class="line">@PostConstruct</span><br><span class="line">public void initData()&#123;</span><br><span class="line">    proxyHost = host;</span><br><span class="line">    proxyPort= port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法实验证明是可以的。但由于框架启动反射顺序的原因，这些变量必须放到别的java文件里，不能直接放到spring的启动文件里面。<br>网上还有一种思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static String proxyHost;</span><br><span class="line"></span><br><span class="line">public static String proxyPort;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.host&#125;&quot;)</span><br><span class="line">public static void setProxyHost(String proxyHost) &#123;</span><br><span class="line">    TestConfig.proxyHost = proxyHost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;socket.port&#125;&quot;)</span><br><span class="line">public static void setProxyPort(String proxyPort) &#123;</span><br><span class="line">    TestConfig.proxyPort = proxyPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过实验证明不可行。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于docker部署spring-boot的尝试</title>
      <link href="/2018/04/01/%E5%85%B3%E4%BA%8Edocker%E9%83%A8%E7%BD%B2spring-boot%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
      <url>/2018/04/01/%E5%85%B3%E4%BA%8Edocker%E9%83%A8%E7%BD%B2spring-boot%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>最近搬家一个服务器，发现要安装好多好多的环境，相当麻烦。<br>以前我也经常重装电脑，后来觉得麻烦就把我的开发环境都弄到了虚拟机里面，一方面linux环境，另一方面也不用反复重装。想到这里我想到了被我遗忘很久的docker了。<br>可以在服务器上只安装docker，然后以后环境什么的不用我考虑了。</p><p>先用我最常用的spring-boot尝试一下，以后再部署其他的。在这里记录一下过程。</p><h3 id="添加maven构建插件"><a href="#添加maven构建插件" class="headerlink" title="添加maven构建插件"></a>添加maven构建插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;docker.image.prefix&gt;xmfaly&lt;/docker.image.prefix&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.4.11&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h3 id="建立Dockerfile"><a href="#建立Dockerfile" class="headerlink" title="建立Dockerfile"></a>建立Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">VOLUME /log</span><br><span class="line">ADD *.jar app.jar</span><br><span class="line">RUN sh -c &apos;touch /app.jar&apos;</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENV JAVA_OPTS=&quot;&quot;</span><br><span class="line">ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar &gt;&gt;/log/out&quot; ]</span><br></pre></td></tr></table></figure><h3 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h3><p>因为我是本地虚拟机linux环境。所以我需要先从git拉最新的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#docker 用户名</span><br><span class="line">USER_NAME=</span><br><span class="line"># 项目名称</span><br><span class="line">PROJ_NAME=</span><br><span class="line"># 服务器用户名</span><br><span class="line">SERVER_NAME=</span><br><span class="line"># 服务器地址</span><br><span class="line">SERVER_HOST=</span><br><span class="line"># 部署端口</span><br><span class="line">DEPLOY_PORT=</span><br><span class="line"></span><br><span class="line"># 停止原来的容器</span><br><span class="line"># docker stop $PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 删除原来的容器和镜像</span><br><span class="line">docker rm $PROJ_NAME</span><br><span class="line">docker rmi $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line">#拉取更新</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># 本地构件镜像</span><br><span class="line">./mvnw package -Dmaven.test.skip=true docker:build</span><br><span class="line"></span><br><span class="line"># 上传镜像到远程仓库</span><br><span class="line">docker push $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 连接服务器</span><br><span class="line">ssh $SERVER_NAME@$SERVER_HOST -tt &lt;&lt; cmd</span><br><span class="line"></span><br><span class="line"># 停止原来的容器</span><br><span class="line">docker stop $PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 删除原来的容器</span><br><span class="line">docker rm $PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 拉取最新的镜像</span><br><span class="line">docker pull $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line"># 运行容器</span><br><span class="line">docker run --name=$PROJ_NAME -p $DEPLOY_PORT:8080 -v /root/log/:/log/ -t $USER_NAME/$PROJ_NAME</span><br><span class="line"></span><br><span class="line">cmd</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于掌上联创的探索</title>
      <link href="/2018/03/25/%E5%85%B3%E4%BA%8E%E6%8E%8C%E4%B8%8A%E8%81%94%E5%88%9B%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
      <url>/2018/03/25/%E5%85%B3%E4%BA%8E%E6%8E%8C%E4%B8%8A%E8%81%94%E5%88%9B%E7%9A%84%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p>我们学校使用了联创打印系统，应该好多学校都在用，他们提供了一个客户端，我们下载之后在本地打印，之后到打印机刷卡取走打印的东西。<br>这个系统对于以前去学校外面排队打印而言相当方便。<br>我使用这个系统的主要场景就是打印课件，很多时候老师前天把课件发给我们，第二天讲课会用到，但是忘记在电脑上打印了就贼尴尬，因为联创只提供pc版的客户端，这个时候在教室的我就显得很无助了。为此有一阵还特地开着电脑，方便随时可以用teamviewer进行控制打印。<br>刚开始的时候我还想他们为什么不提供一个手机客户端，后来我了解到打印机只负责打印，他们的客户端负责传输，而文件的格式解析什么的都在本地进行，也就是假如我想打印一个word文件，我电脑上必须有可以识别word的软件，否则我就不能打印。也就是说，如果做一个手机客户端，在现有的环境下，几乎是不可能的，因为主流的手机可以解析word，pdf的这些软件都不提供打印的接口。让联创自己做，当我没说吧。<br>我就想我能不能在服务器上做一个中转，我的手机把文件传到服务器上，然后服务器上装了联创的客户端和各种能够解析pdf，word这些的软件，在服务器上把我想打印的文件送到联创的服务器上。<br>想想还觉得蛮简单的，但是实际操作的时候遇到了一系列的问题。</p><h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><p>因为联创只提供windows客户端为了简便起见我也选择了windows的服务器。</p><h3 id="内网问题"><a href="#内网问题" class="headerlink" title="内网问题"></a>内网问题</h3><p>我是用的时腾讯云的服务器，但是学校联创客户端只有校园网才可以连接，我们学校也提供vpn，有两种方式一种是客户端，一种是直接设置，直接设置那种在平常的pc机上很简单，但是如果是服务器上就相当麻烦，正好是windows服务器，我就直接下载了客户端安装上。登陆之后发现再也连不上服务器了，因为vpn改变了地址。问了大佬们如何解决这个问题，有人说可以设置解决这个，也有人说可以搞两台服务器，一台做反向代理转发，一台开vpn。我觉得这两个办法都行，但我没有采用，我用的是sock5 + Proxifier解决这个问题的。</p><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p>因为打印的文件可能有多种格式。我的服务器内存有限所以我肯定不能把各种软件都装一遍。最后折中一下我选择装 Sumatra PDF + Liboffice 。pdf软件负责解析文件和office软件负责把所有其他格式的文件转换成pdf。</p><h3 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h3><p>因为平时用的都是java，一开始想找一个java的可以控制窗口程序的库，但最后还是放弃了，果断转为python，我才用一个非常流行的窗口程序测试框架pywinauto来控制打印机程序和pdf解析软件。之所以不用命令行直接控制打印机，我感觉是因为联创当时写的时候的有个bug把。把任务放到队列中一直不打印，所以只能模拟人工操作了。也可能是我对windows的打印任务不了解导致的。</p><h3 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a>web框架</h3><p>这里先说一下为啥不用微信小程序，微信小程序是提供了文件上传功能的，但是不提供文件选择的api，换句话说，我可以上传，但是鬼知道你要上传的文件在哪个文件夹里，叫什么名字。所以没办法只能选择html5了，后台方面因为主要逻辑都是python，所以直接整了个python的web框架flask，话说python的东西就是简单方便，这个框架我看了还不到10分钟吧就能上手写东西了。</p><h3 id="统一身份认证"><a href="#统一身份认证" class="headerlink" title="统一身份认证"></a>统一身份认证</h3><p>联创使用了我们学校的统一身份认证，但是感觉他的逻辑有点问题，先解析文件，然后认证，然后上传打印，如果我也模拟他这样的操作的话，本身我的服务器带宽低资源少，费了半天时间传到服务器上，然后又是半天解析文件，然后反回来一个用户名密码错误。<br>所以我放弃了联创自带的认证，在传文件之前用requests向统一身份认证接口post数据，认证成功继续，失败直接返回结果。</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>当然还有一些解决不了的或者不能解决的问题。上面也提到了一方面是网速，一方面是服务器资源。当然还有我的调度算法，falsk的单线程。这些都是问题。不过没太有时间去优化了。暂时可以用就行了吧。</p><p>最后福利时间，放出地址吧。这个项目我不是很想开源，而且由于服务器资源有限，肯定是不能对所有人开放的。希望看到地址的人且行且珍惜，不要乱宣传。<a href="http://115.159.153.43:5000/login" target="_blank" rel="noopener">http://115.159.153.43:5000/login</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>求1+2+3+4+...+n</title>
      <link href="/2018/03/13/%E6%B1%821-2-3-4-n/"/>
      <url>/2018/03/13/%E6%B1%821-2-3-4-n/</url>
      <content type="html"><![CDATA[<p>今晚遇到一个好巧妙地题，题本身不是很难，但是感觉思想很棒。</p><blockquote><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p></blockquote><p>不能使用乘除循环的话，很容易可以想到用递归来解决，f(n) = f(n-1) + n,但是如果要求不使用判断语句递归结束的条件又难写。<br>想了好久，还是没做出来，最后网上找到了解决办法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int Sum_Solution(int n) &#123;</span><br><span class="line">    int res = n;</span><br><span class="line">    boolean temp = (n &gt; 0) &amp;&amp; (( res +=Sum_Solution(n-1))&gt;0);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感觉这题最巧妙的地方就是利用了短路运算符 &amp;&amp; 。<br>如果 &amp;&amp; 前的表达式成立的话就会去验证后面的表达式值，反之结束判断，返回false，利用这个特性来巧妙地结束递归。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>两个栈实现队列</title>
      <link href="/2018/02/27/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2018/02/27/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>2018年3月23更新<br>经学弟提醒入队的时候并不需要保证栈2为空，可以存在两个栈同时不空的情况。对于栈2的处理不变，栈1直接入栈即可。如果按照原答案的话，出队需要都移到栈2，入队需要都移到栈1，如果反复出队一个，入队一个就会浪费大量时间在移动数据上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void push(int node) &#123;</span><br><span class="line">    stack1.push(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下为原博文<br>假设使用栈1作为入栈缓冲区，栈2作为出栈缓冲区，那么入栈和出栈的时候所有的可能性有以下三种情况</p><table><thead><tr><th></th><th style="text-align:center"></th><th style="text-align:right"></th><th style="text-align:right"></th></tr></thead><tbody><tr><td>栈1</td><td style="text-align:center">空</td><td style="text-align:right">非空</td><td style="text-align:right">空</td></tr><tr><td>栈2</td><td style="text-align:center">空</td><td style="text-align:right">空</td><td style="text-align:right">非空</td></tr></tbody></table><p>因为每次都是要弹出某个栈顶或栈底的元素因此并不存在两个栈同时非空的情况。<br>栈1栈2同时为空的时候入队时直接压入栈1即可，栈1非空栈2空时同样直接压入栈1即可，栈1空栈2非空需要把栈2中的元素全部退回到栈1中然后压如栈1.<br>出队时同样的道理。<br>如果栈1栈2都为空，没有元素无法出栈，如果栈2非空，栈1空，直接弹出栈2顶端元素即可，如果栈1非空，栈2空需要把栈1的元素全部压入栈2，然后弹出栈2顶端元素即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;();</span><br><span class="line">Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">public void push(int node) &#123;</span><br><span class="line">    if(stack2.isEmpty())&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        while(!stack2.isEmpty())&#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int pop() &#123;</span><br><span class="line">    if(!stack2.isEmpty())&#123;</span><br><span class="line">        return stack2.pop();</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        while(!stack1.isEmpty())&#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        return stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>maven笔记</title>
      <link href="/2018/01/11/maven%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/11/maven%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>以前也没有系统的看过maven的资料，一般就是用它来添加依赖，但最近惨遭maven的折磨，经常性的编译通过，但运行的时候出现<code>ClassNotFoundException</code>或者<code>NoClassDefFoundError</code>之类的错误，终于痛下决心，想系统的了解一下Maven的用法。</p><h3 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h3><p>maven的安装很简单，去官网下载压缩包之后解压，然后配置环境变量<code>M2_HOME</code> 和把<code>%M2_HOME%/bin</code>添加到<code>path</code>即可。 <code>MAVEN_OPTS</code>是用来调整jvm内存和持久代的不是必须要配置的。</p><h3 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h3><p>配置好maven的环境变量之后就可以使用命令行来创建maven项目，但个人感觉这样的方式还是比较麻烦的，还是使用<code>ide</code>直接生成比较简单。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>建好的项目目录结构如下<br><img src="/img/8297579-eb60ad2523fb18c7.png" alt="image.png"></p><ul><li><code>main</code>目录存放项目的主要代码</li><li><code>java</code>目录存放java代码</li><li><code>resources</code>目录存放配置文件</li><li><code>webapp</code>目录存放Web应用相关的代码</li><li><code>pom.xml</code>是项目的配置文件<h3 id="POM结构"><a href="#POM结构" class="headerlink" title="POM结构"></a>POM结构</h3>刚建好的maven项目的的<code>pom.xml</code>文件是类似于这样的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;tk.xmfaly&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;xmfdemo&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;xmfdemo Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;xmfdemo&lt;/finalName&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li></ul><p>从上到下</p><ul><li><code>modelVersion</code>是<code>pom</code>的版本号，这个必须有，不需要修改</li><li><code>groupId</code>、<code>artifactId</code>、<code>version</code> 是maven项目的三坐标，可以在仓库中对应唯一的一个maven项目</li><li><code>packaging</code>是打包方式，默认不写是<code>jar</code>包方式</li><li><code>name</code>、<code>url</code>表示该项目的名称和url地址，可以省略</li><li><code>dependencies</code>是该项目的依赖关系，每一个<code>dependency</code>都代表着一个maven依赖</li><li><code>build</code>是与构建相关的配置，这里的<code>finalName</code>是用来配置构建之后的文件名字<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><img src="/img/8297579-5b443d5904207367.png" alt="image.png"><br>一个maven项目有9个生命周期，如果你使用ide应该可以很方便的看到这九个周期，并且可以快速的执行某个周期。<br>其实本质上每个周期都是一个或多个的<code>maven</code>插件在起作用，比如<code>compile</code>是由<code>maven-compile-plugin</code>这个插件在起作用。<br>每个周期的功能如下</li><li><code>clean</code> 清理自动生成的<code>target</code>目录</li><li><code>validate</code> 验证<code>pom.xml</code>文件是否有效</li><li><code>compile</code> 编译java代码</li><li><code>test</code> 运行测试代码</li><li><code>package</code> 项目打包</li><li><code>verify</code> 验证<code>package</code>打的包是否有效</li><li><code>site</code>生成项目的静态站点</li><li><code>deploy</code> 将打包的文件部署到远程仓库<h3 id="依赖的作用域"><a href="#依赖的作用域" class="headerlink" title="依赖的作用域"></a>依赖的作用域</h3>一直以来我一直被这个作用域所困惑，很多时候就是作用于搞混了，导致一系列的问题。其实maven依赖的作用域也不是那么复杂，只是一直没有仔细的去看，去思考罢了。</li></ul><table><thead><tr><th style="text-align:center">作用域</th><th style="text-align:center">编译时有效</th><th style="text-align:center">测试时有效</th><th style="text-align:center">运行时有效</th></tr></thead><tbody><tr><td style="text-align:center">compile</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center"></td><td style="text-align:center">&radic;</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">runtime</td><td style="text-align:center"></td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td></tr><tr><td style="text-align:center">provided</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">system</td><td style="text-align:center">&radic;</td><td style="text-align:center">&radic;</td></tr></tbody></table><p>作用域最好应用于他应该出现的地方，不应该出现的地方最好不要放上，否则会导致项目过大。</p><h3 id="保存到本地仓库"><a href="#保存到本地仓库" class="headerlink" title="保存到本地仓库"></a>保存到本地仓库</h3><p>可以将jar包保存到本地仓库，方便其他项目调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;localRepository&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;file:C:\Users\xmfaly\.m2\repository&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure></p><p>运行<code>mvn deploy</code>即可部署</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java枚举笔记</title>
      <link href="/2018/01/07/java%E6%9E%9A%E4%B8%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/07/java%E6%9E%9A%E4%B8%BE%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><p>枚举使用关键字<code>enum</code>定义，枚举值一般使用大写字母，值之间用逗号隔开。例如定义一个颜色的枚举。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum  Color &#123;</span><br><span class="line">    YELLOW,RED,GREEN,BLACK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="枚举使用"><a href="#枚举使用" class="headerlink" title="枚举使用"></a>枚举使用</h3><p>枚举可以像常量一样直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Color color = Color.RED;</span><br></pre></td></tr></table></figure></p><h3 id="Enum的常用方法"><a href="#Enum的常用方法" class="headerlink" title="Enum的常用方法"></a>Enum的常用方法</h3><p>枚举是继承自抽象类Enum的，类Enum中有如下几个常用方法     </p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">返回类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ordinal()</td><td style="text-align:center">int</td><td style="text-align:center">返回枚举常量的序数,第一个为0，第二个为1，以此类推</td></tr><tr><td style="text-align:center">compareTo(E o)</td><td style="text-align:center">int</td><td style="text-align:center">返回该枚举的序数 - o的序数</td></tr><tr><td style="text-align:center">getDeclaringClass()</td><td style="text-align:center">Class&lt;?&gt;</td><td style="text-align:center">返回该枚举的Class类型</td></tr><tr><td style="text-align:center">name()</td><td style="text-align:center">String</td><td style="text-align:center">返回该枚举的名字</td></tr><tr><td style="text-align:center">static valueOf(Class<t> enumType, String name)</t></td><td style="text-align:center">static&lt;T extends Enum<t>&gt; T</t></td><td style="text-align:center">返回带指定名称的指定枚举类型的枚举常量</td></tr></tbody></table><h3 id="定制枚举"><a href="#定制枚举" class="headerlink" title="定制枚举"></a>定制枚举</h3><p>可以给枚举定制一些功能，比如可以给上述的颜色枚举增加一个颜色属性（当然也可以增加两个或多个）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public enum  Color &#123;</span><br><span class="line">    YELLOW(&quot;黄色&quot;),RED(&quot;红色&quot;),GREEN(&quot;绿色&quot;),BLACK(&quot;黑色&quot;);</span><br><span class="line">    private String desc;</span><br><span class="line">    Color(String desc)&#123;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种属性是类似于类的构造函数，其中构造函数Color()必须是private。</p><h3 id="和普通类的区别"><a href="#和普通类的区别" class="headerlink" title="和普通类的区别"></a>和普通类的区别</h3><p>大部分类的功能枚举都可以实现，比如定义属性和方法，实现接口，重写方法等。但枚举不能继承，因为编译器自动将我们定义的枚举类继承自Enum抽象类，而java是单继承，所以我们不能在使用自定义的枚举去继承。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Spring Cloud搭建服务注册中心（二）</title>
      <link href="/2017/12/23/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2017/12/23/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>接上篇</p><h3 id="服务提供"><a href="#服务提供" class="headerlink" title="服务提供"></a>服务提供</h3><p>现在我们搭建一个简单的服务，访问 /hello 并传入参数 返回 “hello  xxx” 字符串。<br>先建一个boot工程添加如下依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-producer</span><br><span class="line">server.port=8085</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br></pre></td></tr></table></figure></p><p><code>spring.application.name</code> 服务名<br><code>server.port</code> 该应用端口号<br><code>eureka.client.serviceUrl.defaultZone</code> 服务中心地址<br>在启动类前加上<code>@EnableDiscoveryClient</code>注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProducerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们实现服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello&quot;)</span><br><span class="line">    public Object hello(@RequestParam String name)&#123;</span><br><span class="line">        return &quot;hello &quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>先建一个Boot项目，依赖和服务提供者相同。<br>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-consumer</span><br><span class="line">server.port=8085</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka/</span><br></pre></td></tr></table></figure></p><p>在启动类前加上 <code>@EnableDiscoveryClient和@EnableFeignClients</code>注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用hello的接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name = &quot;spring-cloud-producer&quot;)</span><br><span class="line">public interface HelloRemote &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello&quot;)</span><br><span class="line">    String hello(@RequestParam(name = &quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    HelloRemote helloRemote;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello/&#123;name&#125;&quot;)</span><br><span class="line">    public Object hello(@PathVariable(name = &quot;name&quot;) String name)&#123;</span><br><span class="line">        return helloRemote.hello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决axios post传递参数为空</title>
      <link href="/2017/12/23/%E8%A7%A3%E5%86%B3axios-post%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E4%B8%BA%E7%A9%BA/"/>
      <url>/2017/12/23/%E8%A7%A3%E5%86%B3axios-post%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E4%B8%BA%E7%A9%BA/</url>
      <content type="html"><![CDATA[<p>以前都是用 vue resource，因为官方推荐使用axios，就尝试了一下。但发现使用post方法传递的数据后端接受不到，仔细阅读文档发现自己并没有用错。<br>最后网上找到了答案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import qs from &apos;qs&apos;;</span><br><span class="line">...</span><br><span class="line">axios.post(&apos;post.php&apos;, qs.stringify(&#123;</span><br><span class="line">    a: &apos;1&apos;</span><br><span class="line">&#125;))</span><br><span class="line">.then( ... )</span><br><span class="line">.catch( ... );</span><br></pre></td></tr></table></figure></p><p>原因是axios默认发送数据时，数据格式是Request Payload，而并非我们常用的Form Data格式，后端未必能正常获取到，所以在发送之前，需要使用qs模块对其进行处理。</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决nginx no input file specified</title>
      <link href="/2017/12/22/%E8%A7%A3%E5%86%B3nginx-no-input-file-specified/"/>
      <url>/2017/12/22/%E8%A7%A3%E5%86%B3nginx-no-input-file-specified/</url>
      <content type="html"><![CDATA[<p>一次在搬家<a href="https://www.metinfo.cn/" target="_blank" rel="noopener">metinfo</a>站点的时候遇到的问题，网上提出这个问题的人很多，但是解决办法都是没用的。最后终于在<a href="http://www.cnblogs.com/cosiray/p/5075655.html" target="_blank" rel="noopener">这篇文章</a>下找到解决办法。<br>把<code>fastcgi.conf</code>的<code>fastcgi_param DOCUMENT_ROOT $document_root;</code>注释掉。</p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java设置socket代理</title>
      <link href="/2017/12/22/java%E8%AE%BE%E7%BD%AEsocket%E4%BB%A3%E7%90%86/"/>
      <url>/2017/12/22/java%E8%AE%BE%E7%BD%AEsocket%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>因为一个服务的请求地址被限制死了在服务器上，本地开发非常不方便，本来打算用转发解决的，但是想到服务器上有之前搭建的ss服务，于是查了一下可以直接设置socket代理解决这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String proxyHost = &quot;127.0.0.1&quot;;</span><br><span class="line">String proxyPort = &quot;1080&quot;;</span><br><span class="line"></span><br><span class="line">System.setProperty(&quot;http.proxyHost&quot;, proxyHost);</span><br><span class="line">System.setProperty(&quot;http.proxyPort&quot;, proxyPort);</span><br><span class="line"></span><br><span class="line">System.setProperty(&quot;https.proxyHost&quot;, proxyHost);</span><br><span class="line">System.setProperty(&quot;https.proxyPort&quot;, proxyPort);</span><br></pre></td></tr></table></figure></p><p>其他代理设置方法 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot 读取配置文件中的List数据</title>
      <link href="/2017/12/22/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84List%E6%95%B0%E6%8D%AE/"/>
      <url>/2017/12/22/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84List%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>在一个项目中需要配置一个允许请求的服务器列表，不想把这个列表直接写在代码里，希望写到配置文件里，于是查了一下Spring Boot 如何读取配置文件中的List数据。记录在这里，以后可能还会用到。<br>配置如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">front:</span><br><span class="line">  servers:</span><br><span class="line">    - name: server1</span><br><span class="line">      url: http://server1.com</span><br><span class="line">    - name: server2</span><br><span class="line">      url: http://server2.com</span><br></pre></td></tr></table></figure></p><p>建立Dto<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Server &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String url;</span><br><span class="line">    // setter and getter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置相关读取类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;front&quot;)</span><br><span class="line">public class ServersConfig &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Server&gt; servers = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public List&lt;Server&gt; getServers() &#123;</span><br><span class="line">        return servers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setServers(List&lt;Server&gt; servers) &#123;</span><br><span class="line">        this.servers = servers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的servers 对应配置文件里的servers</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Spring Cloud搭建服务注册中心（一）</title>
      <link href="/2017/12/22/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2017/12/22/%E4%BD%BF%E7%94%A8Spring-Cloud%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring Cloud"></a>什么是Spring Cloud</h3><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h3 id="Spring-Cloud优势"><a href="#Spring-Cloud优势" class="headerlink" title="Spring Cloud优势"></a>Spring Cloud优势</h3><p>Spring Cloud对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用Spring Cloud一站式解决方案能在从容应对业务发展的同时大大减少开发成本。同时，随着近几年微服务架构和Docker容器概念的火爆，也会让Spring Cloud在未来越来越“云”化的软件开发风格中立有一席之地，尤其是在目前五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能会堪比当前Servlet规范的诞生，有效推进服务端软件系统技术水平的进步。<br>以上摘自百度，下面开始正题。</p><h3 id="服务中心"><a href="#服务中心" class="headerlink" title="服务中心"></a>服务中心</h3><p>什么是服务中心？<br>假如一个项目A去调用项目B，没有注册中心的情况下，可以直接调用，如下图<br><img src="/img/8297579-c31876329da35727.png" alt="image.png"><br>如果存在一个服务中心的话，就要A调用服务中心，服务中心调用B，如下图<br><img src="/img/8297579-2233fb488e43a611.png" alt="image.png"><br>这样看起来好像变得麻烦了，但是并不是。假如不是拥有两个项目，是有两百个项目，他们之间相互调用，那么就需要去管理每个项目的服务器所在的ip地址，和端口号。一个项目的宕机或重启，影响的可能是好多的项目。<br>假如使用服务种中心，让每一个项目都到服务中心来注册，那么我们如果想调用其中一个项目的服务，我们只要到服务中心来调用就行。我们并不需要关心这个服务到底是谁提供的。如果想重启某个服务，只需把他从服务中心移除，并不会对其他项目造成影响。<br>好处不仅仅是这些，因为我们把所有的服务都放到了服务中心，我们就可以直接对服务中心订制一些高级功能，比如做监控或负载均衡等。</p><h3 id="搭建服务中心Eureka-Server"><a href="#搭建服务中心Eureka-Server" class="headerlink" title="搭建服务中心Eureka Server"></a>搭建服务中心Eureka Server</h3><p>在Spring Boot项目的基础上，添加如下依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure></p><p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-eureka</span><br><span class="line">server.port=8080</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br></pre></td></tr></table></figure></p><p><code>eureka.client.serviceUrl.defaultZone</code>设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。</p><p>使用的话只需要在Boot的启动程序类加<code>@EnableEurekaServer</code>注解即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>装饰模式</title>
      <link href="/2017/12/15/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/12/15/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>装饰器模式适用于为一个对象额外动态的添加功能，每一个具体的装饰类都是一个功能。<br>类图如下<br><img src="/img/8297579-ce3bbbdebf96766e.png" alt="image.png"></p><p>1.ConcretConponent是需要被装饰的类，ConcretDecorator是装饰类，他们有一个共同的父类Component。<br>2.ConcretDecorator中有ConcretConponent类的引用。<br>3.ConcretDecorator中的operation()中执行ConcretConponent的operation()并添加新的功能。<br>举个例子，一个游戏人物可以学习技能，这个游戏任务就是ConcretConponent，技能就是ConcretDecorator。</p><p>首先定义这个游戏的角色 Role<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Role &#123;</span><br><span class="line">    void learnSkill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义需要具体被装饰的角色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Warlock implements Role &#123;</span><br><span class="line">    public void learnSkill() &#123;</span><br><span class="line">        System.out.println(&quot;术士学习了以下几个技能&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义ConcretDecorator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Skill implements Role &#123;</span><br><span class="line"></span><br><span class="line">    private Role role;</span><br><span class="line"></span><br><span class="line">    public void learnSkill() &#123;</span><br><span class="line">        if (role != null) &#123;</span><br><span class="line">            role.learnSkill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Skill(Role role) &#123;</span><br><span class="line">        this.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义三个具体的技能A B C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Skill_A extends Skill &#123;</span><br><span class="line"></span><br><span class="line">    public Skill_A(Role role) &#123;</span><br><span class="line">        super(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void learnSkill()&#123;</span><br><span class="line">        super.learnSkill();</span><br><span class="line">        System.out.println(&quot;学习了技能 A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Skill_B extends Skill&#123;</span><br><span class="line"></span><br><span class="line">    public Skill_B(Role role) &#123;</span><br><span class="line">        super(role);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void learnSkill()&#123;</span><br><span class="line">        super.learnSkill();</span><br><span class="line">        System.out.println(&quot;学习了技能 B&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Skill_C extends Skill&#123;</span><br><span class="line">    public Skill_C(Role role) &#123;</span><br><span class="line">        super(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void learnSkill() &#123;</span><br><span class="line">        super.learnSkill();</span><br><span class="line">        System.out.println(&quot;学习了技能 C&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Role r = new Warlock();</span><br><span class="line">Skill a = new Skill_A(r);</span><br><span class="line">Skill b = new Skill_B(a);</span><br><span class="line">b.learnSkill();</span><br></pre></td></tr></table></figure></p><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">术士学习了以下几个技能</span><br><span class="line">学习了技能 A</span><br><span class="line">学习了技能 B</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>警察小偷问题</title>
      <link href="/2017/12/06/%E8%AD%A6%E5%AF%9F%E5%B0%8F%E5%81%B7%E9%97%AE%E9%A2%98/"/>
      <url>/2017/12/06/%E8%AD%A6%E5%AF%9F%E5%B0%8F%E5%81%B7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>警察和小偷需要跑完200米距离，但两个人之间用一个3米的手铐铐住，请实现一个模型，用来描述警察和小偷跑步的情况。<br>（1）使用线程表现无序性。<br>（2）使用ncurse表现裕兴界面。<br>这是一个基本的生产者消费者模型。等待的条件是两人之间的距离不要超过3米。换句话说小偷在跑之前要判断是否小偷比警察的距离多3，如果是那小偷就不能再跑，就要等待警察进程跑。警察进程同样的道理。</p><p>完整代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;curses.h&gt;</span><br><span class="line">#include &quot;pthread.h&quot;</span><br><span class="line"></span><br><span class="line">//警察和小偷之间的距离</span><br><span class="line">#define DISTANCE 3</span><br><span class="line">//警察纵坐标</span><br><span class="line">#define PY 10</span><br><span class="line"></span><br><span class="line">//小偷纵坐标</span><br><span class="line">#define TY 12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct prodcons</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_t lock;</span><br><span class="line">int polPos,thiefPos;</span><br><span class="line">pthread_cond_t notempty;</span><br><span class="line">pthread_cond_t notfull;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct prodcons buffer;</span><br><span class="line"></span><br><span class="line">void init(struct prodcons *b)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_init(&amp;b-&gt;lock,NULL);</span><br><span class="line">pthread_cond_init(&amp;b-&gt;notempty,NULL);</span><br><span class="line">pthread_cond_init(&amp;b-&gt;notfull,NULL);</span><br><span class="line">b-&gt;polPos=0;</span><br><span class="line">b-&gt;thiefPos=0;</span><br><span class="line"></span><br><span class="line">//init ncurses</span><br><span class="line">initscr();</span><br><span class="line">crmode();</span><br><span class="line">noecho();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void prun(struct prodcons *b)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;b-&gt;lock);</span><br><span class="line">while(b-&gt;polPos - b-&gt;thiefPos &gt;= DISTANCE)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;wait for t run\n&quot;);</span><br><span class="line">pthread_cond_wait(&amp;b-&gt;notfull,&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line">b-&gt;polPos++;</span><br><span class="line"></span><br><span class="line">clear();</span><br><span class="line">mvaddch(PY,b-&gt;polPos,&apos;P&apos;);</span><br><span class="line">mvaddch(TY,b-&gt;thiefPos,&apos;T&apos;);</span><br><span class="line">sleep(1);</span><br><span class="line">refresh();</span><br><span class="line"></span><br><span class="line">if(b-&gt;polPos == 200)&#123;</span><br><span class="line">printf(&quot;p run over\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">pthread_cond_signal(&amp;b-&gt;notempty);</span><br><span class="line">pthread_mutex_unlock(&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void trun(struct prodcons *b)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;b-&gt;lock);</span><br><span class="line">while( b-&gt;thiefPos -  b-&gt;polPos &gt;= DISTANCE)</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;wait for p run\n&quot;);</span><br><span class="line">  pthread_cond_wait(&amp;b-&gt;notempty,&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line">b-&gt;thiefPos++;</span><br><span class="line"></span><br><span class="line">clear();</span><br><span class="line">mvaddch(TY,b-&gt;thiefPos,&apos;T&apos;);</span><br><span class="line">mvaddch(PY,b-&gt;polPos,&apos;P&apos;);</span><br><span class="line"></span><br><span class="line">clrtoeol();</span><br><span class="line">sleep(1);</span><br><span class="line">refresh();</span><br><span class="line"></span><br><span class="line">//printf(&quot;t poistion is %d\n&quot;, b-&gt;thiefPos);</span><br><span class="line">if(b-&gt;thiefPos == 200)&#123;</span><br><span class="line">printf(&quot;p run over\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">pthread_cond_signal(&amp;b-&gt;notfull);</span><br><span class="line">pthread_mutex_unlock(&amp;b-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void * p()</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">prun(&amp;buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void * t()</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">trun(&amp;buffer);</span><br><span class="line">&#125;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">pthread_t th_a,th_b;</span><br><span class="line">void *retval;</span><br><span class="line">init(&amp;buffer);</span><br><span class="line">pthread_create(&amp;th_a,NULL,p,NULL);</span><br><span class="line">pthread_create(&amp;th_b,NULL,t,NULL);</span><br><span class="line">pthread_join(th_a,&amp;retval);</span><br><span class="line">pthread_join(th_b,&amp;retval);</span><br><span class="line">endwin();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>自己实现一个简单的ioc容器</title>
      <link href="/2017/11/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ioc%E5%AE%B9%E5%99%A8/"/>
      <url>/2017/11/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ioc%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>某节实验课的任务是练习使用spring的ioc，因为之前用过，感觉也没啥意思，就想了以下他的实现原理，然后自己使用java反射机制实现了一个简单的ioc容器。以下对原理进行简单的说明，完整的代码及用法详见<a href="https://github.com/xmfaly/simpleioc" target="_blank" rel="noopener">xmfaly/simpleioc</a></p><p>首先定义@Autowired注解用于自动注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Autowired &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; value() default Class.class;</span><br><span class="line"></span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>建立一个<code>Container</code>容器类<br>建立两个<code>map</code>分别保存类名和bean、对象名和类名的关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 保存所有bean 格式为 类名 : bean</span><br><span class="line">private Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">// 存储对象和类名的关系 对象名 ：bean</span><br><span class="line">private Map&lt;String, Object&gt; beanKeys;</span><br></pre></td></tr></table></figure></p><p>这里为了安全起见，使用<code>ConcurrentHashMap()</code>实例化这两个<code>map</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Container()&#123;</span><br><span class="line">    beans = new ConcurrentHashMap&lt;String, Object&gt;();</span><br><span class="line">    beanKeys = new ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>向容器内注册bean，这里我重载了三种形式，当然也可以更多，关键看使用的场景了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 以class的形式注册</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(Class&lt;?&gt; cls) &#123;</span><br><span class="line">      String className = cls.getName();</span><br><span class="line">      Object bean = null;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">          bean = cls.newInstance();</span><br><span class="line">      &#125; catch (InstantiationException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      beans.put(className, bean);</span><br><span class="line"></span><br><span class="line">      //不指定对象名的情况下类名和对象名相同</span><br><span class="line">      beanKeys.put(className, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 以bean的形式注册</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(Object bean) &#123;</span><br><span class="line">      String className = bean.getClass().getName();</span><br><span class="line">      beans.put(className, bean);</span><br><span class="line">      beanKeys.put(className, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 以带对象名的class形式注册</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(String name, Class&lt;?&gt; cls) &#123;</span><br><span class="line">      String className = cls.getName();</span><br><span class="line">      Object bean = null;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">          bean = cls.newInstance();</span><br><span class="line">      &#125; catch (InstantiationException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      beans.put(className, bean);</span><br><span class="line">      beanKeys.put(name, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 注册一个带名称的Bean到容器中</span><br><span class="line">   */</span><br><span class="line">  public Object registerBean(String name, Object bean) &#123;</span><br><span class="line">      String className = bean.getClass().getName();</span><br><span class="line">      beans.put(className, bean);</span><br><span class="line">      beanKeys.put(name, bean);</span><br><span class="line">      return bean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>从容器中取出bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 通过 Class 对象获取bean</span><br><span class="line">  */</span><br><span class="line"> public &lt;T&gt; T getBean(Class&lt;?&gt; cls) &#123;</span><br><span class="line">     String className = cls.getName();</span><br><span class="line">     Object object = beans.get(className);</span><br><span class="line">     if (null != object) &#123;</span><br><span class="line">         return (T) object;</span><br><span class="line">     &#125;</span><br><span class="line">     return null;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * 通过对象名获取 bean</span><br><span class="line">  */</span><br><span class="line"> public &lt;T&gt; T getBeanByName(String name) &#123;</span><br><span class="line">     Object object = beanKeys.get(name);;</span><br><span class="line">     if (null != object) &#123;</span><br><span class="line">         return (T) object;</span><br><span class="line">     &#125;</span><br><span class="line">     return null;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>在容器启动的时候遍历容器内的所有bean对bean进行注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 初始化</span><br><span class="line">   */</span><br><span class="line">  public void init() &#123;</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = beans.entrySet().iterator();</span><br><span class="line">      while (it.hasNext()) &#123;</span><br><span class="line">          Map.Entry&lt;String, Object&gt; entry = it.next();</span><br><span class="line">          Object object = entry.getValue();</span><br><span class="line">          injection(object);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>其中使用到的方法的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * 注入</span><br><span class="line"> */</span><br><span class="line">public void injection(Object object) &#123;</span><br><span class="line">    Field[] fields = object.getClass().getDeclaredFields();</span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line">        //遍历所有属性寻找@Autowired注解</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            Autowired autowired = field.getAnnotation(Autowired.class);</span><br><span class="line">            if (null != autowired) &#123;</span><br><span class="line"></span><br><span class="line">                // 要注入的字段</span><br><span class="line">                Object autoWritedField = null;</span><br><span class="line">                String name = autowired.name();</span><br><span class="line"></span><br><span class="line">                if (!name.equals(&quot;&quot;)) &#123;</span><br><span class="line">                    Object bean = beanKeys.get(name);</span><br><span class="line">                    if (null != bean ) &#123;</span><br><span class="line">                        autoWritedField = bean;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    if (null == autoWritedField) &#123;</span><br><span class="line">                        throw new RuntimeException(&quot;Unable to autoWrited &quot; + name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (autowired.value() == Class.class) &#123;</span><br><span class="line">                        //该属性的Type</span><br><span class="line">                        autoWritedField = recursiveAssembly(field.getType());</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 指定装配的类</span><br><span class="line">                        autoWritedField = this.getBean(autowired.value());</span><br><span class="line">                        if (null == autoWritedField) &#123;</span><br><span class="line">                            autoWritedField = recursiveAssembly(autowired.value());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (null == autoWritedField) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Unable to autoWrited &quot; + field.getType().getCanonicalName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                boolean accessible = field.isAccessible();</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                field.set(object, autoWritedField);</span><br><span class="line">                field.setAccessible(accessible);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (SecurityException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 修复没有指定注解及默认注入的情况</span><br><span class="line"> */</span><br><span class="line">private Object recursiveAssembly(Class&lt;?&gt; cls) &#123;</span><br><span class="line">    if (null != cls) &#123;</span><br><span class="line">        return this.registerBean(cls);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写个测试测试3中注入类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class TestIoc &#123;</span><br><span class="line"></span><br><span class="line">    class A&#123;</span><br><span class="line"></span><br><span class="line">        @Autowired(name = &quot;myvalue&quot;)</span><br><span class="line">        private Integer value;</span><br><span class="line"></span><br><span class="line">        @Autowired(name = &quot;str&quot;)</span><br><span class="line">        private String myStr;</span><br><span class="line"></span><br><span class="line">        @Autowired(value = String.class)</span><br><span class="line">        private String myStr2;</span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line">        public String myStr3;</span><br><span class="line"></span><br><span class="line">        public void show()&#123;</span><br><span class="line">            System.out.println(&quot;value: &quot; + value);</span><br><span class="line">            System.out.println(&quot;str: &quot; + myStr);</span><br><span class="line">            System.out.println(myStr2 == null);</span><br><span class="line">            System.out.println(myStr3 == null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        Container c = new Container();</span><br><span class="line">        c.registerBean(&quot;a&quot;,new A());</span><br><span class="line">        c.registerBean(&quot;str&quot;,&quot;注入成功&quot;);</span><br><span class="line">        c.registerBean(&quot;myvalue&quot;,2333);</span><br><span class="line">        c.initWired();</span><br><span class="line">        A a = c.getBeanByName(&quot;a&quot;);</span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value: 2333</span><br><span class="line">str: 注入成功</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java反射机制</title>
      <link href="/2017/11/26/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/11/26/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。<br>通过Java的反射机制可以获取以下内容：</p><h4 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h4><p>可以直接通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如获取String的class对象</span><br></pre></td></tr></table></figure></p><p>Class cls = String.class;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也可以通过类名进行获取</span><br></pre></td></tr></table></figure></p><p>Class cls = Class.forName(“java.lang.String”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 类名</span><br><span class="line">可以通过class对象的```getName()```方法获取类名，```getSimpleName()```获取不带包名的类名</span><br></pre></td></tr></table></figure></p><p>//带包类名<br>String name = cls.getName();</p><p>//不带包名的类名<br>String simpleName = cls.getSimpleName();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 方法</span><br></pre></td></tr></table></figure></p><p>Method[] methods = cls.getMethods();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```getMethods()```可以获取到该类中所有的public方法</span><br><span class="line">也可以获取到单个方法</span><br></pre></td></tr></table></figure></p><p>Method method = cls.getMethod(“method”,new Class[]{String.class});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个参数是方法的名字，第二个参数是方法的参数，这里是以只有一个string类型的参数为例。如果没有参数传入```null```即可</span><br><span class="line">如果已经知道方法，也可以获取到方法的参数</span><br></pre></td></tr></table></figure></p><p>Class[] parameterTypes = method.getParameterTypes();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当然也可以返回方法的返回类型</span><br></pre></td></tr></table></figure></p><p>Class returnType = method.getReturnType();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以通过```invoke()```方法来调用方法需要传2个参数，第一个参数是调用方法的对象，如果是静态方法可以传入```null```第二个参数是方法需要的参数列表</span><br></pre></td></tr></table></figure></p><p>Object returnValue = method.invoke(null, “parameter”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 构造方法</span><br><span class="line">构造方法和普通方法类似</span><br></pre></td></tr></table></figure></p><p>Constructor[] constructors = cls.getConstructors();<br>Constructor constructor = cls.getConstructor(new Class[]{String.class});<br>Class[] parameterTypes = constructor.getParameterTypes();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用```constructor```的```newInstance()```方法实例一个对象</span><br></pre></td></tr></table></figure></p><p>String str = (String) constructor.newInstance(“test”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 属性</span><br></pre></td></tr></table></figure></p><p>Field[] fields = cls.getFields();<br>Field field = cls.getField(“name”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以通过```getFields()```方法获取所有的```public```属性，```getField()```获取指定的方法，当然也只能获取```public```的属性。</span><br><span class="line">在反射中也可以获取```private```的属性和方法以下分别进行演示</span><br><span class="line">#### 包</span><br></pre></td></tr></table></figure></p><p>Package pack = cls.getPackage();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 父类</span><br><span class="line">java是单继承最多一个父类</span><br></pre></td></tr></table></figure></p><p>Class supercls = cls.getSuperclass();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 实现的接口</span><br><span class="line">一个类可以实现多个接口</span><br></pre></td></tr></table></figure></p><p>Class[] interfaces = cls.getInterfaces();<br><code>`</code><br>这里只会返回该类实现的接口，而不会返回父类实现的接口</p><p>文章参考<br><a href="https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990?fr=aladdin</a><br><a href="http://www.jianshu.com/p/2315dda64ad2" target="_blank" rel="noopener">http://www.jianshu.com/p/2315dda64ad2</a></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx反向代理尝试</title>
      <link href="/2017/11/10/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B0%9D%E8%AF%95/"/>
      <url>/2017/11/10/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B0%9D%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>和我一起做一个项目的前端小伙伴需要一个https的接口，后端是java做的，因为某些原因不能直接在java项目上配置https，最后想到用反向代理来解决这个问题。<br>用户访问代理的服务器，然后由代理服务器转发给后台，并转发结构给用户。我在代理服务器上配置https就解决了接口https的需求。<br>Nginx配置反向代理很简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /api&#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080/api ;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只需要这样就可以把访问服务器的 <code>/api</code>请求全部转发到 <code>http://127.0.0.1:8080/api</code></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring boot 配置 https|ssl</title>
      <link href="/2017/11/08/spring-boot-%E9%85%8D%E7%BD%AE-https-ssl/"/>
      <url>/2017/11/08/spring-boot-%E9%85%8D%E7%BD%AE-https-ssl/</url>
      <content type="html"><![CDATA[<p>ssl证书我选择了免费的<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a></p><h3 id="1-下载脚本并生成证书"><a href="#1-下载脚本并生成证书" class="headerlink" title="1.下载脚本并生成证书"></a>1.下载脚本并生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># git clone https://github.com/letsencrypt/letsencrypt</span><br><span class="line"># cd letsencrypt</span><br><span class="line"># ./letsencrypt-auto certonly --standalone --email 邮箱 -d 域名</span><br></pre></td></tr></table></figure><p>因为网络问题pip可能需要换源，请自行网上查找换源方法。</p><h3 id="2-设置自动延期"><a href="#2-设置自动延期" class="headerlink" title="2.设置自动延期"></a>2.设置自动延期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./letsencrypt-auto --renew certonly --email 邮箱 -d 域名</span><br></pre></td></tr></table></figure><h3 id="3-查看证书"><a href="#3-查看证书" class="headerlink" title="3.查看证书"></a>3.查看证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/letsencrypt/live/</span><br><span class="line"># cd 域名</span><br><span class="line">fullchain.pem 为证书  privatkey.pem 为密钥</span><br></pre></td></tr></table></figure><h3 id="4-生成-jks证书"><a href="#4-生成-jks证书" class="headerlink" title="4.生成.jks证书"></a>4.生成.jks证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name tomcat</span><br><span class="line"># keytool -importkeystore -deststorepass &apos;yourJKSpass&apos; -destkeypass &apos;yourKeyPass&apos; -destkeystore MyDSKeyStore.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass &apos;yourPKCS12pass&apos; -alias tomcat</span><br></pre></td></tr></table></figure><p>第一步会让你输入密码，对应第二步中的yourPKCS12pass 。第二步中的前两个密码自己设置一下并记好，下面的会用到。</p><h3 id="5-配置spring-boot"><a href="#5-配置spring-boot" class="headerlink" title="5.配置spring-boot"></a>5.配置spring-boot</h3><p>将.jsk文件放到<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">server.port = 8443</span><br><span class="line">server.ssl.key-store = classpath:MyDSKeyStore.jks</span><br><span class="line">server.ssl.key-store-password = yourJKSpass</span><br><span class="line">server.ssl.key-password = yourKeyPass</span><br></pre></td></tr></table></figure></p><p>此时服务器支持https，但只支持https<br>可以配置同时支持htttp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Integer port() &#123;</span><br><span class="line">    return 8080;</span><br><span class="line">    //return SocketUtils.findAvailableTcpPort();</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public EmbeddedServletContainerFactory servletContainer() &#123;</span><br><span class="line">    TomcatEmbeddedServletContainerFactory tomcat = new   TomcatEmbeddedServletContainerFactory();</span><br><span class="line">    tomcat.addAdditionalTomcatConnectors(createStandardConnector());</span><br><span class="line">    return tomcat;</span><br><span class="line">&#125;</span><br><span class="line">private Connector createStandardConnector() &#123;</span><br><span class="line">    Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class="line">    connector.setPort(port());</span><br><span class="line">    return connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样 8080端口是http 8443端口是https<br>也可以设置http自动重定向到https<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">   private int port;</span><br><span class="line">@Bean</span><br><span class="line">   public EmbeddedServletContainerFactory servletContainer() &#123;</span><br><span class="line">       TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           protected void postProcessContext(Context context) &#123;</span><br><span class="line">               SecurityConstraint securityConstraint = new SecurityConstraint();</span><br><span class="line">               securityConstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</span><br><span class="line">               SecurityCollection collection = new SecurityCollection();</span><br><span class="line">               collection.addPattern(&quot;/*&quot;);</span><br><span class="line">               securityConstraint.addCollection(collection);</span><br><span class="line">               context.addConstraint(securityConstraint);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       tomcat.addAdditionalTomcatConnectors(initiateHttpConnector());</span><br><span class="line">       return tomcat;</span><br><span class="line">   &#125;</span><br><span class="line">   private Connector initiateHttpConnector() &#123;</span><br><span class="line">       Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class="line">       connector.setScheme(&quot;http&quot;);</span><br><span class="line">       connector.setPort(8080);</span><br><span class="line">       connector.setSecure(false);</span><br><span class="line">       connector.setRedirectPort(port);</span><br><span class="line">       return connector;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java工具类整理</title>
      <link href="/2017/10/20/Java%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%95%B4%E7%90%86/"/>
      <url>/2017/10/20/Java%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>以下整理常用的java工具类。</p><h3 id="二维码生成和解析-网上很多接口也很方便"><a href="#二维码生成和解析-网上很多接口也很方便" class="headerlink" title="二维码生成和解析(网上很多接口也很方便)"></a>二维码生成和解析(网上很多接口也很方便)</h3><p>使用google的zxing<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">import com.google.zxing.*;</span><br><span class="line">import com.google.zxing.Reader;</span><br><span class="line">import com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line">import com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line">import com.google.zxing.common.HybridBinarizer;</span><br><span class="line">import com.google.zxing.multi.GenericMultipleBarcodeReader;</span><br><span class="line">import com.google.zxing.multi.MultipleBarcodeReader;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.nio.file.FileSystems;</span><br><span class="line">import java.nio.file.Path;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 二维码生成工具类</span><br><span class="line"> *</span><br><span class="line"> * @author KisChang</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2015年12月03日</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class ZXingUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static enum ImageType &#123;</span><br><span class="line">        JPEG(&quot;jpeg&quot;),PNG(&quot;png&quot;),GIF(&quot;gif&quot;);</span><br><span class="line">        private String value;</span><br><span class="line"></span><br><span class="line">        ImageType(String value) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**编码*/</span><br><span class="line">    public static class Encode &#123;</span><br><span class="line"></span><br><span class="line">        private static Map&lt;EncodeHintType, Object&gt; HINTS;</span><br><span class="line">        static &#123;</span><br><span class="line">            HINTS = new EnumMap&lt;EncodeHintType,Object&gt;(EncodeHintType.class);</span><br><span class="line">            HINTS.put(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * 生成二维码</span><br><span class="line">         * @param widthAndHeight    高宽</span><br><span class="line">         * @param content           二维码内容</span><br><span class="line">         * @param os                输出流</span><br><span class="line">         */</span><br><span class="line">        public static void buildQRCode(int widthAndHeight, String content, OutputStream os, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight, HINTS);// 生成矩阵</span><br><span class="line">            MatrixToImageWriter.writeToStream(bitMatrix, imageType.getValue(), os);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void buildQRCode(String content, OutputStream os, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            buildQRCode(200, content, os, imageType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 生成二维码</span><br><span class="line">         * @param widthAndHeight    高宽</span><br><span class="line">         * @param content           二维码内容</span><br><span class="line">         * @param filePath          输出目录</span><br><span class="line">         * @param fileName          输出文件名</span><br><span class="line">         * @param imageType         输出文件类型</span><br><span class="line">         */</span><br><span class="line">        public static void buildQRCode(int widthAndHeight, String content, String filePath, String fileName, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(content,</span><br><span class="line">                    BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight, HINTS);</span><br><span class="line">            Path path = FileSystems.getDefault().getPath(filePath, fileName);</span><br><span class="line">            MatrixToImageWriter.writeToPath(bitMatrix, imageType.getValue(), path);// 输出图像</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void buildQRCode(String content, String filePath, String fileName, ImageType imageType) throws WriterException, IOException &#123;</span><br><span class="line">            buildQRCode(200, content,filePath,fileName,imageType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**解码*/</span><br><span class="line">    public static class Decode &#123;</span><br><span class="line"></span><br><span class="line">        private static final Map&lt;DecodeHintType,Object&gt; HINTS;</span><br><span class="line">        private static final Map&lt;DecodeHintType,Object&gt; HINTS_PURE;</span><br><span class="line">        static &#123;</span><br><span class="line">            HINTS = new EnumMap&lt;DecodeHintType,Object&gt;(DecodeHintType.class);</span><br><span class="line">            HINTS.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);</span><br><span class="line">            HINTS.put(DecodeHintType.POSSIBLE_FORMATS, EnumSet.allOf(BarcodeFormat.class));</span><br><span class="line">            HINTS_PURE = new EnumMap&lt;DecodeHintType,Object&gt;(HINTS);</span><br><span class="line">            HINTS_PURE.put(DecodeHintType.PURE_BARCODE, Boolean.TRUE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 解析二维码</span><br><span class="line">         */</span><br><span class="line">        public static Collection&lt;Result&gt; readQRCode(File qrCode) throws ReaderException, IOException &#123;</span><br><span class="line">            FileInputStream inputStream = new FileInputStream(qrCode);</span><br><span class="line">            return readQRCode(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static Collection&lt;Result&gt; readQRCode(InputStream inputStream) throws ReaderException, IOException &#123;</span><br><span class="line">            LuminanceSource source = new BufferedImageLuminanceSource(ImageIO.read(inputStream));</span><br><span class="line">            BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(source));</span><br><span class="line"></span><br><span class="line">            Collection&lt;Result&gt; results = new ArrayList&lt;Result&gt;(1);</span><br><span class="line">            ReaderException savedException = null;</span><br><span class="line">            Reader reader = new MultiFormatReader();</span><br><span class="line">            try &#123;</span><br><span class="line">                //寻找多个条码</span><br><span class="line">                MultipleBarcodeReader multiReader = new GenericMultipleBarcodeReader(reader);</span><br><span class="line">                Result[] theResults = multiReader.decodeMultiple(binaryBitmap, HINTS);</span><br><span class="line">                if (theResults != null) &#123;</span><br><span class="line">                    results.addAll(Arrays.asList(theResults));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (ReaderException re) &#123;</span><br><span class="line">                savedException = re;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (results.isEmpty()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //寻找纯条码</span><br><span class="line">                    Result theResult = reader.decode(binaryBitmap, HINTS_PURE);</span><br><span class="line">                    if (theResult != null) &#123;</span><br><span class="line">                        results.add(theResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ReaderException re) &#123;</span><br><span class="line">                    savedException = re;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (results.isEmpty()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //寻找图片中的正常条码</span><br><span class="line">                    Result theResult = reader.decode(binaryBitmap, HINTS);</span><br><span class="line">                    if (theResult != null) &#123;</span><br><span class="line">                        results.add(theResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ReaderException re) &#123;</span><br><span class="line">                    savedException = re;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (results.isEmpty()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //再次尝试其他特殊处理</span><br><span class="line">                    BinaryBitmap hybridBitmap = new BinaryBitmap(new HybridBinarizer(source));</span><br><span class="line">                    Result theResult = reader.decode(hybridBitmap, HINTS);</span><br><span class="line">                    if (theResult != null) &#123;</span><br><span class="line">                        results.add(theResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ReaderException re) &#123;</span><br><span class="line">                    savedException = re;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (results.isEmpty())&#123;</span><br><span class="line">                throw savedException;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return results;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public static Result readQRCodeResult(File qrCode) throws ReaderException, IOException &#123;</span><br><span class="line">            FileInputStream inputStream = new FileInputStream(qrCode);</span><br><span class="line">            return readQRCodeResult(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line">        public static Result readQRCodeResult(InputStream inputStream) throws ReaderException, IOException &#123;</span><br><span class="line">            Collection&lt;Result&gt; results = readQRCode(inputStream);</span><br><span class="line">            if (!results.isEmpty())&#123;</span><br><span class="line">                //寻找结果集中非空的结果</span><br><span class="line">                for (Result result : results)&#123;</span><br><span class="line">                    if (result != null)&#123;</span><br><span class="line">                        return result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            throw NotFoundException.getNotFoundInstance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.security.MessageDigest;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line">public class MD5 &#123;</span><br><span class="line"></span><br><span class="line">    public static String getMD5(String str) throws NoSuchAlgorithmException &#123;</span><br><span class="line"></span><br><span class="line">        // 生成一个MD5加密计算摘要</span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">        // 计算md5函数</span><br><span class="line">        md.update(str.getBytes());</span><br><span class="line">        // digest()最后确定返回md5 hash值，返回值为8为字符串。因为md5 hash值是16位的hex值，实际上就是8位的字符</span><br><span class="line">        // BigInteger函数则将8位的字符串转换成16位hex值，用字符串来表示；得到字符串形式的hash值</span><br><span class="line">        return new BigInteger(1, md.digest()).toString(16);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取excel"><a href="#读取excel" class="headerlink" title="读取excel"></a>读取excel</h3><p>依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.17-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.16-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line">import org.apache.poi.ss.usermodel.*;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.text.DecimalFormat;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class ReadExcelUtils &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line">    private Workbook wb;</span><br><span class="line">    private Sheet sheet;</span><br><span class="line">    private Row row;</span><br><span class="line">    public ReadExcelUtils(String filepath) &#123;</span><br><span class="line">        if(filepath==null)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String ext = filepath.substring(filepath.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        try &#123;</span><br><span class="line">            InputStream is = new FileInputStream(filepath);</span><br><span class="line">            if(&quot;.xls&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new HSSFWorkbook(is);</span><br><span class="line">            &#125;else if(&quot;.xlsx&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new XSSFWorkbook(is);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                wb=null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            logger.error(&quot;FileNotFoundException&quot;, e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;IOException&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel表格表头的内容</span><br><span class="line">     * @return String 表头内容的数组</span><br><span class="line">     */</span><br><span class="line">    public String[] readExcelTitle() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        // 标题总列数</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line">        String[] title = new String[colNum];</span><br><span class="line">        for (int i = 0; i &lt; colNum; i++) &#123;</span><br><span class="line">            // title[i] = getStringCellValue(row.getCell((short) i));</span><br><span class="line">            title[i] = row.getCell(i).getStringCellValue();</span><br><span class="line">        &#125;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel数据内容</span><br><span class="line">     * @return Map 包含单元格数据内容的Map对象</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; readExcelContent() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; content = new HashMap&lt;Integer, Map&lt;Integer,Object&gt;&gt;();</span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        // 得到总行数</span><br><span class="line">        int rowNum = sheet.getLastRowNum();</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line">        // 正文内容应该从第二行开始,第一行为表头的标题</span><br><span class="line">        for (int i = 1; i &lt;= rowNum; i++) &#123;</span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            int j = 0;</span><br><span class="line">            Map&lt;Integer,Object&gt; cellValue = new HashMap&lt;Integer, Object&gt;();</span><br><span class="line">            while (j &lt; colNum) &#123;</span><br><span class="line">                Object obj = getCellFormatValue(row.getCell(j));</span><br><span class="line">                cellValue.put(j, obj);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            content.put(i, cellValue);</span><br><span class="line">        &#125;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 根据Cell类型设置数据</span><br><span class="line">     * @param cell</span><br><span class="line">     * @return Object</span><br><span class="line">     */</span><br><span class="line">    private Object getCellFormatValue(Cell cell) &#123;</span><br><span class="line">        Object cellvalue = &quot;&quot;;</span><br><span class="line">        if (cell != null) &#123;</span><br><span class="line">            // 判断当前Cell的Type</span><br><span class="line">            switch (cell.getCellType()) &#123;</span><br><span class="line">                case Cell.CELL_TYPE_NUMERIC:// 如果当前Cell的Type为NUMERIC</span><br><span class="line">                case Cell.CELL_TYPE_FORMULA: &#123;</span><br><span class="line">                    // 判断当前的cell是否为Date</span><br><span class="line">                    if (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                        Date date = cell.getDateCellValue();</span><br><span class="line">                        SimpleDateFormat dateformat=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">                        cellvalue = dateformat.format(date);</span><br><span class="line"></span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 如果是纯数字</span><br><span class="line">                        // 取得当前Cell的数值</span><br><span class="line">                        DecimalFormat df = new DecimalFormat(&quot;0&quot;);</span><br><span class="line">                        cellvalue = df.format(cell.getNumericCellValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                case Cell.CELL_TYPE_STRING:// 如果当前Cell的Type为STRING</span><br><span class="line">                    // 取得当前的Cell字符串</span><br><span class="line">                    cellvalue = cell.getRichStringCellValue().getString();</span><br><span class="line">                    break;</span><br><span class="line">                default:// 默认的Cell值</span><br><span class="line">                    cellvalue = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cellvalue = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return cellvalue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="加密工具类"><a href="#加密工具类" class="headerlink" title="加密工具类"></a>加密工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">import java.security.Key;</span><br><span class="line">import java.security.spec.AlgorithmParameterSpec;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.SecretKeyFactory;</span><br><span class="line">import javax.crypto.spec.DESKeySpec;</span><br><span class="line">import javax.crypto.spec.IvParameterSpec;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 加密解密工具包</span><br><span class="line"> */</span><br><span class="line">public class CyptoUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static final String ALGORITHM_DES = &quot;DES/CBC/PKCS5Padding&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * DES算法，加密</span><br><span class="line">     *</span><br><span class="line">     * @param data 待加密字符串</span><br><span class="line">     * @param key  加密私钥，长度不能够小于8位</span><br><span class="line">     * @return 加密后的字节数组，一般结合Base64编码使用</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String encode(String key,String data) &#123;</span><br><span class="line">        if(data == null)</span><br><span class="line">            return null;</span><br><span class="line">        try&#123;</span><br><span class="line">            DESKeySpec dks = new DESKeySpec(key.getBytes());</span><br><span class="line">            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DES&quot;);</span><br><span class="line">            //key的长度不能够小于8位字节</span><br><span class="line">            Key secretKey = keyFactory.generateSecret(dks);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM_DES);</span><br><span class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;12345678&quot;.getBytes());</span><br><span class="line">            AlgorithmParameterSpec paramSpec = iv;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKey,paramSpec);</span><br><span class="line">            byte[] bytes = cipher.doFinal(data.getBytes());</span><br><span class="line">            return byte2hex(bytes);</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * DES算法，解密</span><br><span class="line">     *</span><br><span class="line">     * @param data 待解密字符串</span><br><span class="line">     * @param key  解密私钥，长度不能够小于8位</span><br><span class="line">     * @return 解密后的字节数组</span><br><span class="line">     * @throws Exception 异常</span><br><span class="line">     */</span><br><span class="line">    public static String decode(String key,String data) &#123;</span><br><span class="line">        if(data == null)</span><br><span class="line">            return null;</span><br><span class="line">        try &#123;</span><br><span class="line">            DESKeySpec dks = new DESKeySpec(key.getBytes());</span><br><span class="line">            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DES&quot;);</span><br><span class="line">            //key的长度不能够小于8位字节</span><br><span class="line">            Key secretKey = keyFactory.generateSecret(dks);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM_DES);</span><br><span class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;12345678&quot;.getBytes());</span><br><span class="line">            AlgorithmParameterSpec paramSpec = iv;</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKey, paramSpec);</span><br><span class="line">            return new String(cipher.doFinal(hex2byte(data.getBytes())));</span><br><span class="line">        &#125; catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 二行制转字符串</span><br><span class="line">     * @param b</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String byte2hex(byte[] b) &#123;</span><br><span class="line">        StringBuilder hs = new StringBuilder();</span><br><span class="line">        String stmp;</span><br><span class="line">        for (int n = 0; b!=null &amp;&amp; n &lt; b.length; n++) &#123;</span><br><span class="line">            stmp = Integer.toHexString(b[n] &amp; 0XFF);</span><br><span class="line">            if (stmp.length() == 1)</span><br><span class="line">                hs.append(&apos;0&apos;);</span><br><span class="line">            hs.append(stmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return hs.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static byte[] hex2byte(byte[] b) &#123;</span><br><span class="line">        if((b.length%2)!=0)</span><br><span class="line">            throw new IllegalArgumentException();</span><br><span class="line">        byte[] b2 = new byte[b.length/2];</span><br><span class="line">        for (int n = 0; n &lt; b.length; n+=2) &#123;</span><br><span class="line">            String item = new String(b,n,2);</span><br><span class="line">            b2[n/2] = (byte)Integer.parseInt(item,16);</span><br><span class="line">        &#125;</span><br><span class="line">        return b2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.zip.*;</span><br><span class="line"></span><br><span class="line">public class CompressUtil &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static final int BUFFER = 8192;</span><br><span class="line"></span><br><span class="line">    public static void compress(String srcPath , String dstPath) throws IOException &#123;</span><br><span class="line">        File srcFile = new File(srcPath);</span><br><span class="line">        File dstFile = new File(dstPath);</span><br><span class="line">        if (!srcFile.exists()) &#123;</span><br><span class="line">            throw new FileNotFoundException(srcPath + &quot;不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream out = null;</span><br><span class="line">        ZipOutputStream zipOut = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            out = new FileOutputStream(dstFile);</span><br><span class="line">            CheckedOutputStream cos = new CheckedOutputStream(out,new CRC32());</span><br><span class="line">            zipOut = new ZipOutputStream(cos);</span><br><span class="line">            String baseDir = &quot;&quot;;</span><br><span class="line">            compress(srcFile, zipOut, baseDir);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            if(null != zipOut)&#123;</span><br><span class="line">                zipOut.close();</span><br><span class="line">                out = null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(null != out)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void compress(File file, ZipOutputStream zipOut, String baseDir) throws IOException&#123;</span><br><span class="line">        if (file.isDirectory()) &#123;</span><br><span class="line">            compressDirectory(file, zipOut, baseDir);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            compressFile(file, zipOut, baseDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 压缩一个目录 */</span><br><span class="line">    private static void compressDirectory(File dir, ZipOutputStream zipOut, String baseDir) throws IOException&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">            compress(files[i], zipOut, baseDir + dir.getName() + &quot;/&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 压缩一个文件 */</span><br><span class="line">    private static void compressFile(File file, ZipOutputStream zipOut, String baseDir)  throws IOException&#123;</span><br><span class="line">        if (!file.exists())&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BufferedInputStream bis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            bis = new BufferedInputStream(new FileInputStream(file));</span><br><span class="line">            ZipEntry entry = new ZipEntry(baseDir + file.getName());</span><br><span class="line">            zipOut.putNextEntry(entry);</span><br><span class="line">            int count;</span><br><span class="line">            byte data[] = new byte[BUFFER];</span><br><span class="line">            while ((count = bis.read(data, 0, BUFFER)) != -1) &#123;</span><br><span class="line">                zipOut.write(data, 0, count);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if(null != bis)&#123;</span><br><span class="line">                bis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void decompress(String zipFile , String dstPath)throws IOException&#123;</span><br><span class="line">        File pathFile = new File(dstPath);</span><br><span class="line">        if(!pathFile.exists())&#123;</span><br><span class="line">            pathFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        ZipFile zip = new ZipFile(zipFile);</span><br><span class="line">        for(Enumeration entries = zip.entries(); entries.hasMoreElements();)&#123;</span><br><span class="line">            ZipEntry entry = (ZipEntry)entries.nextElement();</span><br><span class="line">            String zipEntryName = entry.getName();</span><br><span class="line">            InputStream in = null;</span><br><span class="line">            OutputStream out = null;</span><br><span class="line">            try&#123;</span><br><span class="line">                in =  zip.getInputStream(entry);</span><br><span class="line">                String outPath = (dstPath+&quot;/&quot;+zipEntryName).replaceAll(&quot;\\*&quot;, &quot;/&quot;);;</span><br><span class="line">                //判断路径是否存在,不存在则创建文件路径</span><br><span class="line">                File file = new File(outPath.substring(0, outPath.lastIndexOf(&apos;/&apos;)));</span><br><span class="line">                if(!file.exists())&#123;</span><br><span class="line">                    file.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                //判断文件全路径是否为文件夹,如果是上面已经上传,不需要解压</span><br><span class="line">                if(new File(outPath).isDirectory())&#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                out = new FileOutputStream(outPath);</span><br><span class="line">                byte[] buf1 = new byte[1024];</span><br><span class="line">                int len;</span><br><span class="line">                while((len=in.read(buf1))&gt;0)&#123;</span><br><span class="line">                    out.write(buf1,0,len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if(null != in)&#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(null != out)&#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">import java.awt.AlphaComposite;</span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.Image;</span><br><span class="line">import java.awt.RenderingHints;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.swing.ImageIcon;</span><br><span class="line"></span><br><span class="line">public class ImageMarkLogoByIcon &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给图片添加水印</span><br><span class="line">     * @param iconPath 水印图片路径</span><br><span class="line">     * @param srcImgPath 源图片路径</span><br><span class="line">     * @param targerPath 目标图片路径</span><br><span class="line">     */</span><br><span class="line">    public static void markImageByIcon(String iconPath, String srcImgPath,</span><br><span class="line">                                       String targerPath) &#123;</span><br><span class="line">        markImageByIcon(iconPath, srcImgPath, targerPath, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给图片添加水印、可设置水印图片旋转角度</span><br><span class="line">     * @param iconPath 水印图片路径</span><br><span class="line">     * @param srcImgPath 源图片路径</span><br><span class="line">     * @param targerPath 目标图片路径</span><br><span class="line">     * @param degree 水印图片旋转角度</span><br><span class="line">     */</span><br><span class="line">    public static void markImageByIcon(String iconPath, String srcImgPath,</span><br><span class="line">                                       String targerPath, Integer degree) &#123;</span><br><span class="line">        OutputStream os = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Image srcImg = ImageIO.read(new File(srcImgPath));</span><br><span class="line"></span><br><span class="line">            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),</span><br><span class="line">                    srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">            // 得到画笔对象</span><br><span class="line">            // Graphics g= buffImg.getGraphics();</span><br><span class="line">            Graphics2D g = buffImg.createGraphics();</span><br><span class="line"></span><br><span class="line">            // 设置对线段的锯齿状边缘处理</span><br><span class="line">            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class="line">                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class="line"></span><br><span class="line">            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg</span><br><span class="line">                    .getHeight(null), Image.SCALE_SMOOTH), 0, 0, null);</span><br><span class="line"></span><br><span class="line">            if (null != degree) &#123;</span><br><span class="line">                // 设置水印旋转</span><br><span class="line">                g.rotate(Math.toRadians(degree),</span><br><span class="line">                        (double) buffImg.getWidth() / 2, (double) buffImg</span><br><span class="line">                                .getHeight() / 2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 水印图象的路径 水印一般为gif或者png的，这样可设置透明度</span><br><span class="line">            ImageIcon imgIcon = new ImageIcon(iconPath);</span><br><span class="line"></span><br><span class="line">            // 得到Image对象。</span><br><span class="line">            Image img = imgIcon.getImage();</span><br><span class="line"></span><br><span class="line">            float alpha = 0.5f; // 透明度</span><br><span class="line">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class="line">                    alpha));</span><br><span class="line"></span><br><span class="line">            // 表示水印图片的位置</span><br><span class="line">            g.drawImage(img, 150, 300, null);</span><br><span class="line"></span><br><span class="line">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));</span><br><span class="line"></span><br><span class="line">            g.dispose();</span><br><span class="line"></span><br><span class="line">            os = new FileOutputStream(targerPath);</span><br><span class="line"></span><br><span class="line">            // 生成图片</span><br><span class="line">            ImageIO.write(buffImg, &quot;JPG&quot;, os);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;图片完成添加Icon印章。。。。。。&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (null != os)</span><br><span class="line">                    os.close();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用poi读写excel</title>
      <link href="/2017/10/08/%E4%BD%BF%E7%94%A8poi%E8%AF%BB%E5%86%99excel/"/>
      <url>/2017/10/08/%E4%BD%BF%E7%94%A8poi%E8%AF%BB%E5%86%99excel/</url>
      <content type="html"><![CDATA[<p>首先了解以下excel文件怎么和poi中的组件对应起来的。　　</p><ul><li>一个Excel文件对应于一个Workbook对象</li><li>一个Workbook可以有多个Sheet对象</li><li>一个Sheet对象由多个Row对象组成</li><li>一个Row对象是由多个Cell对象组成 </li></ul><p>基于以上几条，如果想对excel文件进行读写的话就要</p><ol><li>用Workbook打开或者创建一个Excel文件的对象</li><li>用上一步的Excel对象创建或者获取到一个Sheet对象</li><li>用Sheet对象创建或获取一个Row对象</li><li>用Row对象创建或获取一个Cell对象</li><li>对Cell对象读写。</li></ol><p>基于以上原理就可以轻松对Excel文件进行读写，这里以XSSFWorkbook（对应.xlsx文件即office2007以上版本，如果是.xls文件即office2003以下版本需要使用HSSFWorkbook）为例进行Excel的简单读写。<br>maven依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.17-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.16-beta1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>写操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//创建一个Excel对象</span><br><span class="line">XSSFWorkbook wb = new XSSFWorkbook();</span><br><span class="line"></span><br><span class="line">//创建表单Sheet对象</span><br><span class="line">XSSFSheet sheet = wb.createSheet();</span><br><span class="line"></span><br><span class="line">//创建Row对象</span><br><span class="line">XSSFRow row1 = sheet.createRow(0);</span><br><span class="line">XSSFRow row2 = sheet.createRow(1);</span><br><span class="line">XSSFRow row3 = sheet.createRow(2);</span><br><span class="line"></span><br><span class="line">//创建Cell对象，并进行写操作</span><br><span class="line"></span><br><span class="line">//第一行</span><br><span class="line">XSSFCell cell1 =  row1.createCell(0);</span><br><span class="line">cell1.setCellValue(&quot;姓名&quot;);</span><br><span class="line">XSSFCell cell2 =  row1.createCell(1);</span><br><span class="line">cell2.setCellValue(&quot;年龄&quot;);</span><br><span class="line"></span><br><span class="line">//第二行</span><br><span class="line">cell1 =  row2.createCell(0);</span><br><span class="line">cell1.setCellValue(&quot;张三&quot;);</span><br><span class="line">cell2 =  row2.createCell(1);</span><br><span class="line">cell2.setCellValue(&quot;20&quot;);</span><br><span class="line"></span><br><span class="line">//第三行</span><br><span class="line">cell1 =  row3.createCell(0);</span><br><span class="line">cell1.setCellValue(&quot;李四&quot;);</span><br><span class="line">cell2 =  row3.createCell(1);</span><br><span class="line">cell2.setCellValue(&quot;18&quot;);</span><br><span class="line"></span><br><span class="line">//输出文件</span><br><span class="line">FileOutputStream output = new FileOutputStream(&quot;test.xlsx&quot;);</span><br><span class="line">wb.write(output);</span><br><span class="line">output.flush();</span><br></pre></td></tr></table></figure></p><p><img src="/img/8297579-5e28e732a563bc53.png" alt="image.png"></p><p>读操作和写操作类似，把create的地方换成get即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//获取Excel对象</span><br><span class="line">XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(&quot;test.xlsx&quot;));</span><br><span class="line"></span><br><span class="line">//获取一个Sheet对象</span><br><span class="line">XSSFSheet sheet = wb.getSheetAt(0);</span><br><span class="line"></span><br><span class="line">//获取Row对象</span><br><span class="line">XSSFRow row1 = sheet.getRow(0);</span><br><span class="line">XSSFRow row2 = sheet.getRow(1);</span><br><span class="line">XSSFRow row3 = sheet.getRow(2);</span><br><span class="line"></span><br><span class="line">//获取Cell对象的值并输出</span><br><span class="line">System.out.println(row1.getCell(0) + &quot; &quot; + row1.getCell(1));</span><br><span class="line">System.out.println(row2.getCell(0) + &quot; &quot; + row2.getCell(1));</span><br><span class="line">System.out.println(row3.getCell(0) + &quot; &quot; + row3.getCell(1));</span><br></pre></td></tr></table></figure></p><p><img src="/img/8297579-2024e73c2e8adf72.png" alt="image.png"></p><p>当然也可以根据文件扩展名自动选择使用哪个子类生成Workbook对象，这里直接封一个util工具类，方便以后直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line">import org.apache.poi.ss.usermodel.*;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class ReadExcelUtils &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(ReadExcelUtils.class);</span><br><span class="line"></span><br><span class="line">    private Workbook wb;</span><br><span class="line">    private Sheet sheet;</span><br><span class="line">    private Row row;</span><br><span class="line"></span><br><span class="line">    public ReadExcelUtils(String filepath) &#123;</span><br><span class="line">        if(filepath==null)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String ext = filepath.substring(filepath.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        try &#123;</span><br><span class="line">            InputStream is = new FileInputStream(filepath);</span><br><span class="line">            if(&quot;.xls&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new HSSFWorkbook(is);</span><br><span class="line">            &#125;else if(&quot;.xlsx&quot;.equals(ext))&#123;</span><br><span class="line">                wb = new XSSFWorkbook(is);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                wb=null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            logger.error(&quot;FileNotFoundException&quot;, e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;IOException&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel表格表头的内容</span><br><span class="line">     * @return String 表头内容的数组</span><br><span class="line">     */</span><br><span class="line">    public String[] readExcelTitle() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        // 标题总列数</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">        String[] title = new String[colNum];</span><br><span class="line">        for (int i = 0; i &lt; colNum; i++) &#123;</span><br><span class="line">            // title[i] = getStringCellValue(row.getCell((short) i));</span><br><span class="line">            title[i] = row.getCell(i).getStringCellValue();</span><br><span class="line">        &#125;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取Excel数据内容</span><br><span class="line">     * @return Map 包含单元格数据内容的Map对象</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; readExcelContent() throws Exception&#123;</span><br><span class="line">        if(wb==null)&#123;</span><br><span class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; content = new HashMap&lt;Integer, Map&lt;Integer,Object&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        sheet = wb.getSheetAt(0);</span><br><span class="line">        // 得到总行数</span><br><span class="line">        int rowNum = sheet.getLastRowNum();</span><br><span class="line">        row = sheet.getRow(0);</span><br><span class="line">        int colNum = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">        // 正文内容应该从第二行开始,第一行为表头的标题</span><br><span class="line">        for (int i = 1; i &lt;= rowNum; i++) &#123;</span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            int j = 0;</span><br><span class="line">            Map&lt;Integer,Object&gt; cellValue = new HashMap&lt;Integer, Object&gt;();</span><br><span class="line">            while (j &lt; colNum) &#123;</span><br><span class="line">                Object obj = getCellFormatValue(row.getCell(j));</span><br><span class="line">                cellValue.put(j, obj);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            content.put(i, cellValue);</span><br><span class="line">        &#125;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Cell类型设置数据</span><br><span class="line">     * @param cell</span><br><span class="line">     * @return Object</span><br><span class="line">     */</span><br><span class="line">    private Object getCellFormatValue(Cell cell) &#123;</span><br><span class="line">        Object cellvalue = &quot;&quot;;</span><br><span class="line">        if (cell != null) &#123;</span><br><span class="line"></span><br><span class="line">            // 判断当前Cell的Type</span><br><span class="line">            switch (cell.getCellType()) &#123;</span><br><span class="line">                case Cell.CELL_TYPE_NUMERIC:// 如果当前Cell的Type为NUMERIC</span><br><span class="line">                case Cell.CELL_TYPE_FORMULA: &#123;</span><br><span class="line">                    // 判断当前的cell是否为Date</span><br><span class="line">                    if (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                        // 如果是Date类型则，转化为Data格式</span><br><span class="line">                        // data格式是带时分秒的：2013-7-10 0:00:00</span><br><span class="line">                        // cellvalue = cell.getDateCellValue().toLocaleString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        // data格式是不带带时分秒的：2013-7-10</span><br><span class="line">                        Date date = cell.getDateCellValue();</span><br><span class="line">                        cellvalue = date;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 如果是纯数字</span><br><span class="line">                        // 取得当前Cell的数值</span><br><span class="line">                        cellvalue = String.valueOf(cell.getNumericCellValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                case Cell.CELL_TYPE_STRING:// 如果当前Cell的Type为STRING</span><br><span class="line">                    // 取得当前的Cell字符串</span><br><span class="line">                    cellvalue = cell.getRichStringCellValue().getString();</span><br><span class="line">                    break;</span><br><span class="line">                default:// 默认的Cell值</span><br><span class="line">                    cellvalue = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cellvalue = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return cellvalue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Service部署Spring Boot</title>
      <link href="/2017/10/06/%E4%BD%BF%E7%94%A8Service%E9%83%A8%E7%BD%B2Spring%20Boot/"/>
      <url>/2017/10/06/%E4%BD%BF%E7%94%A8Service%E9%83%A8%E7%BD%B2Spring%20Boot/</url>
      <content type="html"><![CDATA[<h4 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h4><p>Spring Boot 的部署很简单，无论使用maven还是gradle构建成jar包之后，上传到服务器上，运行 <code>java -jar *.jar</code> 即可完成简单的部署。如果想使用外部的配置文件直接在后面加参数就行了  <code>--spring.config.location=application-production.yml</code>  如果想关闭终端还在后台启动的话加上 nohup 就可以了<br><code>nohup java -jar *.jar  --spring.config.location=application-production.yml</code></p><h4 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h4><p>普通情况只要关闭终端或ctrl+c即可结束应用，如果使用nohup部署的话先要找到进程号，然后杀掉进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080</span><br><span class="line">COMMAND  PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    2417 root   26u  IPv6 1672621      0t0  TCP *:webcache (LISTEN)</span><br><span class="line">kill -9 2417</span><br></pre></td></tr></table></figure></p><h4 id="使用service"><a href="#使用service" class="headerlink" title="使用service"></a>使用service</h4><p>如果每一次部署和杀死都要手动的话，频率多了其实也挺麻烦的，可以使用脚本来解决这个问题。<br>在 <code>etc/init.d</code> 先建一个脚本，把这个项目作为service来运行<br>例如 新建<code>etc/init.d/test</code><br>内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">SERVICE_NAME=test</span><br><span class="line">HOME=/root/webserver/test</span><br><span class="line">PATH_TO_JAR=$HOME/*.jar</span><br><span class="line">PID_PATH_NAME=/tmp/test.pid</span><br><span class="line"></span><br><span class="line">LOG=$HOME/production.log</span><br><span class="line">ERROR_LOG=$HOME/production.err</span><br><span class="line">CONFIG=$HOME/application-production.yml</span><br><span class="line">case $1 in</span><br><span class="line">    start)</span><br><span class="line">        echo &quot;Starting $SERVICE_NAME ...&quot;</span><br><span class="line">        if [ ! -f $PID_PATH_NAME ]; then</span><br><span class="line">            cd $HOME</span><br><span class="line">            nohup java -jar $PATH_TO_JAR --spring.config.location=application-production.yml &gt; $LOG 2&gt; $ERROR_LOG &amp;</span><br><span class="line">                        echo $! &gt; $PID_PATH_NAME</span><br><span class="line">            echo &quot;$SERVICE_NAME started ...&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is already running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    stop)</span><br><span class="line">        if [ -f $PID_PATH_NAME ]; then</span><br><span class="line">            PID=$(cat $PID_PATH_NAME);</span><br><span class="line">            echo &quot;$SERVICE_NAME stoping ...&quot;</span><br><span class="line">            kill $PID;</span><br><span class="line">            echo &quot;$SERVICE_NAME stopped ...&quot;</span><br><span class="line">            rm $PID_PATH_NAME</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is not running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    restart)</span><br><span class="line">        if [ -f $PID_PATH_NAME ]; then</span><br><span class="line">            PID=$(cat $PID_PATH_NAME);</span><br><span class="line">            echo &quot;$SERVICE_NAME stopping ...&quot;;</span><br><span class="line">            kill $PID;</span><br><span class="line">            echo &quot;$SERVICE_NAME stopped ...&quot;;</span><br><span class="line">            rm $PID_PATH_NAME</span><br><span class="line">            echo &quot;$SERVICE_NAME starting ...&quot;</span><br><span class="line">            cd $HOME/current</span><br><span class="line">            nohup java -jar $PATH_TO_JAR --spring.config.location=application-production.yml &gt; $LOG 2&gt; $ERROR_LOG &amp;</span><br><span class="line">                        echo $! &gt; $PID_PATH_NAME</span><br><span class="line">            echo &quot;$SERVICE_NAME started ...&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$SERVICE_NAME is not running ...&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p><p>保存脚本<br>赋予脚本可执行权限 <code>sudo chmod +x  etc/init.d/test</code><br>把需要部署的jar包放到脚本中<code>HOME</code>的目录下，然后就可以使用service的方式部署或杀死项目了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service test start</span><br><span class="line">sudo service test stop</span><br><span class="line">sudo service test restart</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>腾讯云做ss转发</title>
      <link href="/2017/09/21/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%81%9Ass%E8%BD%AC%E5%8F%91/"/>
      <url>/2017/09/21/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%81%9Ass%E8%BD%AC%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>刚开始用的是版瓦工的服务器，后来因为一些原因账号不能用了，如果还想用的话，还要再申请账号，还要再买，虽然版瓦工很便宜，但是最近手头相当紧呀，也不想再太折腾，于是就买了个70块钱一年的ss账号。链接我就不放了，谷歌搜一下ss账号第一个就是。<br>这个账号不限流量，但是限制连接的个数（其实我觉得没限制），为了使用多台设备，我用腾讯云做了一次转发，多个设备连在我的腾讯云上，然后腾讯云连这个ss。<br>实现方法有好多，但好多我也都失败了，最后我是参考<a href="https://doub.io/ss-jc29/" target="_blank" rel="noopener">这个</a>成功的。</p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/project/help/README.html"/>
      <url>/project/help/README.html</url>
      <content type="html"><![CDATA[<h2 id="让我帮你百度一下"><a href="#让我帮你百度一下" class="headerlink" title="让我帮你百度一下"></a>让我帮你百度一下</h2><p>很经典的小trick,用jqury重写了一下。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>当访问该页面是判断是否带参数</p><ul><li>带参数就调用动画模拟输入搜索框并打开<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a><br>进行搜索。</li><li>不带参数就显示生成链接界面,点击生成链接可生成带参数的链接。</li></ul><h3 id="license"><a href="#license" class="headerlink" title="license"></a>license</h3><p><a href="/LICENSE">MIT</a>  </p>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/project/help/index.html"/>
      <url>/project/help/index.html</url>
      <content type="html"><![CDATA[<!DOCTYPE html><html>  <head>    <meta charset="utf-8">    <title>让我帮你百度一下</title>    <script src="js/jquery.min.js"></script>    <link rel="stylesheet" href="css/main.css" charset="utf-8">  </head>  <body>  <div class="search-wrapper">    <div class="bd-logo">      <img src="img/baidulogo.png" alt="" class="bd-logo-img">    </div>    <form method="get" action="https://www.baidu.com/s" class="search-form" id="form">      <div class="search-form-div">        <input type="text" name="wd" id="search">      </div>      <div class="search-from-subbut">        <input type="submit" id="subbut">      </div>    </form>  </div>  <div class="gen-box" id="genbox">    <button class="gen-button" id="gen">生成链接</button><br>    <a href="#" id="link">https://www.baidu.com</a>  </div>  <div class="cursor" id="cursor">    <img src="img/arrow.gif">  </div>    <script src="js/main.js"></script>  </body></html>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/project/help/css/main.css"/>
      <url>/project/help/css/main.css</url>
      <content type="html"><![CDATA[.bd-logo{  text-align: center;}.bd-logo-img{  width: 270px;  height: 129px;}.search-form{  padding-top: 20px;  text-align: center;  width: 307px;  margin-left: auto;  margin-right: auto;}.search-form-div{  float: left;  width: 205px;}.search-wrapper{  padding-top: 20px;}.search-from-subbut{  float: left;  width: 102px;}.search-from-subbut {  float: left;  width: 102px;}.search-from-subbut input[type="submit"] {  background-color: #38f;  color: white;  font-size: 16px;  border: 0;  cursor: pointer;  width: 102px;  height: 38px;  line-height: 38px;  padding: 0;  outline: 0;}.search-form-div input[type="text"] {  width: 190px;  height: 20px;  padding: 9px 7px;  font: 16px;  border: 1px solid #b8b8b8;  border-bottom: 1px solid #ccc;  border-right: 0;  vertical-align: top;  outline: none;  box-shadow: none;}.search-form-div input[type="text"]:hover {  border: 1px solid #999;  border-bottom: 1px solid #b3b3b3;  border-right: 0;}.search-form-div input[type="text"]:focus {  border: 1px solid #38f;  border-right: 0;}.gen-box {  clear: both;  padding-top: 50px;  text-align: center;  line-height: 2.5;  display: none;}.gen-button {  cursor: pointer;  width: 120px;  padding: 9px 7px;  border: 1px solid #ccc;  border-radius: 3px;  background-color: white;  color: #777;  text-decoration: none;  font-size: 14px;  outline: 0;}.gen-button:hover {  background-color: #f0f0f0;}#link {  font-size: 13px;}.cursor {  position: fixed;  left: 0px;  top: 0px;}@media screen and (min-width: 768px){  .search-wrapper{    padding-top: 100px;  }  .search-form{    width: 622px;  }  .search-form-div{    float: left;    width: 520px;  }  .search-form-div input[type="text"] {    width: 505px;  }}]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/project/help/js/main.js"/>
      <url>/project/help/js/main.js</url>
      <content type="html"><![CDATA[$(document).ready(function(){  var subtop = $('#subbut').offset().top;  var subleft = $('#subbut').offset().left;  var inleft = $('#search').offset().left;  var url = location.search;  if(url.indexOf('?') !== -1){    $('#cursor').animate({left: inleft-'-15' ,top: subtop-'-20'},1500,function () {      var str = url.substr(1).split('=')[1];//提取wd=      var decodeurl = decodeURIComponent(str);//decode      document.forms[0].search.value = decodeurl;    });    $('#cursor').animate({left: inleft-'-50',top: subtop -'-55'},1000);    $('#cursor').animate({left: subleft-'-50',top: subtop-'-15'},1500,function () {      document.getElementById("form").submit();    });  }else {    $('#cursor').css('display','none');    $('#genbox').css('display','block');    $('#gen').click(function () {      var search = location.href + '?wd=' + encodeURIComponent($('#search').val());      $('#link').text(search);      $('#link').attr('href',search);    });  }});]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/project/help/js/jquery.min.js"/>
      <url>/project/help/js/jquery.min.js</url>
      <content type="html"><![CDATA[/*! jQuery v3.0.0 | (c) jQuery Foundation | jquery.org/license */!function(a,b){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){"use strict";var c=[],d=a.document,e=Object.getPrototypeOf,f=c.slice,g=c.concat,h=c.push,i=c.indexOf,j={},k=j.toString,l=j.hasOwnProperty,m=l.toString,n=m.call(Object),o={};function p(a,b){b=b||d;var c=b.createElement("script");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var q="3.0.0",r=function(a,b){return new r.fn.init(a,b)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,t=/^-ms-/,u=/-([a-z])/g,v=function(a,b){return b.toUpperCase()};r.fn=r.prototype={jquery:q,constructor:r,length:0,toArray:function(){return f.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:f.call(this)},pushStack:function(a){var b=r.merge(this.constructor(),a);return b.prevObject=this,b},each:function(a){return r.each(this,a)},map:function(a){return this.pushStack(r.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(f.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:c.sort,splice:c.splice},r.extend=r.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||r.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(r.isPlainObject(d)||(e=r.isArray(d)))?(e?(e=!1,f=c&&r.isArray(c)?c:[]):f=c&&r.isPlainObject(c)?c:{},g[b]=r.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},r.extend({expando:"jQuery"+(q+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===r.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=r.type(a);return("number"===b||"string"===b)&&!isNaN(a-parseFloat(a))},isPlainObject:function(a){var b,c;return a&&"[object Object]"===k.call(a)?(b=e(a))?(c=l.call(b,"constructor")&&b.constructor,"function"==typeof c&&m.call(c)===n):!0:!1},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?j[k.call(a)]||"object":typeof a},globalEval:function(a){p(a)},camelCase:function(a){return a.replace(t,"ms-").replace(u,v)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(w(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(s,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(w(Object(a))?r.merge(c,"string"==typeof a?[a]:a):h.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:i.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,f=0,h=[];if(w(a))for(d=a.length;d>f;f++)e=b(a[f],f,c),null!=e&&h.push(e);else for(f in a)e=b(a[f],f,c),null!=e&&h.push(e);return g.apply([],h)},guid:1,proxy:function(a,b){var c,d,e;return"string"==typeof b&&(c=a[b],b=a,a=c),r.isFunction(a)?(d=f.call(arguments,2),e=function(){return a.apply(b||this,d.concat(f.call(arguments)))},e.guid=a.guid=a.guid||r.guid++,e):void 0},now:Date.now,support:o}),"function"==typeof Symbol&&(r.fn[Symbol.iterator]=c[Symbol.iterator]),r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){j["[object "+b+"]"]=b.toLowerCase()});function w(a){var b=!!a&&"length"in a&&a.length,c=r.type(a);return"function"===c||r.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var x=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\x00-\\xa0])+",M="\\["+K+"*("+L+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+K+"*\\]",N=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",O=new RegExp(K+"+","g"),P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(N),U=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),aa=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ba=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,ca=function(a,b){return b?"\x00"===a?"\ufffd":a.slice(0,-1)+"\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\"+a},da=function(){m()},ea=ta(function(a){return a.disabled===!0},{dir:"parentNode",next:"legend"});try{G.apply(D=H.call(v.childNodes),v.childNodes),D[v.childNodes.length].nodeType}catch(fa){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s=b&&b.ownerDocument,w=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==w&&9!==w&&11!==w)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==w&&(l=Z.exec(a)))if(f=l[1]){if(9===w){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(s&&(j=s.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(l[2])return G.apply(d,b.getElementsByTagName(a)),d;if((f=l[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==w)s=b,r=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(ba,ca):b.setAttribute("id",k=u),o=g(a),h=o.length;while(h--)o[h]="#"+k+" "+sa(o[h]);r=o.join(","),s=$.test(a)&&qa(b.parentNode)||b}if(r)try{return G.apply(d,s.querySelectorAll(r)),d}catch(x){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(P,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("fieldset");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return function(b){return"label"in b&&b.disabled===a||"form"in b&&b.disabled===a||"form"in b&&b.disabled===!1&&(b.isDisabled===a||b.isDisabled!==!a&&("label"in b||!ea(b))!==a)}}function pa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function qa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),v!==n&&(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(n.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Y.test(n.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id=""+u+""></a><select id=""+u+"-\r\\" msallowcapture=""><option selected></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){a.innerHTML="<a href="" disabled="disabled"></a><select disabled="disabled"><option></option></select>";var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+K+"*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),o.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Y.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"*"),s.call(a,"[s!='']:x"),r.push("!=",N)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Y.test(o.compareDocumentPosition),t=b||Y.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?I(k,a)-I(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?I(k,a)-I(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?la(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(S,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.escape=function(a){return(a+"").replace(ba,ca)},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(_,aa),a[3]=(a[3]||a[4]||a[5]||"").replace(_,aa),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return V.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&T.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(_,aa).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(O," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return x.test(a.nodename)},input:function(a){return="" w.test(a.nodename)},button:function(a){var="" b="a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var" b;return"input"="==a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:pa(function(){return[0]}),last:pa(function(a,b){return[b-1]}),eq:pa(function(a,b,c){return[0">c?c+b:c]}),even:pa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:pa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:pa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:pa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth="d.pseudos.eq;for(b" in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]="ma(b);for(b" in{submit:!0,reset:!0})d.pseudos[b]="na(b);function" ra(){}ra.prototype="d.filters=d.pseudos,d.setFilters=new" ra,g="ga.tokenize=function(a,b){var" c,e,f,g,h,i,j,k="z[a+"" "];if(k)return="" b?0:k.slice(0);h="a,i=[],j=d.preFilter;while(h){c&&!(e=Q.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P,"" ")}),h="h.slice(c.length));for(g" in="" d.filter)!(e="V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return" b?h.length:h?ga.error(a):z(a,i).slice(0)};function="" sa(a){for(var="" b="0,c=a.length,d="";c">b;b++)d+=a[b].value;return d}function ta(a,b,c){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,h=x++;return b.first?function(b,c,e){while(b=b[d])if(1===b.nodeType||g)return a(b,c,e)}:function(b,c,i){var j,k,l,m=[w,h];if(i){while(b=b[d])if((1===b.nodeType||g)&&a(b,c,i))return!0}else while(b=b[d])if(1===b.nodeType||g)if(l=b[u]||(b[u]={}),k=l[b.uniqueID]||(l[b.uniqueID]={}),e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((j=k[f])&&j[0]===w&&j[1]===h)return m[2]=j[2];if(k[f]=m,m[2]=a(b,c,i))return!0}}}function ua(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function va(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function wa(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function xa(a,b,c,d,e,f){return d&&!d[u]&&(d=xa(d)),e&&!e[u]&&(e=xa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||va(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:wa(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=wa(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=wa(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ya(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ta(function(a){return a===b},h,!0),l=ta(function(a){return I(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ta(ua(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return xa(i>1&&ua(m),i>1&&sa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(P,"$1"),c,e>i&&ya(a.slice(i,e)),f>e&&ya(a=a.slice(e)),f>e&&sa(a))}m.push(c)}return ua(m)}function za(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=E.call(i));u=wa(u)}G.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ga.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=ya(b[c]),f[u]?d.push(f):e.push(f);f=A(a,za(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(_,aa),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=V.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(_,aa),$.test(j[0].type)&&qa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&sa(j),!a)return G.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||$.test(a)&&qa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("fieldset"))}),ja(function(a){return a.innerHTML="<a href="#"></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(J,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);r.find=x,r.expr=x.selectors,r.expr[":"]=r.expr.pseudos,r.uniqueSort=r.unique=x.uniqueSort,r.text=x.getText,r.isXMLDoc=x.isXML,r.contains=x.contains,r.escapeSelector=x.escape;var y=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&r(a).is(c))break;d.push(a)}return d},z=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},A=r.expr.match.needsContext,B=/^<([a-z][^\ \0="">:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\ \1="">|)$/i,C=/^.[^:#\[\.,]*$/;function D(a,b,c){if(r.isFunction(b))return r.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return r.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(C.test(b))return r.filter(b,a,c);b=r.filter(b,a)}return r.grep(a,function(a){return i.call(b,a)>-1!==c&&1===a.nodeType})}r.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?r.find.matchesSelector(d,a)?[d]:[]:r.find.matches(a,r.grep(b,function(a){return 1===a.nodeType}))},r.fn.extend({find:function(a){var b,c,d=this.length,e=this;if("string"!=typeof a)return this.pushStack(r(a).filter(function(){for(b=0;d>b;b++)if(r.contains(e[b],this))return!0}));for(c=this.pushStack([]),b=0;d>b;b++)r.find(a,e[b],c);return d>1?r.uniqueSort(c):c},filter:function(a){return this.pushStack(D(this,a||[],!1))},not:function(a){return this.pushStack(D(this,a||[],!0))},is:function(a){return!!D(this,"string"==typeof a&&A.test(a)?r(a):a||[],!1).length}});var E,F=/^(?:\s*(<[\w\w]+>)[^>]*|#([\w-]+))$/,G=r.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||E,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:F.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof r?b[0]:b,r.merge(this,r.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),B.test(e[1])&&r.isPlainObject(b))for(e in b)r.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):r.isFunction(a)?void 0!==c.ready?c.ready(a):a(r):r.makeArray(a,this)};G.prototype=r.fn,E=r(d);var H=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};r.fn.extend({has:function(a){var b=r(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(r.contains(this,b[a]))return!0})},closest:function(a,b){var c,d=0,e=this.length,f=[],g="string"!=typeof a&&r(a);if(!A.test(a))for(;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&r.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?r.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?i.call(r(a),this[0]):i.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(r.uniqueSort(r.merge(this.get(),r(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function J(a,b){while((a=a[b])&&1!==a.nodeType);return a}r.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return y(a,"parentNode")},parentsUntil:function(a,b,c){return y(a,"parentNode",c)},next:function(a){return J(a,"nextSibling")},prev:function(a){return J(a,"previousSibling")},nextAll:function(a){return y(a,"nextSibling")},prevAll:function(a){return y(a,"previousSibling")},nextUntil:function(a,b,c){return y(a,"nextSibling",c)},prevUntil:function(a,b,c){return y(a,"previousSibling",c)},siblings:function(a){return z((a.parentNode||{}).firstChild,a)},children:function(a){return z(a.firstChild)},contents:function(a){return a.contentDocument||r.merge([],a.childNodes)}},function(a,b){r.fn[a]=function(c,d){var e=r.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=r.filter(d,e)),this.length>1&&(I[a]||r.uniqueSort(e),H.test(a)&&e.reverse()),this.pushStack(e)}});var K=/\S+/g;function L(a){var b={};return r.each(a.match(K)||[],function(a,c){b[c]=!0}),b}r.Callbacks=function(a){a="string"==typeof a?L(a):r.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stoponfalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h="f.length-1,g.push(c)),function" d(b){r.each(b,function(b,c){r.isfunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!="=r.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return" r.each(arguments,function(a,b){var="" c;while((c="r.inArray(b,f,c))">-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?r.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function M(a){return a}function N(a){throw a}function O(a,b,c){var d;try{a&&r.isFunction(d=a.promise)?d.call(a).done(b).fail(c):a&&r.isFunction(d=a.then)?d.call(a,b,c):b.call(void 0,a)}catch(a){c.call(void 0,a)}}r.extend({Deferred:function(b){var c=[["notify","progress",r.Callbacks("memory"),r.Callbacks("memory"),2],["resolve","done",r.Callbacks("once memory"),r.Callbacks("once memory"),0,"resolved"],["reject","fail",r.Callbacks("once memory"),r.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return r.Deferred(function(b){r.each(c,function(c,d){var e=r.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=e&&e.apply(this,arguments);a&&r.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+"With"](this,e?[a]:arguments)})}),a=null}).promise()},then:function(b,d,e){var f=0;function g(b,c,d,e){return function(){var h=this,i=arguments,j=function(){var a,j;if(!(f>b)){if(a=d.apply(h,i),a===c.promise())throw new TypeError("Thenable self-resolution");j=a&&("object"==typeof a||"function"==typeof a)&&a.then,r.isFunction(j)?e?j.call(a,g(f,c,M,e),g(f,c,N,e)):(f++,j.call(a,g(f,c,M,e),g(f,c,N,e),g(f,c,M,c.notifyWith))):(d!==M&&(h=void 0,i=[a]),(e||c.resolveWith)(h,i))}},k=e?j:function(){try{j()}catch(a){r.Deferred.exceptionHook&&r.Deferred.exceptionHook(a,k.stackTrace),b+1>=f&&(d!==N&&(h=void 0,i=[a]),c.rejectWith(h,i))}};b?k():(r.Deferred.getStackHook&&(k.stackTrace=r.Deferred.getStackHook()),a.setTimeout(k))}}return r.Deferred(function(a){c[0][3].add(g(0,a,r.isFunction(e)?e:M,a.notifyWith)),c[1][3].add(g(0,a,r.isFunction(b)?b:M)),c[2][3].add(g(0,a,r.isFunction(d)?d:N))}).promise()},promise:function(a){return null!=a?r.extend(a,e):e}},f={};return r.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+"With"](this===f?void 0:this,arguments),this},f[b[0]+"With"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(a){var b=arguments.length,c=b,d=Array(c),e=f.call(arguments),g=r.Deferred(),h=function(a){return function(c){d[a]=this,e[a]=arguments.length>1?f.call(arguments):c,--b||g.resolveWith(d,e)}};if(1>=b&&(O(a,g.done(h(c)).resolve,g.reject),"pending"===g.state()||r.isFunction(e[c]&&e[c].then)))return g.then();while(c--)O(e[c],h(c),g.reject);return g.promise()}});var P=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook=function(b,c){a.console&&a.console.warn&&b&&P.test(b.name)&&a.console.warn("jQuery.Deferred exception: "+b.message,b.stack,c)};var Q=r.Deferred();r.fn.ready=function(a){return Q.then(a),this},r.extend({isReady:!1,readyWait:1,holdReady:function(a){a?r.readyWait++:r.ready(!0)},ready:function(a){(a===!0?--r.readyWait:r.isReady)||(r.isReady=!0,a!==!0&&--r.readyWait>0||Q.resolveWith(d,[r]))}}),r.ready.then=Q.then;function R(){d.removeEventListener("DOMContentLoaded",R),a.removeEventListener("load",R),r.ready()}"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(r.ready):(d.addEventListener("DOMContentLoaded",R),a.addEventListener("load",R));var S=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===r.type(c)){e=!0;for(h in c)S(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,r.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(r(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},T=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function U(){this.expando=r.expando+U.uid++}U.uid=1,U.prototype={cache:function(a){var b=a[this.expando];return b||(b={},T(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[r.camelCase(b)]=c;else for(d in b)e[r.camelCase(d)]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][r.camelCase(b)]},access:function(a,b,c){return void 0===b||b&&"string"==typeof b&&void 0===c?this.get(a,b):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d=a[this.expando];if(void 0!==d){if(void 0!==b){r.isArray(b)?b=b.map(r.camelCase):(b=r.camelCase(b),b=b in d?[b]:b.match(K)||[]),c=b.length;while(c--)delete d[b[c]]}(void 0===b||r.isEmptyObject(d))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!r.isEmptyObject(b)}};var V=new U,W=new U,X=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Y=/[A-Z]/g;function Z(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Y,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:X.test(c)?JSON.parse(c):c}catch(e){}W.set(a,b,c)}else c=void 0;return c}r.extend({hasData:function(a){return W.hasData(a)||V.hasData(a)},data:function(a,b,c){return W.access(a,b,c)},removeData:function(a,b){W.remove(a,b)},_data:function(a,b,c){return V.access(a,b,c)},_removeData:function(a,b){V.remove(a,b)}}),r.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=W.get(f),1===f.nodeType&&!V.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=r.camelCase(d.slice(5)),Z(f,d,e[d])));V.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){W.set(this,a)}):S(this,function(b){var c;if(f&&void 0===b){if(c=W.get(f,a),void 0!==c)return c;if(c=Z(f,a),void 0!==c)return c}else this.each(function(){W.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){W.remove(this,a)})}}),r.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=V.get(a,b),c&&(!d||r.isArray(c)?d=V.access(a,b,r.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=r.queue(a,b),d=c.length,e=c.shift(),f=r._queueHooks(a,b),g=function(){r.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return V.get(a,c)||V.access(a,c,{empty:r.Callbacks("once memory").add(function(){V.remove(a,[b+"queue",c])})})}}),r.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?r.queue(this[0],a):void 0="==b?this:this.each(function(){var" c="r.queue(this,a,b);r._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&r.dequeue(this,a)})},dequeue:function(a){return" this.each(function(){r.dequeue(this,a)})},clearqueue:function(a){return="" this.queue(a||"fx",[])},promise:function(a,b){var="" c,d="1,e=r.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof" a&&(b="a,a=void" 0),a="a||"fx";while(g--)c=V.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return" h(),e.promise(b)}});var="" $="/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,_=new" regexp("^(?:([+-])="|)("+$+")([a-z%]*)$","i"),aa=["Top","Right","Bottom","Left"],ba=function(a,b){return" a="b||a,"none"===a.style.display||""===a.style.display&&r.contains(a.ownerDocument,a)&&"none"===r.css(a,"display")},ca=function(a,b,c,d){var" e,f,g="{};for(f" in="" b)g[f]="a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f" b)a.style[f]="g[f];return" e};function="" da(a,b,c,d){var="" e,f="1,g=20,h=d?function(){return" d.cur()}:function(){return="" r.css(a,b,"")},i="h(),j=c&&c[3]||(r.cssNumber[b]?"":"px"),k=(r.cssNumber[b]||"px"!==j&&+i)&&_.exec(r.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do" f="f||".5",k/=f,r.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return" c&&(k="+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var" ea="{};function" fa(a){var="" b,c="a.ownerDocument,d=a.nodeName,e=ea[d];return" e?e:(b="c.body.appendChild(c.createElement(d)),e=r.css(b,"display"),b.parentNode.removeChild(b),"none"===e&&(e="block"),ea[d]=e,e)}function" ga(a,b){for(var="" c,d,e="[],f=0,g=a.length;g">f;f++)d=a[f],d.style&&(c=d.style.display,b?("none"===c&&(e[f]=V.get(d,"display")||null,e[f]||(d.style.display="")),""===d.style.display&&ba(d)&&(e[f]=fa(d))):"none"!==c&&(e[f]="none",V.set(d,"display",c)));for(f=0;g>f;f++)null!=e[f]&&(a[f].style.display=e[f]);return a}r.fn.extend({show:function(){return ga(this,!0)},hide:function(){return ga(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){ba(this)?r(this).show():r(this).hide()})}});var ha=/^(?:checkbox|radio)$/i,ia=/<([a-z][^\ \0="">\x20\t\r\n\f]+)/i,ja=/^$|\/(?:java|ecma)script/i,ka={option:[1,"<select multiple="multiple">","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ka.optgroup=ka.option,ka.tbody=ka.tfoot=ka.colgroup=ka.caption=ka.thead,ka.th=ka.td;function la(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&r.nodeName(a,b)?r.merge([a],c):c}function ma(a,b){for(var c=0,d=a.length;d>c;c++)V.set(a[c],"globalEval",!b||V.get(b[c],"globalEval"))}var na=/<|&#?\w+; ;function="" oa(a,b,c,d,e){for(var="" f,g,h,i,j,k,l="b.createDocumentFragment(),m=[],n=0,o=a.length;o">n;n++)if(f=a[n],f||0===f)if("object"===r.type(f))r.merge(m,f.nodeType?[f]:f);else if(na.test(f)){g=g||l.appendChild(b.createElement("div")),h=(ia.exec(f)||["",""])[1].toLowerCase(),i=ka[h]||ka._default,g.innerHTML=i[1]+r.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;r.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",n=0;while(f=m[n++])if(d&&r.inArray(f,d)>-1)e&&e.push(f);else if(j=r.contains(f.ownerDocument,f),g=la(l.appendChild(f),"script"),j&&ma(g),c){k=0;while(f=g[k++])ja.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),o.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",o.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var pa=d.documentElement,qa=/^key/,ra=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,sa=/^([^.]*)(?:\.(.+)|)/;function ta(){return!0}function ua(){return!1}function va(){try{return d.activeElement}catch(a){}}function wa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)wa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ua;else if(!e)return a;return 1===f&&(g=e,e=function(a){return r().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=r.guid++)),a.each(function(){r.event.add(this,b,e,d,c)})}r.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=V.get(a);if(q){c.handler&&(f=c,c=f.handler,e=f.selector),e&&r.find.matchesSelector(pa,e),c.guid||(c.guid=r.guid++),(i=q.events)||(i=q.events={}),(g=q.handle)||(g=q.handle=function(b){return"undefined"!=typeof r&&r.event.triggered!==b.type?r.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(K)||[""],j=b.length;while(j--)h=sa.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n&&(l=r.event.special[n]||{},n=(e?l.delegateType:l.bindType)||n,l=r.event.special[n]||{},k=r.extend({type:n,origType:p,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&r.expr.match.needsContext.test(e),namespace:o.join(".")},f),(m=i[n])||(m=i[n]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,o,g)!==!1||a.addEventListener&&a.addEventListener(n,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),r.event.global[n]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=V.hasData(a)&&V.get(a);if(q&&(i=q.events)){b=(b||"").match(K)||[""],j=b.length;while(j--)if(h=sa.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n){l=r.event.special[n]||{},n=(d?l.delegateType:l.bindType)||n,m=i[n]||[],h=h[2]&&new RegExp("(^|\\.)"+o.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&p!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,o,q.handle)!==!1||r.removeEvent(a,n,q.handle),delete i[n])}else for(n in i)r.event.remove(a,n+b[j],c,d,!0);r.isEmptyObject(i)&&V.remove(a,"handle events")}},dispatch:function(a){var b=r.event.fix(a),c,d,e,f,g,h,i=new Array(arguments.length),j=(V.get(this,"events")||{})[b.type]||[],k=r.event.special[b.type]||{};for(i[0]=b,c=1;c<arguments.length;c++)i[c]=arguments[c];if(b.delegatetarget=this,!k.predispatch||k.predispatch.call(this,b)!==!1){h=r.event.handlers.call(this,b,j),c=0;while((f=h[c++])&&!b.ispropagationstopped()){b.currenttarget=f.elem,d=0;while((g=f.handlers[d++])&&!b.isimmediatepropagationstopped())b.rnamespace&&!b.rnamespace.test(g.namespace)||(b.handleobj=g,b.data=g.data,e=((r.event.special[g.origtype]||{}).handle||g.handler).apply(f.elem,i),void 0!="=e&&(b.result=e)===!1&&(b.preventDefault(),b.stopPropagation()))}return" k.postdispatch&&k.postdispatch.call(this,b),b.result}},handlers:function(a,b){var="" c,d,e,f,g="[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h">c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?r(e,this).index(i)>-1:r.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},addprop:function(a,b){object.defineproperty(r.event.prototype,a,{enumerable:!0,configurable:!0,get:r.isfunction(b)?function(){return 0="==a.defaultPrevented&&a.returnValue===!1?ta:ua,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a,b&&r.extend(this,b),this.timeStamp=a&&a.timeStamp||r.now(),void(this[r.expando]=!0)):new" this.originalevent?b(this.originalevent):void="" 0}:function(){return="" this.originalevent?this.originalevent[a]:void="" 0},set:function(b){object.defineproperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:b})}})},fix:function(a){return="" a[r.expando]?a:new="" r.event(a)},special:{load:{nobubble:!0},focus:{trigger:function(){return="" this!="=va()&&this.focus?(this.focus(),!1):void" 0},delegatetype:"focusin"},blur:{trigger:function(){return="" this="==va()&&this.blur?(this.blur(),!1):void" 0},delegatetype:"focusout"},click:{trigger:function(){return"checkbox"="==this.type&&this.click&&r.nodeName(this,"input")?(this.click(),!1):void" 0},_default:function(a){return="" r.nodename(a.target,"a")}},beforeunload:{postdispatch:function(a){void="" 0!="=a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},r.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},r.Event=function(a,b){return" instanceof="" r.event?(a&&a.type?(this.originalevent="a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void" r.event(a,b)},r.event.prototype="{constructor:r.Event,isDefaultPrevented:ua,isPropagationStopped:ua,isImmediatePropagationStopped:ua,isSimulated:!1,preventDefault:function(){var" a="this.originalEvent;this.isDefaultPrevented=ta,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var" b="a.button;return" null="=a.which&&qa.test(a.type)?null!=a.charCode?a.charCode:a.keyCode:!a.which&&void" c,d="this,e=a.relatedTarget,f=a.handleObj;return" e&&(e="==d||r.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),r.fn.extend({on:function(a,b,c,d){return" wa(this,a,b,c,d)},one:function(a,b,c,d){return="" wa(this,a,b,c,d,1)},off:function(a,b,c){var="" d,e;if(a&&a.preventdefault&&a.handleobj)return="" d="a.handleObj,r(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof" a){for(e="" in="" a)this.off(e,b,a[e]);return="" this}return="" b!="=!1&&"function"!=typeof" b||(c="b,b=void" 0),c="==!1&&(c=ua),this.each(function(){r.event.remove(this,a,c,b)})}});var" xa="/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0">\x20\t\r\n\f]*)[^>]*)\/>/gi,ya=/<script|<style|<link i,za="/checked\s*(?:[^=]|=\s*.checked.)/i,Aa=/^true\/(.*)/,Ba=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)">\s*$/g;function Ca(a,b){return r.nodeName(a,"table")&&r.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a:a}function Da(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function Ea(a){var b=Aa.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Fa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(V.hasData(a)&&(f=V.access(a),g=V.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)r.event.add(b,e,j[e][c])}W.hasData(a)&&(h=W.access(a),i=r.extend({},h),W.set(b,i))}}function Ga(a,b){var c=b.nodeName.toLowerCase();"input"===c&&ha.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function Ha(a,b,c,d){b=g.apply([],b);var e,f,h,i,j,k,l=0,m=a.length,n=m-1,q=b[0],s=r.isFunction(q);if(s||m>1&&"string"==typeof q&&!o.checkClone&&za.test(q))return a.each(function(e){var f=a.eq(e);s&&(b[0]=q.call(this,e,f.html())),Ha(f,b,c,d)});if(m&&(e=oa(b,a[0].ownerDocument,!1,a,d),f=e.firstChild,1===e.childNodes.length&&(e=f),f||d)){for(h=r.map(la(e,"script"),Da),i=h.length;m>l;l++)j=e,l!==n&&(j=r.clone(j,!0,!0),i&&r.merge(h,la(j,"script"))),c.call(a[l],j,l);if(i)for(k=h[h.length-1].ownerDocument,r.map(h,Ea),l=0;i>l;l++)j=h[l],ja.test(j.type||"")&&!V.access(j,"globalEval")&&r.contains(k,j)&&(j.src?r._evalUrl&&r._evalUrl(j.src):p(j.textContent.replace(Ba,""),k))}return a}function Ia(a,b,c){for(var d,e=b?r.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||r.cleanData(la(d)),d.parentNode&&(c&&r.contains(d.ownerDocument,d)&&ma(la(d,"script")),d.parentNode.removeChild(d));return a}r.extend({htmlPrefilter:function(a){return a.replace(xa,"<$1>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=r.contains(a.ownerDocument,a);if(!(o.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||r.isXMLDoc(a)))for(g=la(h),f=la(a),d=0,e=f.length;e>d;d++)Ga(f[d],g[d]);if(b)if(c)for(f=f||la(a),g=g||la(h),d=0,e=f.length;e>d;d++)Fa(f[d],g[d]);else Fa(a,h);return g=la(h,"script"),g.length>0&&ma(g,!i&&la(a,"script")),h},cleanData:function(a){for(var b,c,d,e=r.event.special,f=0;void 0!==(c=a[f]);f++)if(T(c)){if(b=c[V.expando]){if(b.events)for(d in b.events)e[d]?r.event.remove(c,d):r.removeEvent(c,d,b.handle);c[V.expando]=void 0}c[W.expando]&&(c[W.expando]=void 0)}}}),r.fn.extend({detach:function(a){return Ia(this,a,!0)},remove:function(a){return Ia(this,a)},text:function(a){return S(this,function(a){return void 0===a?r.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.appendChild(a)}})},prepend:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(r.cleanData(la(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return r.clone(this,a,b)})},html:function(a){return S(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!ya.test(a)&&!ka[(ia.exec(a)||["",""])[1].toLowerCase()]){a=r.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(r.cleanData(la(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ha(this,arguments,function(b){var c=this.parentNode;r.inArray(this,a)<0&&(r.cleandata(la(this)),c&&c.replacechild(b,this))},a)}}),r.each({appendto:"append",prependto:"prepend",insertbefore:"before",insertafter:"after",replaceall:"replacewith"},function(a,b){r.fn[a]=function(a){for(var c,d="[],e=r(a),f=e.length-1,g=0;f">=g;g++)c=g===f?this:this.clone(!0),r(e[g])[b](c),h.apply(d,c.get());return this.pushStack(d)}});var Ja=/^margin/,Ka=new RegExp("^("+$+")(?!px)[a-z%]+$","i"),La=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)};!function(){function b(){if(i){i.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",i.innerHTML="",pa.appendChild(h);var b=a.getComputedStyle(i);c="1%"!==b.top,g="2px"===b.marginLeft,e="4px"===b.width,i.style.marginRight="50%",f="4px"===b.marginRight,pa.removeChild(h),i=null}}var c,e,f,g,h=d.createElement("div"),i=d.createElement("div");i.style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",o.clearCloneStyle="content-box"===i.style.backgroundClip,h.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",h.appendChild(i),r.extend(o,{pixelPosition:function(){return b(),c},boxSizingReliable:function(){return b(),e},pixelMarginRight:function(){return b(),f},reliableMarginLeft:function(){return b(),g}}))}();function Ma(a,b,c){var d,e,f,g,h=a.style;return c=c||La(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||r.contains(a.ownerDocument,a)||(g=r.style(a,b)),!o.pixelMarginRight()&&Ka.test(g)&&Ja.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Na(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Oa=/^(none|table(?!-c[ea]).+)/,Pa={position:"absolute",visibility:"hidden",display:"block"},Qa={letterSpacing:"0",fontWeight:"400"},Ra=["Webkit","Moz","ms"],Sa=d.createElement("div").style;function Ta(a){if(a in Sa)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ra.length;while(c--)if(a=Ra[c]+b,a in Sa)return a}function Ua(a,b,c){var d=_.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Va(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=r.css(a,c+aa[f],!0,e)),d?("content"===c&&(g-=r.css(a,"padding"+aa[f],!0,e)),"margin"!==c&&(g-=r.css(a,"border"+aa[f]+"Width",!0,e))):(g+=r.css(a,"padding"+aa[f],!0,e),"padding"!==c&&(g+=r.css(a,"border"+aa[f]+"Width",!0,e)));return g}function Wa(a,b,c){var d,e=!0,f=La(a),g="border-box"===r.css(a,"boxSizing",!1,f);if(a.getClientRects().length&&(d=a.getBoundingClientRect()[b]),0>=d||null==d){if(d=Ma(a,b,f),(0>d||null==d)&&(d=a.style[b]),Ka.test(d))return d;e=g&&(o.boxSizingReliable()||d===a.style[b]),d=parseFloat(d)||0}return d+Va(a,b,c||(g?"border":"content"),e,f)+"px"}r.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Ma(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=r.camelCase(b),i=a.style;return b=r.cssProps[h]||(r.cssProps[h]=Ta(h)||h),g=r.cssHooks[b]||r.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=_.exec(c))&&e[1]&&(c=da(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(r.cssNumber[h]?"":"px")),o.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=r.camelCase(b);return b=r.cssProps[h]||(r.cssProps[h]=Ta(h)||h),g=r.cssHooks[b]||r.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Ma(a,b,d)),"normal"===e&&b in Qa&&(e=Qa[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),r.each(["height","width"],function(a,b){r.cssHooks[b]={get:function(a,c,d){return c?!Oa.test(r.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?Wa(a,b,d):ca(a,Pa,function(){return Wa(a,b,d)}):void 0},set:function(a,c,d){var e,f=d&&La(a),g=d&&Va(a,b,d,"border-box"===r.css(a,"boxSizing",!1,f),f);return g&&(e=_.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=r.css(a,b)),Ua(a,c,g)}}}),r.cssHooks.marginLeft=Na(o.reliableMarginLeft,function(a,b){return b?(parseFloat(Ma(a,"marginLeft"))||a.getBoundingClientRect().left-ca(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),r.each({margin:"",padding:"",border:"Width"},function(a,b){r.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+aa[d]+b]=f[d]||f[d-2]||f[0];return e}},Ja.test(a)||(r.cssHooks[a+b].set=Ua)}),r.fn.extend({css:function(a,b){return S(this,function(a,b,c){var d,e,f={},g=0;if(r.isArray(b)){for(d=La(a),e=b.length;e>g;g++)f[b[g]]=r.css(a,b[g],!1,d);return f}return void 0!==c?r.style(a,b,c):r.css(a,b)},a,b,arguments.length>1)}});function Xa(a,b,c,d,e){return new Xa.prototype.init(a,b,c,d,e)}r.Tween=Xa,Xa.prototype={constructor:Xa,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||r.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(r.cssNumber[c]?"":"px")},cur:function(){var a=Xa.propHooks[this.prop];return a&&a.get?a.get(this):Xa.propHooks._default.get(this)},run:function(a){var b,c=Xa.propHooks[this.prop];return this.options.duration?this.pos=b=r.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Xa.propHooks._default.set(this),this}},Xa.prototype.init.prototype=Xa.prototype,Xa.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=r.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){r.fx.step[a.prop]?r.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[r.cssProps[a.prop]]&&!r.cssHooks[a.prop]?a.elem[a.prop]=a.now:r.style(a.elem,a.prop,a.now+a.unit)}}},Xa.propHooks.scrollTop=Xa.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},r.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},r.fx=Xa.prototype.init,r.fx.step={};var Ya,Za,$a=/^(?:toggle|show|hide)$/,_a=/queueHooks$/;function ab(){Za&&(a.requestAnimationFrame(ab),r.fx.tick())}function bb(){return a.setTimeout(function(){Ya=void 0}),Ya=r.now()}function cb(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=aa[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function db(a,b,c){for(var d,e=(gb.tweeners[b]||[]).concat(gb.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function eb(a,b,c){var d,e,f,g,h,i,j,k,l="width"in b||"height"in b,m=this,n={},o=a.style,p=a.nodeType&&ba(a),q=V.get(a,"fxshow");c.queue||(g=r._queueHooks(a,"fx"),null==g.unqueued&&(g.unqueued=0,h=g.empty.fire,g.empty.fire=function(){g.unqueued||h()}),g.unqueued++,m.always(function(){m.always(function(){g.unqueued--,r.queue(a,"fx").length||g.empty.fire()})}));for(d in b)if(e=b[d],$a.test(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}n[d]=q&&q[d]||r.style(a,d)}if(i=!r.isEmptyObject(b),i||!r.isEmptyObject(n)){l&&1===a.nodeType&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=q&&q.display,null==j&&(j=V.get(a,"display")),k=r.css(a,"display"),"none"===k&&(j?k=j:(ga([a],!0),j=a.style.display||j,k=r.css(a,"display"),ga([a]))),("inline"===k||"inline-block"===k&&null!=j)&&"none"===r.css(a,"float")&&(i||(m.done(function(){o.display=j}),null==j&&(k=o.display,j="none"===k?"":k)),o.display="inline-block")),c.overflow&&(o.overflow="hidden",m.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]})),i=!1;for(d in n)i||(q?"hidden"in q&&(p=q.hidden):q=V.access(a,"fxshow",{display:j}),f&&(q.hidden=!p),p&&ga([a],!0),m.done(function(){p||ga([a]),V.remove(a,"fxshow");for(d in n)r.style(a,d,n[d])})),i=db(p?q[d]:0,d,m),d in q||(q[d]=i.start,p&&(i.end=i.start,i.start=0))}}function fb(a,b){var c,d,e,f,g;for(c in a)if(d=r.camelCase(c),e=b[d],f=a[c],r.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=r.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function gb(a,b,c){var d,e,f=0,g=gb.prefilters.length,h=r.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Ya||bb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:r.extend({},b),opts:r.extend(!0,{specialEasing:{},easing:r.easing._default},c),originalProperties:b,originalOptions:c,startTime:Ya||bb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=r.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(fb(k,j.opts.specialEasing);g>f;f++)if(d=gb.prefilters[f].call(j,a,k,j.opts))return r.isFunction(d.stop)&&(r._queueHooks(j.elem,j.opts.queue).stop=r.proxy(d.stop,d)),d;return r.map(k,db,j),r.isFunction(j.opts.start)&&j.opts.start.call(a,j),r.fx.timer(r.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}r.Animation=r.extend(gb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return da(c.elem,a,_.exec(b),c),c}]},tweener:function(a,b){r.isFunction(a)?(b=a,a=["*"]):a=a.match(K);for(var c,d=0,e=a.length;e>d;d++)c=a[d],gb.tweeners[c]=gb.tweeners[c]||[],gb.tweeners[c].unshift(b)},prefilters:[eb],prefilter:function(a,b){b?gb.prefilters.unshift(a):gb.prefilters.push(a)}}),r.speed=function(a,b,c){var e=a&&"object"==typeof a?r.extend({},a):{complete:c||!c&&b||r.isFunction(a)&&a,duration:a,easing:c&&b||b&&!r.isFunction(b)&&b};return r.fx.off||d.hidden?e.duration=0:e.duration="number"==typeof e.duration?e.duration:e.duration in r.fx.speeds?r.fx.speeds[e.duration]:r.fx.speeds._default,null!=e.queue&&e.queue!==!0||(e.queue="fx"),e.old=e.complete,e.complete=function(){r.isFunction(e.old)&&e.old.call(this),e.queue&&r.dequeue(this,e.queue)},e},r.fn.extend({fadeTo:function(a,b,c,d){return this.filter(ba).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=r.isEmptyObject(a),f=r.speed(b,c,d),g=function(){var b=gb(this,r.extend({},a),f);(e||V.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=r.timers,g=V.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&_a.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||r.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=V.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=r.timers,g=d?d.length:0;for(c.finish=!0,r.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),r.each(["toggle","show","hide"],function(a,b){var c=r.fn[b];r.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(cb(b,!0),a,d,e)}}),r.each({slideDown:cb("show"),slideUp:cb("hide"),slideToggle:cb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){r.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),r.timers=[],r.fx.tick=function(){var a,b=0,c=r.timers;for(Ya=r.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||r.fx.stop(),ya=void 0},r.fx.timer="function(a){r.timers.push(a),a()?r.fx.start():r.timers.pop()},r.fx.interval=13,r.fx.start=function(){Za||(Za=a.requestAnimationFrame?a.requestAnimationFrame(ab):a.setInterval(r.fx.tick,r.fx.interval))},r.fx.stop=function(){a.cancelAnimationFrame?a.cancelAnimationFrame(Za):a.clearInterval(Za),Za=null},r.fx.speeds={slow:600,fast:200,_default:400},r.fn.delay=function(b,c){return" b="r.fx?r.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var" e="a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var" a="d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",o.checkOn=""!==a.value,o.optSelected=c.selected,a=d.createElement("input"),a.value="t",a.type="radio",o.radioValue="t"===a.value}();var" hb,ib="r.expr.attrHandle;r.fn.extend({attr:function(a,b){return" s(this,r.attr,a,b,arguments.length="">1)},removeAttr:function(a){return this.each(function(){r.removeAttr(this,a)})}}),r.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?r.prop(a,b,c):(1===f&&r.isXMLDoc(a)||(e=r.attrHooks[b.toLowerCase()]||(r.expr.match.bool.test(b)?hb:void 0)),void 0!==c?null===c?void r.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=r.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!o.radioValue&&"radio"===b&&r.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d=0,e=b&&b.match(K);if(e&&1===a.nodeType)while(c=e[d++])a.removeAttribute(c);}}),hb={set:function(a,b,c){return b===!1?r.removeAttr(a,c):a.setAttribute(c,c),c}},r.each(r.expr.match.bool.source.match(/\w+/g),function(a,b){var c=ib[b]||r.find.attr;ib[b]=function(a,b,d){var e,f,g=b.toLowerCase();return d||(f=ib[g],ib[g]=e,e=null!=c(a,b,d)?g:null,ib[g]=f),e}});var jb=/^(?:input|select|textarea|button)$/i,kb=/^(?:a|area)$/i;r.fn.extend({prop:function(a,b){return S(this,r.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[r.propFix[a]||a]})}}),r.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&r.isXMLDoc(a)||(b=r.propFix[b]||b,e=r.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=r.find.attr(a,"tabindex");return b?parseInt(b,10):jb.test(a.nodeName)||kb.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),o.optSelected||(r.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),r.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){r.propFix[this.toLowerCase()]=this});var lb=/[\t\r\n\f]/g;function mb(a){return a.getAttribute&&a.getAttribute("class")||""}r.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).addClass(a.call(this,b,mb(this)))});if("string"==typeof a&&a){b=a.match(K)||[];while(c=this[i++])if(e=mb(c),d=1===c.nodeType&&(" "+e+" ").replace(lb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h="r.trim(d),e!==h&&c.setAttribute("class",h)}}return" this},removeclass:function(a){var="" b,c,d,e,f,g,h,i="0;if(r.isFunction(a))return" this.each(function(b){r(this).removeclass(a.call(this,b,mb(this)))});if(!arguments.length)return="" this.attr("class","");if("string"="=typeof" a&&a){b="a.match(K)||[];while(c=this[i++])if(e=mb(c),d=1===c.nodeType&&("" "+e+"="" ").replace(lb,"="" ")){g="0;while(f=b[g++])while(d.indexOf("" "+f+"="" ")="">-1)d=d.replace(" "+f+" "," ");h=r.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):r.isFunction(a)?this.each(function(c){r(this).toggleClass(a.call(this,c,mb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=r(this),f=a.match(K)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=mb(this),b&&V.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":V.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+mb(c)+" ").replace(lb," ").indexOf(b)>-1)return!0;return!1}});var nb=/\r/g,ob=/[\x20\t\r\n\f]+/g;r.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=r.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,r(this).val()):a,null==e?e="":"number"==typeof e?e+="":r.isArray(e)&&(e=r.map(e,function(a){return null==a?"":a+""})),b=r.valHooks[this.type]||r.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=r.valHooks[e.type]||r.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(nb,""):null==c?"":c)}}}),r.extend({valHooks:{option:{get:function(a){var b=r.find.attr(a,"value");return null!=b?b:r.trim(r.text(a)).replace(ob," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&!c.disabled&&(!c.parentNode.disabled||!r.nodeName(c.parentNode,"optgroup"))){if(b=r(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=r.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=r.inArray(r.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),r.each(["radio","checkbox"],function(){r.valHooks[this]={set:function(a,b){return r.isArray(b)?a.checked=r.inArray(r(a).val(),b)>-1:void 0}},o.checkOn||(r.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var pb=/^(?:focusinfocus|focusoutblur)$/;r.extend(r.event,{trigger:function(b,c,e,f){var g,h,i,j,k,m,n,o=[e||d],p=l.call(b,"type")?b.type:b,q=l.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!pb.test(p+r.event.triggered)&&(p.indexOf(".")>-1&&(q=p.split("."),p=q.shift(),q.sort()),k=p.indexOf(":")<0&&"on"+p,b=b[r.expando]?b:new r.event(p,"object"="=typeof" b&&b),b.istrigger="f?2:3,b.namespace=q.join("."),b.rnamespace=b.namespace?new" regexp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result="void" 0,b.target||(b.target="e),c=null==c?[b]:r.makeArray(c,[b]),n=r.event.special[p]||{},f||!n.trigger||n.trigger.apply(e,c)!==!1)){if(!f&&!n.noBubble&&!r.isWindow(e)){for(j=n.delegateType||p,pb.test(j+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),i=h;i===(e.ownerDocument||d)&&o.push(i.defaultView||i.parentWindow||a)}g=0;while((h=o[g++])&&!b.isPropagationStopped())b.type=g">1?j:n.bindType||p,m=(V.get(h,"events")||{})[b.type]&&V.get(h,"handle"),m&&m.apply(h,c),m=k&&h[k],m&&m.apply&&T(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=p,f||b.isDefaultPrevented()||n._default&&n._default.apply(o.pop(),c)!==!1||!T(e)||k&&r.isFunction(e[p])&&!r.isWindow(e)&&(i=e[k],i&&(e[k]=null),r.event.triggered=p,e[p](),r.event.triggered=void 0,i&&(e[k]=i)),b.result}},simulate:function(a,b,c){var d=r.extend(new r.Event,c,{type:a,isSimulated:!0});r.event.trigger(d,null,b)}}),r.fn.extend({trigger:function(a,b){return this.each(function(){r.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?r.event.trigger(a,b,c,!0):void 0}}),r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(a,b){r.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),r.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),o.focusin="onfocusin"in a,o.focusin||r.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){r.event.simulate(b,a.target,r.event.fix(a))};r.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=V.access(d,b);e||d.addEventListener(a,c,!0),V.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=V.access(d,b)-1;e?V.access(d,b,e):(d.removeEventListener(a,c,!0),V.remove(d,b))}}});var qb=a.location,rb=r.now(),sb=/\?/;r.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||r.error("Invalid XML: "+b),c};var tb=/\[\]$/,ub=/\r?\n/g,vb=/^(?:submit|button|image|reset|file)$/i,wb=/^(?:input|select|textarea|keygen)/i;function xb(a,b,c,d){var e;if(r.isArray(b))r.each(b,function(b,e){c||tb.test(a)?d(a,e):xb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==r.type(b))d(a,b);else for(e in b)xb(a+"["+e+"]",b[e],c,d)}r.param=function(a,b){var c,d=[],e=function(a,b){var c=r.isFunction(b)?b():b;d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==c?"":c)};if(r.isArray(a)||a.jquery&&!r.isPlainObject(a))r.each(a,function(){e(this.name,this.value)});else for(c in a)xb(c,a[c],b,e);return d.join("&")},r.fn.extend({serialize:function(){return r.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=r.prop(this,"elements");return a?r.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!r(this).is(":disabled")&&wb.test(this.nodeName)&&!vb.test(a)&&(this.checked||!ha.test(a))}).map(function(a,b){var c=r(this).val();return null==c?null:r.isArray(c)?r.map(c,function(a){return{name:b.name,value:a.replace(ub,"\r\n")}}):{name:b.name,value:c.replace(ub,"\r\n")}}).get()}});var yb=/%20/g,zb=/#.*$/,Ab=/([?&])_=[^&]*/,Bb=/^(.*?):[ \t]*([^\r\n]*)$/gm,Cb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Db=/^(?:GET|HEAD)$/,Eb=/^\/\//,Fb={},Gb={},Hb="*/".concat("*"),Ib=d.createElement("a");Ib.href=qb.href;function Jb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(K)||[];if(r.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Kb(a,b,c,d){var e={},f=a===Gb;function g(h){var i;return e[h]=!0,r.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Lb(a,b){var c,d,e=r.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&r.extend(!0,a,d),a}function Mb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Nb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}r.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:qb.href,type:"GET",isLocal:Cb.test(qb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Hb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":r.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Lb(Lb(a,r.ajaxSettings),b):Lb(r.ajaxSettings,a)},ajaxPrefilter:Jb(Fb),ajaxTransport:Jb(Gb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m,n,o=r.ajaxSetup({},c),p=o.context||o,q=o.context&&(p.nodeType||p.jquery)?r(p):r.event,s=r.Deferred(),t=r.Callbacks("once memory"),u=o.statusCode||{},v={},w={},x="canceled",y={readyState:0,getResponseHeader:function(a){var b;if(k){if(!h){h={};while(b=Bb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return k?g:null},setRequestHeader:function(a,b){return null==k&&(a=w[a.toLowerCase()]=w[a.toLowerCase()]||a,v[a]=b),this},overrideMimeType:function(a){return null==k&&(o.mimeType=a),this},statusCode:function(a){var b;if(a)if(k)y.always(a[y.status]);else for(b in a)u[b]=[u[b],a[b]];return this},abort:function(a){var b=a||x;return e&&e.abort(b),A(0,b),this}};if(s.promise(y),o.url=((b||o.url||qb.href)+"").replace(Eb,qb.protocol+"//"),o.type=c.method||c.type||o.method||o.type,o.dataTypes=(o.dataType||"*").toLowerCase().match(K)||[""],null==o.crossDomain){j=d.createElement("a");try{j.href=o.url,j.href=j.href,o.crossDomain=Ib.protocol+"//"+Ib.host!=j.protocol+"//"+j.host}catch(z){o.crossDomain=!0}}if(o.data&&o.processData&&"string"!=typeof o.data&&(o.data=r.param(o.data,o.traditional)),Kb(Fb,o,c,y),k)return y;l=r.event&&o.global,l&&0===r.active++&&r.event.trigger("ajaxStart"),o.type=o.type.toUpperCase(),o.hasContent=!Db.test(o.type),f=o.url.replace(zb,""),o.hasContent?o.data&&o.processData&&0===(o.contentType||"").indexOf("application/x-www-form-urlencoded")&&(o.data=o.data.replace(yb,"+")):(n=o.url.slice(f.length),o.data&&(f+=(sb.test(f)?"&":"?")+o.data,delete o.data),o.cache===!1&&(f=f.replace(Ab,""),n=(sb.test(f)?"&":"?")+"_="+rb++ +n),o.url=f+n),o.ifModified&&(r.lastModified[f]&&y.setRequestHeader("If-Modified-Since",r.lastModified[f]),r.etag[f]&&y.setRequestHeader("If-None-Match",r.etag[f])),(o.data&&o.hasContent&&o.contentType!==!1||c.contentType)&&y.setRequestHeader("Content-Type",o.contentType),y.setRequestHeader("Accept",o.dataTypes[0]&&o.accepts[o.dataTypes[0]]?o.accepts[o.dataTypes[0]]+("*"!==o.dataTypes[0]?", "+Hb+"; q=0.01":""):o.accepts["*"]);for(m in o.headers)y.setRequestHeader(m,o.headers[m]);if(o.beforeSend&&(o.beforeSend.call(p,y,o)===!1||k))return y.abort();if(x="abort",t.add(o.complete),y.done(o.success),y.fail(o.error),e=Kb(Gb,o,c,y)){if(y.readyState=1,l&&q.trigger("ajaxSend",[y,o]),k)return y;o.async&&o.timeout>0&&(i=a.setTimeout(function(){y.abort("timeout")},o.timeout));try{k=!1,e.send(v,A)}catch(z){if(k)throw z;A(-1,z)}}else A(-1,"No Transport");function A(b,c,d,h){var j,m,n,v,w,x=c;k||(k=!0,i&&a.clearTimeout(i),e=void 0,g=h||"",y.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(v=Mb(o,y,d)),v=Nb(o,v,y,j),j?(o.ifModified&&(w=y.getResponseHeader("Last-Modified"),w&&(r.lastModified[f]=w),w=y.getResponseHeader("etag"),w&&(r.etag[f]=w)),204===b||"HEAD"===o.type?x="nocontent":304===b?x="notmodified":(x=v.state,m=v.data,n=v.error,j=!n)):(n=x,!b&&x||(x="error",0>b&&(b=0))),y.status=b,y.statusText=(c||x)+"",j?s.resolveWith(p,[m,x,y]):s.rejectWith(p,[y,x,n]),y.statusCode(u),u=void 0,l&&q.trigger(j?"ajaxSuccess":"ajaxError",[y,o,j?m:n]),t.fireWith(p,[y,x]),l&&(q.trigger("ajaxComplete",[y,o]),--r.active||r.event.trigger("ajaxStop")))}return y},getJSON:function(a,b,c){return r.get(a,b,c,"json")},getScript:function(a,b){return r.get(a,void 0,b,"script")}}),r.each(["get","post"],function(a,b){r[b]=function(a,c,d,e){return r.isFunction(c)&&(e=e||d,d=c,c=void 0),r.ajax(r.extend({url:a,type:b,dataType:e,data:c,success:d},r.isPlainObject(a)&&a))}}),r._evalUrl=function(a){return r.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},r.fn.extend({wrapAll:function(a){var b;return this[0]&&(r.isFunction(a)&&(a=a.call(this[0])),b=r(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this},wrapInner:function(a){return r.isFunction(a)?this.each(function(b){r(this).wrapInner(a.call(this,b))}):this.each(function(){var b=r(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=r.isFunction(a);return this.each(function(c){r(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(a){return this.parent(a).not("body").each(function(){r(this).replaceWith(this.childNodes)}),this}}),r.expr.pseudos.hidden=function(a){return!r.expr.pseudos.visible(a)},r.expr.pseudos.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)},r.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Ob={0:200,1223:204},Pb=r.ajaxSettings.xhr();o.cors=!!Pb&&"withCredentials"in Pb,o.ajax=Pb=!!Pb,r.ajaxTransport(function(b){var c,d;return o.cors||Pb&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Ob[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),r.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),r.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return r.globalEval(a),a}}}),r.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),r.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=r("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Qb=[],Rb=/(=)\?(?=&|$)|\?\?/;r.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Qb.pop()||r.expando+"_"+rb++;return this[a]=!0,a}}),r.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Rb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=r.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Rb,"$1"+e):b.jsonp!==!1&&(b.url+=(sb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||r.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?r(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Qb.push(e)),g&&r.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),o.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),r.parseHTML=function(a,b,c){if("string"!=typeof a)return[];"boolean"==typeof b&&(c=b,b=!1);var e,f,g;return b||(o.createHTMLDocument?(b=d.implementation.createHTMLDocument(""),e=b.createElement("base"),e.href=d.location.href,b.head.appendChild(e)):b=d),f=B.exec(a),g=!c&&[],f?[b.createElement(f[1])]:(f=oa([a],b,g),g&&g.length&&r(g).remove(),r.merge([],f.childNodes))},r.fn.load=function(a,b,c){var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=r.trim(a.slice(h)),a=a.slice(0,h)),r.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&r.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?r("<div>").append(r.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},r.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){r.fn[b]=function(a){return this.on(b,a)}}),r.expr.pseudos.animated=function(a){return r.grep(r.timers,function(b){return a===b.elem}).length};function Sb(a){return r.isWindow(a)?a:9===a.nodeType&&a.defaultView}r.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=r.css(a,"position"),l=r(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=r.css(a,"top"),i=r.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),r.isFunction(b)&&(b=b.call(a,c,r.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},r.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){r.offset.setOffset(this,a,b)});var b,c,d,e,f=this[0];if(f)return f.getClientRects().length?(d=f.getBoundingClientRect(),d.width||d.height?(e=f.ownerDocument,c=Sb(e),b=e.documentElement,{top:d.top+c.pageYOffset-b.clientTop,left:d.left+c.pageXOffset-b.clientLeft}):d):{top:0,left:0}},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===r.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),r.nodeName(a[0],"html")||(d=a.offset()),d={top:d.top+r.css(a[0],"borderTopWidth",!0),left:d.left+r.css(a[0],"borderLeftWidth",!0)}),{top:b.top-d.top-r.css(c,"marginTop",!0),left:b.left-d.left-r.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===r.css(a,"position"))a=a.offsetParent;return a||pa})}}),r.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;r.fn[a]=function(d){return S(this,function(a,d,e){var f=Sb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),r.each(["top","left"],function(a,b){r.cssHooks[b]=Na(o.pixelPosition,function(a,c){return c?(c=Ma(a,b),Ka.test(c)?r(a).position()[b]+"px":c):void 0})}),r.each({Height:"height",Width:"width"},function(a,b){r.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){r.fn[d]=function(e,f){var g=arguments.length&&(c||"boolean"!=typeof e),h=c||(e===!0||f===!0?"margin":"border");return S(this,function(b,c,e){var f;return r.isWindow(b)?0===d.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(f=b.documentElement,Math.max(b.body["scroll"+a],f["scroll"+a],b.body["offset"+a],f["offset"+a],f["client"+a])):void 0===e?r.css(b,c,h):r.style(b,c,e,h)},b,g?e:void 0,g)}})}),r.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),r.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return r});var Tb=a.jQuery,Ub=a.$;return r.noConflict=function(b){return a.$===r&&(a.$=Ub),b&&a.jQuery===r&&(a.jQuery=Tb),r},b||(a.jQuery=a.$=r),r});</script></0&&"on"+p,b=b[r.expando]?b:new></0&&(d+=f+"></c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||r.fx.stop(),ya=void></0&&(r.cleandata(la(this)),c&&c.replacechild(b,this))},a)}}),r.each({appendto:"append",prependto:"prepend",insertbefore:"before",insertafter:"after",replaceall:"replacewith"},function(a,b){r.fn[a]=function(a){for(var></$1></script|<style|<link></b.length&&g.push({elem:this,handlers:b.slice(h)}),g},addprop:function(a,b){object.defineproperty(r.event.prototype,a,{enumerable:!0,configurable:!0,get:r.isfunction(b)?function(){return></arguments.length;c++)i[c]=arguments[c];if(b.delegatetarget=this,!k.predispatch||k.predispatch.call(this,b)!==!1){h=r.event.handlers.call(this,b,j),c=0;while((f=h[c++])&&!b.ispropagationstopped()){b.currenttarget=f.elem,d=0;while((g=f.handlers[d++])&&!b.isimmediatepropagationstopped())b.rnamespace&&!b.rnamespace.test(g.namespace)||(b.handleobj=g,b.data=g.data,e=((r.event.special[g.origtype]||{}).handle||g.handler).apply(f.elem,i),void></|&#?\w+;></([a-z][^\></c?r.queue(this[0],a):void></f.length)f[h].apply(c[0],c[1])===!1&&a.stoponfalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return></11&&(g?g.index(c)></"===a[0]&&"></[\w\w]+></\></([a-z][^\></b;)a.push(d);return></6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return>]]></content>
    </entry>
    
  
</search>
