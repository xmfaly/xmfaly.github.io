<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[spring boot 配置 https|ssl]]></title>
      <url>/2017/11/08/spring-boot-%E9%85%8D%E7%BD%AE-https-ssl/</url>
      <content type="html"><![CDATA[<p>ssl证书我选择了免费的<a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a></p>
<h3 id="1-下载脚本并生成证书"><a href="#1-下载脚本并生成证书" class="headerlink" title="1.下载脚本并生成证书"></a>1.下载脚本并生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># git clone https://github.com/letsencrypt/letsencrypt</div><div class="line"># cd letsencrypt</div><div class="line"># ./letsencrypt-auto certonly --standalone --email 邮箱 -d 域名</div></pre></td></tr></table></figure>
<p>因为网络问题pip可能需要换源，请自行网上查找换源方法。</p>
<h3 id="2-设置自动延期"><a href="#2-设置自动延期" class="headerlink" title="2.设置自动延期"></a>2.设置自动延期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ./letsencrypt-auto --renew certonly --email 邮箱 -d 域名</div></pre></td></tr></table></figure>
<h3 id="3-查看证书"><a href="#3-查看证书" class="headerlink" title="3.查看证书"></a>3.查看证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /etc/letsencrypt/live/</div><div class="line"># cd 域名</div><div class="line">fullchain.pem 为证书  privatkey.pem 为密钥</div></pre></td></tr></table></figure>
<h3 id="4-生成-jks证书"><a href="#4-生成-jks证书" class="headerlink" title="4.生成.jks证书"></a>4.生成.jks证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name tomcat</div><div class="line"># keytool -importkeystore -deststorepass &apos;yourJKSpass&apos; -destkeypass &apos;yourKeyPass&apos; -destkeystore MyDSKeyStore.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass &apos;yourPKCS12pass&apos; -alias tomcat</div></pre></td></tr></table></figure>
<p>第一步会让你输入密码，对应第二步中的yourPKCS12pass 。第二步中的前两个密码自己设置一下并记好，下面的会用到。</p>
<h3 id="5-配置spring-boot"><a href="#5-配置spring-boot" class="headerlink" title="5.配置spring-boot"></a>5.配置spring-boot</h3><p>将.jsk文件放到<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">server.port = 8443</div><div class="line">server.ssl.key-store = classpath:MyDSKeyStore.jks</div><div class="line">server.ssl.key-store-password = yourJKSpass</div><div class="line">server.ssl.key-password = yourKeyPass</div></pre></td></tr></table></figure></p>
<p>此时服务器支持https，但只支持https<br>可以配置同时支持htttp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Bean</div><div class="line">public Integer port() &#123;</div><div class="line">    return 8080;</div><div class="line">    //return SocketUtils.findAvailableTcpPort();</div><div class="line">&#125;</div><div class="line">@Bean</div><div class="line">public EmbeddedServletContainerFactory servletContainer() &#123;</div><div class="line">    TomcatEmbeddedServletContainerFactory tomcat = new 					  TomcatEmbeddedServletContainerFactory();</div><div class="line">    tomcat.addAdditionalTomcatConnectors(createStandardConnector());</div><div class="line">    return tomcat;</div><div class="line">&#125;</div><div class="line">private Connector createStandardConnector() &#123;</div><div class="line">    Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</div><div class="line">    connector.setPort(port());</div><div class="line">    return connector;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样 8080端口是http 8443端口是https<br>也可以设置http自动重定向到https<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</div><div class="line">   private int port;</div><div class="line">@Bean</div><div class="line">   public EmbeddedServletContainerFactory servletContainer() &#123;</div><div class="line">       TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory() &#123;</div><div class="line">           @Override</div><div class="line">           protected void postProcessContext(Context context) &#123;</div><div class="line">               SecurityConstraint securityConstraint = new SecurityConstraint();</div><div class="line">               securityConstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</div><div class="line">               SecurityCollection collection = new SecurityCollection();</div><div class="line">               collection.addPattern(&quot;/*&quot;);</div><div class="line">               securityConstraint.addCollection(collection);</div><div class="line">               context.addConstraint(securityConstraint);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">       tomcat.addAdditionalTomcatConnectors(initiateHttpConnector());</div><div class="line">       return tomcat;</div><div class="line">   &#125;</div><div class="line">   private Connector initiateHttpConnector() &#123;</div><div class="line">       Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</div><div class="line">       connector.setScheme(&quot;http&quot;);</div><div class="line">       connector.setPort(8080);</div><div class="line">       connector.setSecure(false);</div><div class="line">       connector.setRedirectPort(port);</div><div class="line">       return connector;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java工具类整理(持续更新)]]></title>
      <url>/2017/10/20/Java%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%95%B4%E7%90%86-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>以下整理常用的java工具类。</p>
<h3 id="二维码生成和解析-网上很多接口也很方便"><a href="#二维码生成和解析-网上很多接口也很方便" class="headerlink" title="二维码生成和解析(网上很多接口也很方便)"></a>二维码生成和解析(网上很多接口也很方便)</h3><p>使用google的zxing<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;javase&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;3.3.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line">import com.google.zxing.*;</div><div class="line">import com.google.zxing.Reader;</div><div class="line">import com.google.zxing.client.j2se.BufferedImageLuminanceSource;</div><div class="line">import com.google.zxing.client.j2se.MatrixToImageWriter;</div><div class="line">import com.google.zxing.common.BitMatrix;</div><div class="line">import com.google.zxing.common.HybridBinarizer;</div><div class="line">import com.google.zxing.multi.GenericMultipleBarcodeReader;</div><div class="line">import com.google.zxing.multi.MultipleBarcodeReader;</div><div class="line"></div><div class="line">import javax.imageio.ImageIO;</div><div class="line">import java.io.*;</div><div class="line">import java.nio.file.FileSystems;</div><div class="line">import java.nio.file.Path;</div><div class="line">import java.util.*;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 二维码生成工具类</div><div class="line"> *</div><div class="line"> * @author KisChang</div><div class="line"> * @version 1.0</div><div class="line"> * @date 2015年12月03日</div><div class="line"> * @since 1.0</div><div class="line"> */</div><div class="line">public class ZXingUtils &#123;</div><div class="line"></div><div class="line">    public static enum ImageType &#123;</div><div class="line">        JPEG(&quot;jpeg&quot;),PNG(&quot;png&quot;),GIF(&quot;gif&quot;);</div><div class="line">        private String value;</div><div class="line"></div><div class="line">        ImageType(String value) &#123;</div><div class="line">            this.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getValue() &#123;</div><div class="line">            return value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**编码*/</div><div class="line">    public static class Encode &#123;</div><div class="line"></div><div class="line">        private static Map&lt;EncodeHintType, Object&gt; HINTS;</div><div class="line">        static &#123;</div><div class="line">            HINTS = new EnumMap&lt;EncodeHintType,Object&gt;(EncodeHintType.class);</div><div class="line">            HINTS.put(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);</div><div class="line">        &#125;</div><div class="line">        /**</div><div class="line">         * 生成二维码</div><div class="line">         * @param widthAndHeight    高宽</div><div class="line">         * @param content           二维码内容</div><div class="line">         * @param os                输出流</div><div class="line">         */</div><div class="line">        public static void buildQRCode(int widthAndHeight, String content, OutputStream os, ImageType imageType) throws WriterException, IOException &#123;</div><div class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight, HINTS);// 生成矩阵</div><div class="line">            MatrixToImageWriter.writeToStream(bitMatrix, imageType.getValue(), os);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void buildQRCode(String content, OutputStream os, ImageType imageType) throws WriterException, IOException &#123;</div><div class="line">            buildQRCode(200, content, os, imageType);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 生成二维码</div><div class="line">         * @param widthAndHeight    高宽</div><div class="line">         * @param content           二维码内容</div><div class="line">         * @param filePath          输出目录</div><div class="line">         * @param fileName          输出文件名</div><div class="line">         * @param imageType         输出文件类型</div><div class="line">         */</div><div class="line">        public static void buildQRCode(int widthAndHeight, String content, String filePath, String fileName, ImageType imageType) throws WriterException, IOException &#123;</div><div class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(content,</div><div class="line">                    BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight, HINTS);</div><div class="line">            Path path = FileSystems.getDefault().getPath(filePath, fileName);</div><div class="line">            MatrixToImageWriter.writeToPath(bitMatrix, imageType.getValue(), path);// 输出图像</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void buildQRCode(String content, String filePath, String fileName, ImageType imageType) throws WriterException, IOException &#123;</div><div class="line">            buildQRCode(200, content,filePath,fileName,imageType);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**解码*/</div><div class="line">    public static class Decode &#123;</div><div class="line"></div><div class="line">        private static final Map&lt;DecodeHintType,Object&gt; HINTS;</div><div class="line">        private static final Map&lt;DecodeHintType,Object&gt; HINTS_PURE;</div><div class="line">        static &#123;</div><div class="line">            HINTS = new EnumMap&lt;DecodeHintType,Object&gt;(DecodeHintType.class);</div><div class="line">            HINTS.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);</div><div class="line">            HINTS.put(DecodeHintType.POSSIBLE_FORMATS, EnumSet.allOf(BarcodeFormat.class));</div><div class="line">            HINTS_PURE = new EnumMap&lt;DecodeHintType,Object&gt;(HINTS);</div><div class="line">            HINTS_PURE.put(DecodeHintType.PURE_BARCODE, Boolean.TRUE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 解析二维码</div><div class="line">         */</div><div class="line">        public static Collection&lt;Result&gt; readQRCode(File qrCode) throws ReaderException, IOException &#123;</div><div class="line">            FileInputStream inputStream = new FileInputStream(qrCode);</div><div class="line">            return readQRCode(inputStream);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static Collection&lt;Result&gt; readQRCode(InputStream inputStream) throws ReaderException, IOException &#123;</div><div class="line">            LuminanceSource source = new BufferedImageLuminanceSource(ImageIO.read(inputStream));</div><div class="line">            BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(source));</div><div class="line"></div><div class="line">            Collection&lt;Result&gt; results = new ArrayList&lt;Result&gt;(1);</div><div class="line">            ReaderException savedException = null;</div><div class="line">            Reader reader = new MultiFormatReader();</div><div class="line">            try &#123;</div><div class="line">                //寻找多个条码</div><div class="line">                MultipleBarcodeReader multiReader = new GenericMultipleBarcodeReader(reader);</div><div class="line">                Result[] theResults = multiReader.decodeMultiple(binaryBitmap, HINTS);</div><div class="line">                if (theResults != null) &#123;</div><div class="line">                    results.addAll(Arrays.asList(theResults));</div><div class="line">                &#125;</div><div class="line">            &#125; catch (ReaderException re) &#123;</div><div class="line">                savedException = re;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (results.isEmpty()) &#123;</div><div class="line">                try &#123;</div><div class="line">                    //寻找纯条码</div><div class="line">                    Result theResult = reader.decode(binaryBitmap, HINTS_PURE);</div><div class="line">                    if (theResult != null) &#123;</div><div class="line">                        results.add(theResult);</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (ReaderException re) &#123;</div><div class="line">                    savedException = re;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (results.isEmpty()) &#123;</div><div class="line">                try &#123;</div><div class="line">                    //寻找图片中的正常条码</div><div class="line">                    Result theResult = reader.decode(binaryBitmap, HINTS);</div><div class="line">                    if (theResult != null) &#123;</div><div class="line">                        results.add(theResult);</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (ReaderException re) &#123;</div><div class="line">                    savedException = re;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (results.isEmpty()) &#123;</div><div class="line">                try &#123;</div><div class="line">                    //再次尝试其他特殊处理</div><div class="line">                    BinaryBitmap hybridBitmap = new BinaryBitmap(new HybridBinarizer(source));</div><div class="line">                    Result theResult = reader.decode(hybridBitmap, HINTS);</div><div class="line">                    if (theResult != null) &#123;</div><div class="line">                        results.add(theResult);</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (ReaderException re) &#123;</div><div class="line">                    savedException = re;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if (results.isEmpty())&#123;</div><div class="line">                throw savedException;</div><div class="line">            &#125;else &#123;</div><div class="line">                return results;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        public static Result readQRCodeResult(File qrCode) throws ReaderException, IOException &#123;</div><div class="line">            FileInputStream inputStream = new FileInputStream(qrCode);</div><div class="line">            return readQRCodeResult(inputStream);</div><div class="line">        &#125;</div><div class="line">        public static Result readQRCodeResult(InputStream inputStream) throws ReaderException, IOException &#123;</div><div class="line">            Collection&lt;Result&gt; results = readQRCode(inputStream);</div><div class="line">            if (!results.isEmpty())&#123;</div><div class="line">                //寻找结果集中非空的结果</div><div class="line">                for (Result result : results)&#123;</div><div class="line">                    if (result != null)&#123;</div><div class="line">                        return result;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            throw NotFoundException.getNotFoundInstance();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import java.math.BigInteger;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">public class MD5 &#123;</div><div class="line"></div><div class="line">    public static String getMD5(String str) throws NoSuchAlgorithmException &#123;</div><div class="line"></div><div class="line">        // 生成一个MD5加密计算摘要</div><div class="line">        MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line">        // 计算md5函数</div><div class="line">        md.update(str.getBytes());</div><div class="line">        // digest()最后确定返回md5 hash值，返回值为8为字符串。因为md5 hash值是16位的hex值，实际上就是8位的字符</div><div class="line">        // BigInteger函数则将8位的字符串转换成16位hex值，用字符串来表示；得到字符串形式的hash值</div><div class="line">        return new BigInteger(1, md.digest()).toString(16);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读取excel"><a href="#读取excel" class="headerlink" title="读取excel"></a>读取excel</h3><p>依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.17-beta1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.16-beta1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line">import org.apache.poi.ss.usermodel.*;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.text.DecimalFormat;</div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line">public class ReadExcelUtils &#123;</div><div class="line"></div><div class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class="line">    private Workbook wb;</div><div class="line">    private Sheet sheet;</div><div class="line">    private Row row;</div><div class="line">    public ReadExcelUtils(String filepath) &#123;</div><div class="line">        if(filepath==null)&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        String ext = filepath.substring(filepath.lastIndexOf(&quot;.&quot;));</div><div class="line">        try &#123;</div><div class="line">            InputStream is = new FileInputStream(filepath);</div><div class="line">            if(&quot;.xls&quot;.equals(ext))&#123;</div><div class="line">                wb = new HSSFWorkbook(is);</div><div class="line">            &#125;else if(&quot;.xlsx&quot;.equals(ext))&#123;</div><div class="line">                wb = new XSSFWorkbook(is);</div><div class="line">            &#125;else&#123;</div><div class="line">                wb=null;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            logger.error(&quot;FileNotFoundException&quot;, e);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            logger.error(&quot;IOException&quot;, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 读取Excel表格表头的内容</div><div class="line">     * @return String 表头内容的数组</div><div class="line">     */</div><div class="line">    public String[] readExcelTitle() throws Exception&#123;</div><div class="line">        if(wb==null)&#123;</div><div class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</div><div class="line">        &#125;</div><div class="line">        sheet = wb.getSheetAt(0);</div><div class="line">        row = sheet.getRow(0);</div><div class="line">        // 标题总列数</div><div class="line">        int colNum = row.getPhysicalNumberOfCells();</div><div class="line">        String[] title = new String[colNum];</div><div class="line">        for (int i = 0; i &lt; colNum; i++) &#123;</div><div class="line">            // title[i] = getStringCellValue(row.getCell((short) i));</div><div class="line">            title[i] = row.getCell(i).getStringCellValue();</div><div class="line">        &#125;</div><div class="line">        return title;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 读取Excel数据内容</div><div class="line">     * @return Map 包含单元格数据内容的Map对象</div><div class="line">     */</div><div class="line">    public Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; readExcelContent() throws Exception&#123;</div><div class="line">        if(wb==null)&#123;</div><div class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</div><div class="line">        &#125;</div><div class="line">        Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; content = new HashMap&lt;Integer, Map&lt;Integer,Object&gt;&gt;();</div><div class="line">        sheet = wb.getSheetAt(0);</div><div class="line">        // 得到总行数</div><div class="line">        int rowNum = sheet.getLastRowNum();</div><div class="line">        row = sheet.getRow(0);</div><div class="line">        int colNum = row.getPhysicalNumberOfCells();</div><div class="line">        // 正文内容应该从第二行开始,第一行为表头的标题</div><div class="line">        for (int i = 1; i &lt;= rowNum; i++) &#123;</div><div class="line">            row = sheet.getRow(i);</div><div class="line">            int j = 0;</div><div class="line">            Map&lt;Integer,Object&gt; cellValue = new HashMap&lt;Integer, Object&gt;();</div><div class="line">            while (j &lt; colNum) &#123;</div><div class="line">                Object obj = getCellFormatValue(row.getCell(j));</div><div class="line">                cellValue.put(j, obj);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            content.put(i, cellValue);</div><div class="line">        &#125;</div><div class="line">        return content;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 根据Cell类型设置数据</div><div class="line">     * @param cell</div><div class="line">     * @return Object</div><div class="line">     */</div><div class="line">    private Object getCellFormatValue(Cell cell) &#123;</div><div class="line">        Object cellvalue = &quot;&quot;;</div><div class="line">        if (cell != null) &#123;</div><div class="line">            // 判断当前Cell的Type</div><div class="line">            switch (cell.getCellType()) &#123;</div><div class="line">                case Cell.CELL_TYPE_NUMERIC:// 如果当前Cell的Type为NUMERIC</div><div class="line">                case Cell.CELL_TYPE_FORMULA: &#123;</div><div class="line">                    // 判断当前的cell是否为Date</div><div class="line">                    if (DateUtil.isCellDateFormatted(cell)) &#123;</div><div class="line">                        Date date = cell.getDateCellValue();</div><div class="line">                        SimpleDateFormat dateformat=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</div><div class="line">                        cellvalue = dateformat.format(date);</div><div class="line"></div><div class="line">                    &#125; else &#123;</div><div class="line">                        // 如果是纯数字</div><div class="line">                        // 取得当前Cell的数值</div><div class="line">                        DecimalFormat df = new DecimalFormat(&quot;0&quot;);</div><div class="line">                        cellvalue = df.format(cell.getNumericCellValue());</div><div class="line">                    &#125;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                case Cell.CELL_TYPE_STRING:// 如果当前Cell的Type为STRING</div><div class="line">                    // 取得当前的Cell字符串</div><div class="line">                    cellvalue = cell.getRichStringCellValue().getString();</div><div class="line">                    break;</div><div class="line">                default:// 默认的Cell值</div><div class="line">                    cellvalue = &quot;&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            cellvalue = &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">        return cellvalue;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="加密工具类"><a href="#加密工具类" class="headerlink" title="加密工具类"></a>加密工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">import java.security.Key;</div><div class="line">import java.security.spec.AlgorithmParameterSpec;</div><div class="line"></div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.SecretKeyFactory;</div><div class="line">import javax.crypto.spec.DESKeySpec;</div><div class="line">import javax.crypto.spec.IvParameterSpec;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 加密解密工具包</div><div class="line"> */</div><div class="line">public class CyptoUtils &#123;</div><div class="line"></div><div class="line">    public static final String ALGORITHM_DES = &quot;DES/CBC/PKCS5Padding&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * DES算法，加密</div><div class="line">     *</div><div class="line">     * @param data 待加密字符串</div><div class="line">     * @param key  加密私钥，长度不能够小于8位</div><div class="line">     * @return 加密后的字节数组，一般结合Base64编码使用</div><div class="line">     * @throws Exception</div><div class="line">     */</div><div class="line">    public static String encode(String key,String data) &#123;</div><div class="line">        if(data == null)</div><div class="line">            return null;</div><div class="line">        try&#123;</div><div class="line">            DESKeySpec dks = new DESKeySpec(key.getBytes());</div><div class="line">            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DES&quot;);</div><div class="line">            //key的长度不能够小于8位字节</div><div class="line">            Key secretKey = keyFactory.generateSecret(dks);</div><div class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM_DES);</div><div class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;12345678&quot;.getBytes());</div><div class="line">            AlgorithmParameterSpec paramSpec = iv;</div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKey,paramSpec);</div><div class="line">            byte[] bytes = cipher.doFinal(data.getBytes());</div><div class="line">            return byte2hex(bytes);</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return data;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * DES算法，解密</div><div class="line">     *</div><div class="line">     * @param data 待解密字符串</div><div class="line">     * @param key  解密私钥，长度不能够小于8位</div><div class="line">     * @return 解密后的字节数组</div><div class="line">     * @throws Exception 异常</div><div class="line">     */</div><div class="line">    public static String decode(String key,String data) &#123;</div><div class="line">        if(data == null)</div><div class="line">            return null;</div><div class="line">        try &#123;</div><div class="line">            DESKeySpec dks = new DESKeySpec(key.getBytes());</div><div class="line">            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DES&quot;);</div><div class="line">            //key的长度不能够小于8位字节</div><div class="line">            Key secretKey = keyFactory.generateSecret(dks);</div><div class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM_DES);</div><div class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;12345678&quot;.getBytes());</div><div class="line">            AlgorithmParameterSpec paramSpec = iv;</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKey, paramSpec);</div><div class="line">            return new String(cipher.doFinal(hex2byte(data.getBytes())));</div><div class="line">        &#125; catch (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return data;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 二行制转字符串</div><div class="line">     * @param b</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private static String byte2hex(byte[] b) &#123;</div><div class="line">        StringBuilder hs = new StringBuilder();</div><div class="line">        String stmp;</div><div class="line">        for (int n = 0; b!=null &amp;&amp; n &lt; b.length; n++) &#123;</div><div class="line">            stmp = Integer.toHexString(b[n] &amp; 0XFF);</div><div class="line">            if (stmp.length() == 1)</div><div class="line">                hs.append(&apos;0&apos;);</div><div class="line">            hs.append(stmp);</div><div class="line">        &#125;</div><div class="line">        return hs.toString().toUpperCase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static byte[] hex2byte(byte[] b) &#123;</div><div class="line">        if((b.length%2)!=0)</div><div class="line">            throw new IllegalArgumentException();</div><div class="line">        byte[] b2 = new byte[b.length/2];</div><div class="line">        for (int n = 0; n &lt; b.length; n+=2) &#123;</div><div class="line">            String item = new String(b,n,2);</div><div class="line">            b2[n/2] = (byte)Integer.parseInt(item,16);</div><div class="line">        &#125;</div><div class="line">        return b2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import java.util.Enumeration;</div><div class="line">import java.util.zip.*;</div><div class="line"></div><div class="line">public class CompressUtil &#123;</div><div class="line"></div><div class="line"></div><div class="line">    static final int BUFFER = 8192;</div><div class="line"></div><div class="line">    public static void compress(String srcPath , String dstPath) throws IOException &#123;</div><div class="line">        File srcFile = new File(srcPath);</div><div class="line">        File dstFile = new File(dstPath);</div><div class="line">        if (!srcFile.exists()) &#123;</div><div class="line">            throw new FileNotFoundException(srcPath + &quot;不存在！&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FileOutputStream out = null;</div><div class="line">        ZipOutputStream zipOut = null;</div><div class="line">        try &#123;</div><div class="line">            out = new FileOutputStream(dstFile);</div><div class="line">            CheckedOutputStream cos = new CheckedOutputStream(out,new CRC32());</div><div class="line">            zipOut = new ZipOutputStream(cos);</div><div class="line">            String baseDir = &quot;&quot;;</div><div class="line">            compress(srcFile, zipOut, baseDir);</div><div class="line">        &#125;</div><div class="line">        finally &#123;</div><div class="line">            if(null != zipOut)&#123;</div><div class="line">                zipOut.close();</div><div class="line">                out = null;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if(null != out)&#123;</div><div class="line">                out.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void compress(File file, ZipOutputStream zipOut, String baseDir) throws IOException&#123;</div><div class="line">        if (file.isDirectory()) &#123;</div><div class="line">            compressDirectory(file, zipOut, baseDir);</div><div class="line">        &#125; else &#123;</div><div class="line">            compressFile(file, zipOut, baseDir);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 压缩一个目录 */</div><div class="line">    private static void compressDirectory(File dir, ZipOutputStream zipOut, String baseDir) throws IOException&#123;</div><div class="line">        File[] files = dir.listFiles();</div><div class="line">        for (int i = 0; i &lt; files.length; i++) &#123;</div><div class="line">            compress(files[i], zipOut, baseDir + dir.getName() + &quot;/&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 压缩一个文件 */</div><div class="line">    private static void compressFile(File file, ZipOutputStream zipOut, String baseDir)  throws IOException&#123;</div><div class="line">        if (!file.exists())&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        BufferedInputStream bis = null;</div><div class="line">        try &#123;</div><div class="line">            bis = new BufferedInputStream(new FileInputStream(file));</div><div class="line">            ZipEntry entry = new ZipEntry(baseDir + file.getName());</div><div class="line">            zipOut.putNextEntry(entry);</div><div class="line">            int count;</div><div class="line">            byte data[] = new byte[BUFFER];</div><div class="line">            while ((count = bis.read(data, 0, BUFFER)) != -1) &#123;</div><div class="line">                zipOut.write(data, 0, count);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;finally &#123;</div><div class="line">            if(null != bis)&#123;</div><div class="line">                bis.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static void decompress(String zipFile , String dstPath)throws IOException&#123;</div><div class="line">        File pathFile = new File(dstPath);</div><div class="line">        if(!pathFile.exists())&#123;</div><div class="line">            pathFile.mkdirs();</div><div class="line">        &#125;</div><div class="line">        ZipFile zip = new ZipFile(zipFile);</div><div class="line">        for(Enumeration entries = zip.entries(); entries.hasMoreElements();)&#123;</div><div class="line">            ZipEntry entry = (ZipEntry)entries.nextElement();</div><div class="line">            String zipEntryName = entry.getName();</div><div class="line">            InputStream in = null;</div><div class="line">            OutputStream out = null;</div><div class="line">            try&#123;</div><div class="line">                in =  zip.getInputStream(entry);</div><div class="line">                String outPath = (dstPath+&quot;/&quot;+zipEntryName).replaceAll(&quot;\\*&quot;, &quot;/&quot;);;</div><div class="line">                //判断路径是否存在,不存在则创建文件路径</div><div class="line">                File file = new File(outPath.substring(0, outPath.lastIndexOf(&apos;/&apos;)));</div><div class="line">                if(!file.exists())&#123;</div><div class="line">                    file.mkdirs();</div><div class="line">                &#125;</div><div class="line">                //判断文件全路径是否为文件夹,如果是上面已经上传,不需要解压</div><div class="line">                if(new File(outPath).isDirectory())&#123;</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                out = new FileOutputStream(outPath);</div><div class="line">                byte[] buf1 = new byte[1024];</div><div class="line">                int len;</div><div class="line">                while((len=in.read(buf1))&gt;0)&#123;</div><div class="line">                    out.write(buf1,0,len);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            finally &#123;</div><div class="line">                if(null != in)&#123;</div><div class="line">                    in.close();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                if(null != out)&#123;</div><div class="line">                    out.close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用poi读写excel]]></title>
      <url>/2017/10/08/%E4%BD%BF%E7%94%A8poi%E8%AF%BB%E5%86%99excel/</url>
      <content type="html"><![CDATA[<p>首先了解以下excel文件怎么和poi中的组件对应起来的。　　</p>
<ul>
<li>一个Excel文件对应于一个Workbook对象</li>
<li>一个Workbook可以有多个Sheet对象</li>
<li>一个Sheet对象由多个Row对象组成</li>
<li>一个Row对象是由多个Cell对象组成 </li>
</ul>
<p>基于以上几条，如果想对excel文件进行读写的话就要</p>
<ol>
<li>用Workbook打开或者创建一个Excel文件的对象</li>
<li>用上一步的Excel对象创建或者获取到一个Sheet对象</li>
<li>用Sheet对象创建或获取一个Row对象</li>
<li>用Row对象创建或获取一个Cell对象</li>
<li>对Cell对象读写。</li>
</ol>
<p>基于以上原理就可以轻松对Excel文件进行读写，这里以XSSFWorkbook（对应.xlsx文件即office2007以上版本，如果是.xls文件即office2003以下版本需要使用HSSFWorkbook）为例进行Excel的简单读写。<br>maven依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> &lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.17-beta1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.16-beta1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>写操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//创建一个Excel对象</div><div class="line">XSSFWorkbook wb = new XSSFWorkbook();</div><div class="line"></div><div class="line">//创建表单Sheet对象</div><div class="line">XSSFSheet sheet = wb.createSheet();</div><div class="line"></div><div class="line">//创建Row对象</div><div class="line">XSSFRow row1 = sheet.createRow(0);</div><div class="line">XSSFRow row2 = sheet.createRow(1);</div><div class="line">XSSFRow row3 = sheet.createRow(2);</div><div class="line"></div><div class="line">//创建Cell对象，并进行写操作</div><div class="line"></div><div class="line">//第一行</div><div class="line">XSSFCell cell1 =  row1.createCell(0);</div><div class="line">cell1.setCellValue(&quot;姓名&quot;);</div><div class="line">XSSFCell cell2 =  row1.createCell(1);</div><div class="line">cell2.setCellValue(&quot;年龄&quot;);</div><div class="line"></div><div class="line">//第二行</div><div class="line">cell1 =  row2.createCell(0);</div><div class="line">cell1.setCellValue(&quot;张三&quot;);</div><div class="line">cell2 =  row2.createCell(1);</div><div class="line">cell2.setCellValue(&quot;20&quot;);</div><div class="line"></div><div class="line">//第三行</div><div class="line">cell1 =  row3.createCell(0);</div><div class="line">cell1.setCellValue(&quot;李四&quot;);</div><div class="line">cell2 =  row3.createCell(1);</div><div class="line">cell2.setCellValue(&quot;18&quot;);</div><div class="line"></div><div class="line">//输出文件</div><div class="line">FileOutputStream output = new FileOutputStream(&quot;test.xlsx&quot;);</div><div class="line">wb.write(output);</div><div class="line">output.flush();</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/8297579-5e28e732a563bc53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>读操作和写操作类似，把create的地方换成get即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//获取Excel对象</div><div class="line">XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(&quot;test.xlsx&quot;));</div><div class="line"></div><div class="line">//获取一个Sheet对象</div><div class="line">XSSFSheet sheet = wb.getSheetAt(0);</div><div class="line"></div><div class="line">//获取Row对象</div><div class="line">XSSFRow row1 = sheet.getRow(0);</div><div class="line">XSSFRow row2 = sheet.getRow(1);</div><div class="line">XSSFRow row3 = sheet.getRow(2);</div><div class="line"></div><div class="line">//获取Cell对象的值并输出</div><div class="line">System.out.println(row1.getCell(0) + &quot; &quot; + row1.getCell(1));</div><div class="line">System.out.println(row2.getCell(0) + &quot; &quot; + row2.getCell(1));</div><div class="line">System.out.println(row3.getCell(0) + &quot; &quot; + row3.getCell(1));</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/8297579-2024e73c2e8adf72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>当然也可以根据文件扩展名自动选择使用哪个子类生成Workbook对象，这里直接封一个util工具类，方便以后直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line">import org.apache.poi.ss.usermodel.*;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">public class ReadExcelUtils &#123;</div><div class="line"></div><div class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class="line"></div><div class="line">    private Workbook wb;</div><div class="line">    private Sheet sheet;</div><div class="line">    private Row row;</div><div class="line"></div><div class="line">    public ReadExcelUtils(String filepath) &#123;</div><div class="line">        if(filepath==null)&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        String ext = filepath.substring(filepath.lastIndexOf(&quot;.&quot;));</div><div class="line">        try &#123;</div><div class="line">            InputStream is = new FileInputStream(filepath);</div><div class="line">            if(&quot;.xls&quot;.equals(ext))&#123;</div><div class="line">                wb = new HSSFWorkbook(is);</div><div class="line">            &#125;else if(&quot;.xlsx&quot;.equals(ext))&#123;</div><div class="line">                wb = new XSSFWorkbook(is);</div><div class="line">            &#125;else&#123;</div><div class="line">                wb=null;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            logger.error(&quot;FileNotFoundException&quot;, e);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            logger.error(&quot;IOException&quot;, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 读取Excel表格表头的内容</div><div class="line">     * @return String 表头内容的数组</div><div class="line">     */</div><div class="line">    public String[] readExcelTitle() throws Exception&#123;</div><div class="line">        if(wb==null)&#123;</div><div class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</div><div class="line">        &#125;</div><div class="line">        sheet = wb.getSheetAt(0);</div><div class="line">        row = sheet.getRow(0);</div><div class="line">        // 标题总列数</div><div class="line">        int colNum = row.getPhysicalNumberOfCells();</div><div class="line"></div><div class="line">        String[] title = new String[colNum];</div><div class="line">        for (int i = 0; i &lt; colNum; i++) &#123;</div><div class="line">            // title[i] = getStringCellValue(row.getCell((short) i));</div><div class="line">            title[i] = row.getCell(i).getStringCellValue();</div><div class="line">        &#125;</div><div class="line">        return title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 读取Excel数据内容</div><div class="line">     * @return Map 包含单元格数据内容的Map对象</div><div class="line">     */</div><div class="line">    public Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; readExcelContent() throws Exception&#123;</div><div class="line">        if(wb==null)&#123;</div><div class="line">            throw new Exception(&quot;Workbook对象为空！&quot;);</div><div class="line">        &#125;</div><div class="line">        Map&lt;Integer, Map&lt;Integer,Object&gt;&gt; content = new HashMap&lt;Integer, Map&lt;Integer,Object&gt;&gt;();</div><div class="line"></div><div class="line">        sheet = wb.getSheetAt(0);</div><div class="line">        // 得到总行数</div><div class="line">        int rowNum = sheet.getLastRowNum();</div><div class="line">        row = sheet.getRow(0);</div><div class="line">        int colNum = row.getPhysicalNumberOfCells();</div><div class="line"></div><div class="line">        // 正文内容应该从第二行开始,第一行为表头的标题</div><div class="line">        for (int i = 1; i &lt;= rowNum; i++) &#123;</div><div class="line">            row = sheet.getRow(i);</div><div class="line">            int j = 0;</div><div class="line">            Map&lt;Integer,Object&gt; cellValue = new HashMap&lt;Integer, Object&gt;();</div><div class="line">            while (j &lt; colNum) &#123;</div><div class="line">                Object obj = getCellFormatValue(row.getCell(j));</div><div class="line">                cellValue.put(j, obj);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            content.put(i, cellValue);</div><div class="line">        &#125;</div><div class="line">        return content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据Cell类型设置数据</div><div class="line">     * @param cell</div><div class="line">     * @return Object</div><div class="line">     */</div><div class="line">    private Object getCellFormatValue(Cell cell) &#123;</div><div class="line">        Object cellvalue = &quot;&quot;;</div><div class="line">        if (cell != null) &#123;</div><div class="line"></div><div class="line">            // 判断当前Cell的Type</div><div class="line">            switch (cell.getCellType()) &#123;</div><div class="line">                case Cell.CELL_TYPE_NUMERIC:// 如果当前Cell的Type为NUMERIC</div><div class="line">                case Cell.CELL_TYPE_FORMULA: &#123;</div><div class="line">                    // 判断当前的cell是否为Date</div><div class="line">                    if (DateUtil.isCellDateFormatted(cell)) &#123;</div><div class="line">                        // 如果是Date类型则，转化为Data格式</div><div class="line">                        // data格式是带时分秒的：2013-7-10 0:00:00</div><div class="line">                        // cellvalue = cell.getDateCellValue().toLocaleString();</div><div class="line"></div><div class="line"></div><div class="line">                        // data格式是不带带时分秒的：2013-7-10</div><div class="line">                        Date date = cell.getDateCellValue();</div><div class="line">                        cellvalue = date;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        // 如果是纯数字</div><div class="line">                        // 取得当前Cell的数值</div><div class="line">                        cellvalue = String.valueOf(cell.getNumericCellValue());</div><div class="line">                    &#125;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                case Cell.CELL_TYPE_STRING:// 如果当前Cell的Type为STRING</div><div class="line">                    // 取得当前的Cell字符串</div><div class="line">                    cellvalue = cell.getRichStringCellValue().getString();</div><div class="line">                    break;</div><div class="line">                default:// 默认的Cell值</div><div class="line">                    cellvalue = &quot;&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            cellvalue = &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">        return cellvalue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Service部署Spring Boot]]></title>
      <url>/2017/10/06/%E4%BD%BF%E7%94%A8Service%E9%83%A8%E7%BD%B2Spring%20Boot/</url>
      <content type="html"><![CDATA[<h4 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h4><p>Spring Boot 的部署很简单，无论使用maven还是gradle构建成jar包之后，上传到服务器上，运行 <code>java -jar *.jar</code> 即可完成简单的部署。如果想使用外部的配置文件直接在后面加参数就行了  <code>--spring.config.location=application-production.yml</code>  如果想关闭终端还在后台启动的话加上 nohup 就可以了<br><code>nohup java -jar *.jar  --spring.config.location=application-production.yml</code></p>
<h4 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h4><p>普通情况只要关闭终端或ctrl+c即可结束应用，如果使用nohup部署的话先要找到进程号，然后杀掉进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lsof -i:8080</div><div class="line">COMMAND  PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME</div><div class="line">java    2417 root   26u  IPv6 1672621      0t0  TCP *:webcache (LISTEN)</div><div class="line">kill -9 2417</div></pre></td></tr></table></figure></p>
<h4 id="使用service"><a href="#使用service" class="headerlink" title="使用service"></a>使用service</h4><p>如果每一次部署和杀死都要手动的话，频率多了其实也挺麻烦的，可以使用脚本来解决这个问题。<br>在 <code>etc/init.d</code> 先建一个脚本，把这个项目作为service来运行<br>例如 新建<code>etc/init.d/test</code><br>内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">SERVICE_NAME=test</div><div class="line">HOME=/root/webserver/test</div><div class="line">PATH_TO_JAR=$HOME/*.jar</div><div class="line">PID_PATH_NAME=/tmp/test.pid</div><div class="line"></div><div class="line">LOG=$HOME/production.log</div><div class="line">ERROR_LOG=$HOME/production.err</div><div class="line">CONFIG=$HOME/application-production.yml</div><div class="line">case $1 in</div><div class="line">    start)</div><div class="line">        echo &quot;Starting $SERVICE_NAME ...&quot;</div><div class="line">        if [ ! -f $PID_PATH_NAME ]; then</div><div class="line">            cd $HOME</div><div class="line">            nohup java -jar $PATH_TO_JAR --spring.config.location=application-production.yml &gt; $LOG 2&gt; $ERROR_LOG &amp;</div><div class="line">                        echo $! &gt; $PID_PATH_NAME</div><div class="line">            echo &quot;$SERVICE_NAME started ...&quot;</div><div class="line">        else</div><div class="line">            echo &quot;$SERVICE_NAME is already running ...&quot;</div><div class="line">        fi</div><div class="line">    ;;</div><div class="line">    stop)</div><div class="line">        if [ -f $PID_PATH_NAME ]; then</div><div class="line">            PID=$(cat $PID_PATH_NAME);</div><div class="line">            echo &quot;$SERVICE_NAME stoping ...&quot;</div><div class="line">            kill $PID;</div><div class="line">            echo &quot;$SERVICE_NAME stopped ...&quot;</div><div class="line">            rm $PID_PATH_NAME</div><div class="line">        else</div><div class="line">            echo &quot;$SERVICE_NAME is not running ...&quot;</div><div class="line">        fi</div><div class="line">    ;;</div><div class="line">    restart)</div><div class="line">        if [ -f $PID_PATH_NAME ]; then</div><div class="line">            PID=$(cat $PID_PATH_NAME);</div><div class="line">            echo &quot;$SERVICE_NAME stopping ...&quot;;</div><div class="line">            kill $PID;</div><div class="line">            echo &quot;$SERVICE_NAME stopped ...&quot;;</div><div class="line">            rm $PID_PATH_NAME</div><div class="line">            echo &quot;$SERVICE_NAME starting ...&quot;</div><div class="line">            cd $HOME/current</div><div class="line">            nohup java -jar $PATH_TO_JAR --spring.config.location=application-production.yml &gt; $LOG 2&gt; $ERROR_LOG &amp;</div><div class="line">                        echo $! &gt; $PID_PATH_NAME</div><div class="line">            echo &quot;$SERVICE_NAME started ...&quot;</div><div class="line">        else</div><div class="line">            echo &quot;$SERVICE_NAME is not running ...&quot;</div><div class="line">        fi</div><div class="line">    ;;</div><div class="line">esac</div></pre></td></tr></table></figure></p>
<p>保存脚本<br>赋予脚本可执行权限 <code>sudo chmod +x  etc/init.d/test</code><br>把需要部署的jar包放到脚本中<code>HOME</code>的目录下，然后就可以使用service的方式部署或杀死项目了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service test start</div><div class="line">sudo service test stop</div><div class="line">sudo service test restart</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
  
  
    
  
</search>
